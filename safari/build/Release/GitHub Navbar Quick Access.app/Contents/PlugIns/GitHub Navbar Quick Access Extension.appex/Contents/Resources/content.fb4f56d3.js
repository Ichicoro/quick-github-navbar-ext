// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"l1KsJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
// @ts-ignore
var _optionsStorageJs = require("./options-storage.js");
var _optionsStorageJsDefault = parcelHelpers.interopDefault(_optionsStorageJs);
var _preact = require("preact");
var _injected = require("./injected");
var _injectedDefault = parcelHelpers.interopDefault(_injected);
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
function init() {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function() {
        var options, wideElement, button, spanContainer, color, text, notice;
        return __generator(this, function(_c) {
            switch(_c.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        (0, _optionsStorageJsDefault.default).getAll()
                    ];
                case 1:
                    options = _c.sent();
                    wideElement = document.querySelector(".Header > .Header-item.Header-item--full") //.width-full
                    ;
                    button = document.createElement("button");
                    button.innerText = "Quick";
                    button.classList.add("mr-md-3");
                    (_a = document.querySelector("#inject_me_ghqa")) === null || _a === void 0 || _a.remove();
                    spanContainer = document.createElement("span");
                    spanContainer.id = "inject_me_ghqa";
                    spanContainer.classList.add("mr-md-3");
                    console.log(spanContainer);
                    // const button = <button className="mr-md-3">QuickAccess</button>
                    // console.log(button)
                    (_b = wideElement === null || wideElement === void 0 ? void 0 : wideElement.parentElement) === null || _b === void 0 || _b.insertBefore(spanContainer, wideElement === null || wideElement === void 0 ? void 0 : wideElement.nextSibling);
                    (0, _preact.render)((0, _preact.h)((0, _injectedDefault.default), null), spanContainer);
                    color = "rgb(" + options.colorRed + ", " + options.colorGreen + "," + options.colorBlue + ")";
                    text = options.text;
                    notice = document.createElement("div");
                    notice.innerHTML = text;
                    document.body.append(notice);
                    notice.id = "text-notice";
                    notice.style.border = "2px solid " + color;
                    notice.style.color = color;
                    return [
                        2 /*return*/ 
                    ];
            }
        });
    });
}
init();

},{"./options-storage.js":"5VeG8","preact":"jJoga","./injected":"hj7v7","@parcel/transformer-js/src/esmodule-helpers.js":"8ISrk"}],"5VeG8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _webextOptionsSync = require("webext-options-sync");
var _webextOptionsSyncDefault = parcelHelpers.interopDefault(_webextOptionsSync);
exports.default = new (0, _webextOptionsSyncDefault.default)({
    defaults: {
        colorRed: 244,
        colorGreen: 67,
        colorBlue: 54,
        text: "Set a text!"
    },
    migrations: [
        (0, _webextOptionsSyncDefault.default).migrations.removeUnused, 
    ],
    logging: true
});

},{"webext-options-sync":"5Apzs","@parcel/transformer-js/src/esmodule-helpers.js":"8ISrk"}],"5Apzs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>OptionsSync);
var _webextDetectPage = require("webext-detect-page");
function throttle(delay, noTrailing, callback, debounceMode) {
    var timeoutID;
    var cancelled = false;
    var lastExec = 0;
    function clearExistingTimeout() {
        timeoutID && clearTimeout(timeoutID);
    }
    if ("boolean" != typeof noTrailing) {
        debounceMode = callback;
        callback = noTrailing;
        noTrailing = void 0;
    }
    function wrapper() {
        for(var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++)arguments_[_key] = arguments[_key];
        var self = this;
        var elapsed = Date.now() - lastExec;
        if (!cancelled) {
            debounceMode && !timeoutID && exec();
            clearExistingTimeout();
            void 0 === debounceMode && elapsed > delay ? exec() : true !== noTrailing && (timeoutID = setTimeout(debounceMode ? clear : exec, void 0 === debounceMode ? delay - elapsed : delay));
        }
        function exec() {
            lastExec = Date.now();
            callback.apply(self, arguments_);
        }
        function clear() {
            timeoutID = void 0;
        }
    }
    wrapper.cancel = function() {
        clearExistingTimeout();
        cancelled = true;
    };
    return wrapper;
}
class TypeRegistry {
    constructor(initial = {}){
        this.registeredTypes = initial;
    }
    get(type) {
        return void 0 !== this.registeredTypes[type] ? this.registeredTypes[type] : this.registeredTypes.default;
    }
    register(type, item) {
        void 0 === this.registeredTypes[type] && (this.registeredTypes[type] = item);
    }
    registerDefault(item) {
        this.register("default", item);
    }
}
class KeyExtractors extends TypeRegistry {
    constructor(options){
        super(options);
        this.registerDefault((el)=>el.getAttribute("name") || "");
    }
}
class InputReaders extends TypeRegistry {
    constructor(options1){
        super(options1);
        this.registerDefault((el)=>el.value);
        this.register("checkbox", (el)=>null !== el.getAttribute("value") ? el.checked ? el.getAttribute("value") : null : el.checked);
        this.register("select", (el)=>(function(elem) {
                var value, option, i;
                var options = elem.options;
                var index = elem.selectedIndex;
                var one = "select-one" === elem.type;
                var values = one ? null : [];
                var max = one ? index + 1 : options.length;
                i = index < 0 ? max : one ? index : 0;
                for(; i < max; i++)if (((option = options[i]).selected || i === index) && !option.disabled && !(option.parentNode.disabled && "optgroup" === option.parentNode.tagName.toLowerCase())) {
                    value = option.value;
                    if (one) return value;
                    values.push(value);
                }
                return values;
            })(el));
    }
}
class KeyAssignmentValidators extends TypeRegistry {
    constructor(options){
        super(options);
        this.registerDefault(()=>true);
        this.register("radio", (el)=>el.checked);
    }
}
function keySplitter(key) {
    let matches = key.match(/[^[\]]+/g);
    let lastKey;
    if (key.length > 1 && key.indexOf("[]") === key.length - 2) {
        lastKey = matches.pop();
        matches.push([
            lastKey
        ]);
    }
    return matches;
}
function getElementType(el) {
    let typeAttr;
    let tagName = el.tagName;
    let type = tagName;
    if ("input" === tagName.toLowerCase()) {
        typeAttr = el.getAttribute("type");
        type = typeAttr || "text";
    }
    return type.toLowerCase();
}
function getInputElements(element, options) {
    return Array.prototype.filter.call(element.querySelectorAll("input,select,textarea"), (el)=>{
        if ("input" === el.tagName.toLowerCase() && ("submit" === el.type || "reset" === el.type)) return false;
        let myType = getElementType(el);
        let identifier = options.keyExtractors.get(myType)(el);
        let foundInInclude = -1 !== (options.include || []).indexOf(identifier);
        let foundInExclude = -1 !== (options.exclude || []).indexOf(identifier);
        let foundInIgnored = false;
        let reject = false;
        if (options.ignoredTypes) for (let selector of options.ignoredTypes)el.matches(selector) && (foundInIgnored = true);
        reject = !foundInInclude && (!!options.include || foundInExclude || foundInIgnored);
        return !reject;
    });
}
function assignKeyValue(obj, keychain, value) {
    if (!keychain) return obj;
    var key = keychain.shift();
    obj[key] || (obj[key] = Array.isArray(key) ? [] : {});
    0 === keychain.length && (Array.isArray(obj[key]) ? null !== value && obj[key].push(value) : obj[key] = value);
    keychain.length > 0 && assignKeyValue(obj[key], keychain, value);
    return obj;
}
function serialize(element, options = {}) {
    let data = {};
    options.keySplitter = options.keySplitter || keySplitter;
    options.keyExtractors = new KeyExtractors(options.keyExtractors || {});
    options.inputReaders = new InputReaders(options.inputReaders || {});
    options.keyAssignmentValidators = new KeyAssignmentValidators(options.keyAssignmentValidators || {});
    Array.prototype.forEach.call(getInputElements(element, options), (el)=>{
        let type = getElementType(el);
        let key = options.keyExtractors.get(type)(el);
        let value = options.inputReaders.get(type)(el);
        if (options.keyAssignmentValidators.get(type)(el, key, value)) {
            let keychain = options.keySplitter(key);
            data = assignKeyValue(data, keychain, value);
        }
    });
    return data;
}
class InputWriters extends TypeRegistry {
    constructor(options){
        super(options);
        this.registerDefault((el, value)=>{
            el.value = value;
        });
        this.register("checkbox", (el, value)=>{
            null === value ? el.indeterminate = true : el.checked = Array.isArray(value) ? -1 !== value.indexOf(el.value) : value;
        });
        this.register("radio", function(el, value) {
            void 0 !== value && (el.checked = el.value === value.toString());
        });
        this.register("select", setSelectValue);
    }
}
function setSelectValue(elem, value) {
    var optionSet, option;
    var options = elem.options;
    var values = function(arr) {
        var ret = [];
        null !== arr && (Array.isArray(arr) ? ret.push.apply(ret, arr) : ret.push(arr));
        return ret;
    }(value);
    var i = options.length;
    for(; i--;){
        option = options[i];
        if (values.indexOf(option.value) > -1) {
            option.setAttribute("selected", true);
            optionSet = true;
        }
    }
    optionSet || (elem.selectedIndex = -1);
}
function keyJoiner(parentKey, childKey) {
    return parentKey + "[" + childKey + "]";
}
function flattenData(data, parentKey, options = {}) {
    let flatData = {};
    let keyJoiner$1 = options.keyJoiner || keyJoiner;
    for(let keyName in data){
        if (!data.hasOwnProperty(keyName)) continue;
        let value = data[keyName];
        let hash = {};
        parentKey && (keyName = keyJoiner$1(parentKey, keyName));
        if (Array.isArray(value)) {
            hash[keyName + "[]"] = value;
            hash[keyName] = value;
        } else "object" == typeof value ? hash = flattenData(value, keyName, options) : hash[keyName] = value;
        Object.assign(flatData, hash);
    }
    return flatData;
}
function deserialize(form, data, options = {}) {
    let flattenedData = flattenData(data, null, options);
    options.keyExtractors = new KeyExtractors(options.keyExtractors || {});
    options.inputWriters = new InputWriters(options.inputWriters || {});
    Array.prototype.forEach.call(getInputElements(form, options), (el)=>{
        let type = getElementType(el);
        let key = options.keyExtractors.get(type)(el);
        options.inputWriters.get(type)(el, flattenedData[key]);
    });
}
var lzString = {
    exports: {}
};
module = lzString, LZString = function() {
    var f = String.fromCharCode;
    var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
    var baseReverseDic = {};
    function getBaseValue(alphabet, character) {
        if (!baseReverseDic[alphabet]) {
            baseReverseDic[alphabet] = {};
            for(var i = 0; i < alphabet.length; i++)baseReverseDic[alphabet][alphabet.charAt(i)] = i;
        }
        return baseReverseDic[alphabet][character];
    }
    var LZString1 = {
        compressToBase64: function(input) {
            if (null == input) return "";
            var res = LZString1._compress(input, 6, function(a) {
                return keyStrBase64.charAt(a);
            });
            switch(res.length % 4){
                default:
                case 0:
                    return res;
                case 1:
                    return res + "===";
                case 2:
                    return res + "==";
                case 3:
                    return res + "=";
            }
        },
        decompressFromBase64: function(input) {
            return null == input ? "" : "" == input ? null : LZString1._decompress(input.length, 32, function(index) {
                return getBaseValue(keyStrBase64, input.charAt(index));
            });
        },
        compressToUTF16: function(input) {
            return null == input ? "" : LZString1._compress(input, 15, function(a) {
                return f(a + 32);
            }) + " ";
        },
        decompressFromUTF16: function(compressed) {
            return null == compressed ? "" : "" == compressed ? null : LZString1._decompress(compressed.length, 16384, function(index) {
                return compressed.charCodeAt(index) - 32;
            });
        },
        compressToUint8Array: function(uncompressed) {
            var compressed = LZString1.compress(uncompressed);
            var buf = new Uint8Array(2 * compressed.length);
            for(var i = 0, TotalLen = compressed.length; i < TotalLen; i++){
                var current_value = compressed.charCodeAt(i);
                buf[2 * i] = current_value >>> 8;
                buf[2 * i + 1] = current_value % 256;
            }
            return buf;
        },
        decompressFromUint8Array: function(compressed) {
            if (null == compressed) return LZString1.decompress(compressed);
            var buf = new Array(compressed.length / 2);
            for(var i = 0, TotalLen = buf.length; i < TotalLen; i++)buf[i] = 256 * compressed[2 * i] + compressed[2 * i + 1];
            var result = [];
            buf.forEach(function(c) {
                result.push(f(c));
            });
            return LZString1.decompress(result.join(""));
        },
        compressToEncodedURIComponent: function(input) {
            return null == input ? "" : LZString1._compress(input, 6, function(a) {
                return keyStrUriSafe.charAt(a);
            });
        },
        decompressFromEncodedURIComponent: function(input) {
            if (null == input) return "";
            if ("" == input) return null;
            input = input.replace(/ /g, "+");
            return LZString1._decompress(input.length, 32, function(index) {
                return getBaseValue(keyStrUriSafe, input.charAt(index));
            });
        },
        compress: function(uncompressed) {
            return LZString1._compress(uncompressed, 16, function(a) {
                return f(a);
            });
        },
        _compress: function(uncompressed, bitsPerChar, getCharFromInt) {
            if (null == uncompressed) return "";
            var i, value, ii, context_dictionary = {}, context_dictionaryToCreate = {}, context_c = "", context_wc = "", context_w = "", context_enlargeIn = 2, context_dictSize = 3, context_numBits = 2, context_data = [], context_data_val = 0, context_data_position = 0;
            for(ii = 0; ii < uncompressed.length; ii += 1){
                context_c = uncompressed.charAt(ii);
                if (!Object.prototype.hasOwnProperty.call(context_dictionary, context_c)) {
                    context_dictionary[context_c] = context_dictSize++;
                    context_dictionaryToCreate[context_c] = true;
                }
                context_wc = context_w + context_c;
                if (Object.prototype.hasOwnProperty.call(context_dictionary, context_wc)) context_w = context_wc;
                else {
                    if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
                        if (context_w.charCodeAt(0) < 256) {
                            for(i = 0; i < context_numBits; i++){
                                context_data_val <<= 1;
                                if (context_data_position == bitsPerChar - 1) {
                                    context_data_position = 0;
                                    context_data.push(getCharFromInt(context_data_val));
                                    context_data_val = 0;
                                } else context_data_position++;
                            }
                            value = context_w.charCodeAt(0);
                            for(i = 0; i < 8; i++){
                                context_data_val = context_data_val << 1 | 1 & value;
                                if (context_data_position == bitsPerChar - 1) {
                                    context_data_position = 0;
                                    context_data.push(getCharFromInt(context_data_val));
                                    context_data_val = 0;
                                } else context_data_position++;
                                value >>= 1;
                            }
                        } else {
                            value = 1;
                            for(i = 0; i < context_numBits; i++){
                                context_data_val = context_data_val << 1 | value;
                                if (context_data_position == bitsPerChar - 1) {
                                    context_data_position = 0;
                                    context_data.push(getCharFromInt(context_data_val));
                                    context_data_val = 0;
                                } else context_data_position++;
                                value = 0;
                            }
                            value = context_w.charCodeAt(0);
                            for(i = 0; i < 16; i++){
                                context_data_val = context_data_val << 1 | 1 & value;
                                if (context_data_position == bitsPerChar - 1) {
                                    context_data_position = 0;
                                    context_data.push(getCharFromInt(context_data_val));
                                    context_data_val = 0;
                                } else context_data_position++;
                                value >>= 1;
                            }
                        }
                        if (0 == --context_enlargeIn) {
                            context_enlargeIn = Math.pow(2, context_numBits);
                            context_numBits++;
                        }
                        delete context_dictionaryToCreate[context_w];
                    } else {
                        value = context_dictionary[context_w];
                        for(i = 0; i < context_numBits; i++){
                            context_data_val = context_data_val << 1 | 1 & value;
                            if (context_data_position == bitsPerChar - 1) {
                                context_data_position = 0;
                                context_data.push(getCharFromInt(context_data_val));
                                context_data_val = 0;
                            } else context_data_position++;
                            value >>= 1;
                        }
                    }
                    if (0 == --context_enlargeIn) {
                        context_enlargeIn = Math.pow(2, context_numBits);
                        context_numBits++;
                    }
                    context_dictionary[context_wc] = context_dictSize++;
                    context_w = String(context_c);
                }
            }
            if ("" !== context_w) {
                if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
                    if (context_w.charCodeAt(0) < 256) {
                        for(i = 0; i < context_numBits; i++){
                            context_data_val <<= 1;
                            if (context_data_position == bitsPerChar - 1) {
                                context_data_position = 0;
                                context_data.push(getCharFromInt(context_data_val));
                                context_data_val = 0;
                            } else context_data_position++;
                        }
                        value = context_w.charCodeAt(0);
                        for(i = 0; i < 8; i++){
                            context_data_val = context_data_val << 1 | 1 & value;
                            if (context_data_position == bitsPerChar - 1) {
                                context_data_position = 0;
                                context_data.push(getCharFromInt(context_data_val));
                                context_data_val = 0;
                            } else context_data_position++;
                            value >>= 1;
                        }
                    } else {
                        value = 1;
                        for(i = 0; i < context_numBits; i++){
                            context_data_val = context_data_val << 1 | value;
                            if (context_data_position == bitsPerChar - 1) {
                                context_data_position = 0;
                                context_data.push(getCharFromInt(context_data_val));
                                context_data_val = 0;
                            } else context_data_position++;
                            value = 0;
                        }
                        value = context_w.charCodeAt(0);
                        for(i = 0; i < 16; i++){
                            context_data_val = context_data_val << 1 | 1 & value;
                            if (context_data_position == bitsPerChar - 1) {
                                context_data_position = 0;
                                context_data.push(getCharFromInt(context_data_val));
                                context_data_val = 0;
                            } else context_data_position++;
                            value >>= 1;
                        }
                    }
                    if (0 == --context_enlargeIn) {
                        context_enlargeIn = Math.pow(2, context_numBits);
                        context_numBits++;
                    }
                    delete context_dictionaryToCreate[context_w];
                } else {
                    value = context_dictionary[context_w];
                    for(i = 0; i < context_numBits; i++){
                        context_data_val = context_data_val << 1 | 1 & value;
                        if (context_data_position == bitsPerChar - 1) {
                            context_data_position = 0;
                            context_data.push(getCharFromInt(context_data_val));
                            context_data_val = 0;
                        } else context_data_position++;
                        value >>= 1;
                    }
                }
                if (0 == --context_enlargeIn) {
                    context_enlargeIn = Math.pow(2, context_numBits);
                    context_numBits++;
                }
            }
            value = 2;
            for(i = 0; i < context_numBits; i++){
                context_data_val = context_data_val << 1 | 1 & value;
                if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                } else context_data_position++;
                value >>= 1;
            }
            for(;;){
                context_data_val <<= 1;
                if (context_data_position == bitsPerChar - 1) {
                    context_data.push(getCharFromInt(context_data_val));
                    break;
                }
                context_data_position++;
            }
            return context_data.join("");
        },
        decompress: function(compressed) {
            return null == compressed ? "" : "" == compressed ? null : LZString1._decompress(compressed.length, 32768, function(index) {
                return compressed.charCodeAt(index);
            });
        },
        _decompress: function(length, resetValue, getNextValue) {
            var i, w, bits, resb, maxpower, power, c, dictionary = [], enlargeIn = 4, dictSize = 4, numBits = 3, entry = "", result = [], data = {
                val: getNextValue(0),
                position: resetValue,
                index: 1
            };
            for(i = 0; i < 3; i += 1)dictionary[i] = i;
            bits = 0;
            maxpower = Math.pow(2, 2);
            power = 1;
            for(; power != maxpower;){
                resb = data.val & data.position;
                data.position >>= 1;
                if (0 == data.position) {
                    data.position = resetValue;
                    data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
            }
            switch(bits){
                case 0:
                    bits = 0;
                    maxpower = Math.pow(2, 8);
                    power = 1;
                    for(; power != maxpower;){
                        resb = data.val & data.position;
                        data.position >>= 1;
                        if (0 == data.position) {
                            data.position = resetValue;
                            data.val = getNextValue(data.index++);
                        }
                        bits |= (resb > 0 ? 1 : 0) * power;
                        power <<= 1;
                    }
                    c = f(bits);
                    break;
                case 1:
                    bits = 0;
                    maxpower = Math.pow(2, 16);
                    power = 1;
                    for(; power != maxpower;){
                        resb = data.val & data.position;
                        data.position >>= 1;
                        if (0 == data.position) {
                            data.position = resetValue;
                            data.val = getNextValue(data.index++);
                        }
                        bits |= (resb > 0 ? 1 : 0) * power;
                        power <<= 1;
                    }
                    c = f(bits);
                    break;
                case 2:
                    return "";
            }
            dictionary[3] = c;
            w = c;
            result.push(c);
            for(;;){
                if (data.index > length) return "";
                bits = 0;
                maxpower = Math.pow(2, numBits);
                power = 1;
                for(; power != maxpower;){
                    resb = data.val & data.position;
                    data.position >>= 1;
                    if (0 == data.position) {
                        data.position = resetValue;
                        data.val = getNextValue(data.index++);
                    }
                    bits |= (resb > 0 ? 1 : 0) * power;
                    power <<= 1;
                }
                switch(c = bits){
                    case 0:
                        bits = 0;
                        maxpower = Math.pow(2, 8);
                        power = 1;
                        for(; power != maxpower;){
                            resb = data.val & data.position;
                            data.position >>= 1;
                            if (0 == data.position) {
                                data.position = resetValue;
                                data.val = getNextValue(data.index++);
                            }
                            bits |= (resb > 0 ? 1 : 0) * power;
                            power <<= 1;
                        }
                        dictionary[dictSize++] = f(bits);
                        c = dictSize - 1;
                        enlargeIn--;
                        break;
                    case 1:
                        bits = 0;
                        maxpower = Math.pow(2, 16);
                        power = 1;
                        for(; power != maxpower;){
                            resb = data.val & data.position;
                            data.position >>= 1;
                            if (0 == data.position) {
                                data.position = resetValue;
                                data.val = getNextValue(data.index++);
                            }
                            bits |= (resb > 0 ? 1 : 0) * power;
                            power <<= 1;
                        }
                        dictionary[dictSize++] = f(bits);
                        c = dictSize - 1;
                        enlargeIn--;
                        break;
                    case 2:
                        return result.join("");
                }
                if (0 == enlargeIn) {
                    enlargeIn = Math.pow(2, numBits);
                    numBits++;
                }
                if (dictionary[c]) entry = dictionary[c];
                else {
                    if (c !== dictSize) return null;
                    entry = w + w.charAt(0);
                }
                result.push(entry);
                dictionary[dictSize++] = w + entry.charAt(0);
                w = entry;
                if (0 == --enlargeIn) {
                    enlargeIn = Math.pow(2, numBits);
                    numBits++;
                }
            }
        }
    };
    return LZString1;
}(), null != module && (module.exports = LZString);
var module, LZString;
class OptionsSync {
    constructor({ defaults: defaults = {} , storageName: storageName = "options" , migrations: migrations = [] , logging: logging = true , storageType: storageType = "sync"  } = {}){
        Object.defineProperty(this, "storageName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "storageType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "defaults", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_form", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_migrations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.storageName = storageName;
        this.defaults = defaults;
        this.storageType = storageType;
        this._handleFormInput = (delay = 300, atBegin = this._handleFormInput.bind(this), void 0 === callback ? throttle(delay, atBegin, false) : throttle(delay, callback, false !== atBegin));
        var delay, atBegin, callback;
        this._handleStorageChangeOnForm = this._handleStorageChangeOnForm.bind(this);
        logging || (this._log = ()=>{});
        this._migrations = this._runMigrations(migrations);
    }
    get storage() {
        return chrome.storage[this.storageType];
    }
    async getAll() {
        await this._migrations;
        return this._getAll();
    }
    async setAll(newOptions) {
        await this._migrations;
        return this._setAll(newOptions);
    }
    async set(newOptions) {
        return this.setAll({
            ...await this.getAll(),
            ...newOptions
        });
    }
    async syncForm(form) {
        this._form = form instanceof HTMLFormElement ? form : document.querySelector(form);
        this._form.addEventListener("input", this._handleFormInput);
        this._form.addEventListener("submit", this._handleFormSubmit);
        chrome.storage.onChanged.addListener(this._handleStorageChangeOnForm);
        this._updateForm(this._form, await this.getAll());
    }
    async stopSyncForm() {
        if (this._form) {
            this._form.removeEventListener("input", this._handleFormInput);
            this._form.removeEventListener("submit", this._handleFormSubmit);
            chrome.storage.onChanged.removeListener(this._handleStorageChangeOnForm);
            delete this._form;
        }
    }
    _log(method, ...args) {
        console[method](...args);
    }
    async _getAll() {
        return new Promise((resolve, reject)=>{
            this.storage.get(this.storageName, (result)=>{
                chrome.runtime.lastError ? reject(chrome.runtime.lastError) : resolve(this._decode(result[this.storageName]));
            });
        });
    }
    async _setAll(newOptions) {
        this._log("log", "Saving options", newOptions);
        return new Promise((resolve, reject)=>{
            this.storage.set({
                [this.storageName]: this._encode(newOptions)
            }, ()=>{
                chrome.runtime.lastError ? reject(chrome.runtime.lastError) : resolve();
            });
        });
    }
    _encode(options) {
        const thinnedOptions = {
            ...options
        };
        for (const [key, value] of Object.entries(thinnedOptions))this.defaults[key] === value && delete thinnedOptions[key];
        this._log("log", "Without the default values", thinnedOptions);
        return lzString.exports.compressToEncodedURIComponent(JSON.stringify(thinnedOptions));
    }
    _decode(options) {
        let decompressed = options;
        "string" == typeof options && (decompressed = JSON.parse(lzString.exports.decompressFromEncodedURIComponent(options)));
        return {
            ...this.defaults,
            ...decompressed
        };
    }
    async _runMigrations(migrations) {
        if (0 === migrations.length || !(0, _webextDetectPage.isBackground)() || !await async function() {
            return new Promise((resolve)=>{
                const callback = (installType)=>{
                    if ("development" !== installType) {
                        chrome.runtime.onInstalled.addListener(()=>{
                            resolve(true);
                        });
                        setTimeout(resolve, 500, false);
                    } else resolve(true);
                };
                chrome.management?.getSelf ? chrome.management.getSelf(({ installType: installType  })=>{
                    callback(installType);
                }) : callback("unknown");
            });
        }()) return;
        const options = await this._getAll();
        const initial = JSON.stringify(options);
        this._log("log", "Found these stored options", {
            ...options
        });
        this._log("info", "Will run", migrations.length, 1 === migrations.length ? "migration" : " migrations");
        for (const migrate of migrations)migrate(options, this.defaults);
        initial !== JSON.stringify(options) && await this._setAll(options);
    }
    async _handleFormInput({ target: target  }) {
        const field = target;
        if (field.name) {
            await this.set(this._parseForm(field.form));
            field.form.dispatchEvent(new CustomEvent("options-sync:form-synced", {
                bubbles: true
            }));
        }
    }
    _handleFormSubmit(event) {
        event.preventDefault();
    }
    _updateForm(form, options) {
        const currentFormState = this._parseForm(form);
        for (const [key, value] of Object.entries(options))currentFormState[key] === value && delete options[key];
        const include = Object.keys(options);
        include.length > 0 && deserialize(form, options, {
            include: include
        });
    }
    _parseForm(form) {
        const include = [];
        for (const field of form.querySelectorAll("[name]"))field.validity.valid && !field.disabled && include.push(field.name.replace(/\[.*]/, ""));
        return serialize(form, {
            include: include
        });
    }
    _handleStorageChangeOnForm(changes, areaName) {
        areaName !== this.storageType || !changes[this.storageName] || document.hasFocus() && this._form.contains(document.activeElement) || this._updateForm(this._form, this._decode(changes[this.storageName].newValue));
    }
}
Object.defineProperty(OptionsSync, "migrations", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: {
        removeUnused (options, defaults) {
            for (const key of Object.keys(options))key in defaults || delete options[key];
        }
    }
});

},{"webext-detect-page":"gkIGC","@parcel/transformer-js/src/esmodule-helpers.js":"8ISrk"}],"gkIGC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "disableWebextDetectPageCache", ()=>disableWebextDetectPageCache);
parcelHelpers.export(exports, "isWebPage", ()=>isWebPage);
parcelHelpers.export(exports, "isExtensionContext", ()=>isExtensionContext);
parcelHelpers.export(exports, "isContentScript", ()=>isContentScript);
parcelHelpers.export(exports, "isBackground", ()=>isBackground);
parcelHelpers.export(exports, "isBackgroundPage", ()=>isBackgroundPage);
parcelHelpers.export(exports, "isBackgroundWorker", ()=>isBackgroundWorker);
parcelHelpers.export(exports, "isOptionsPage", ()=>isOptionsPage);
parcelHelpers.export(exports, "isDevToolsPage", ()=>isDevToolsPage);
parcelHelpers.export(exports, "isFirefox", ()=>isFirefox);
parcelHelpers.export(exports, "isChrome", ()=>isChrome);
parcelHelpers.export(exports, "isSafari", ()=>isSafari);
parcelHelpers.export(exports, "contextNames", ()=>contextNames);
parcelHelpers.export(exports, "getContextName", ()=>getContextName);
let cache = true;
function disableWebextDetectPageCache() {
    cache = false;
}
function isCurrentPathname(path) {
    if (!path) return false;
    try {
        const { pathname  } = new URL(path, location.origin);
        return pathname === location.pathname;
    } catch  {
        return false;
    }
}
function getManifest(_version) {
    return globalThis.chrome?.runtime?.getManifest?.();
}
function once(function_) {
    let result;
    return ()=>{
        if (!cache || typeof result === "undefined") result = function_();
        return result;
    };
}
const isWebPage = once(()=>globalThis.location?.protocol.startsWith("http"));
const isExtensionContext = once(()=>typeof globalThis.chrome?.extension === "object");
const isContentScript = once(()=>isExtensionContext() && isWebPage());
const isBackground = ()=>isBackgroundPage() || isBackgroundWorker();
const isBackgroundPage = once(()=>{
    const manifest = getManifest(2);
    if (manifest && isCurrentPathname(manifest.background_page || manifest.background?.page)) return true;
    return Boolean(manifest?.background?.scripts && isCurrentPathname("/_generated_background_page.html"));
});
const isBackgroundWorker = once(()=>isCurrentPathname(getManifest(3)?.background?.service_worker));
const isOptionsPage = once(()=>{
    if (!isExtensionContext() || !chrome.runtime.getManifest) return false;
    const { options_ui: optionsUi  } = chrome.runtime.getManifest();
    if (typeof optionsUi?.page !== "string") return false;
    const url = new URL(optionsUi.page, location.origin);
    return url.pathname === location.pathname;
});
const isDevToolsPage = once(()=>{
    if (!isExtensionContext() || !chrome.devtools) return false;
    const { devtools_page: devtoolsPage  } = chrome.runtime.getManifest();
    if (typeof devtoolsPage !== "string") return false;
    const url = new URL(devtoolsPage, location.origin);
    return url.pathname === location.pathname;
});
const isFirefox = ()=>globalThis.navigator?.userAgent.includes("Firefox");
const isChrome = ()=>globalThis.navigator?.userAgent.includes("Chrome");
const isSafari = ()=>!isChrome() && globalThis.navigator?.userAgent.includes("Safari");
const contextNames = {
    contentScript: isContentScript,
    background: isBackground,
    options: isOptionsPage,
    devToolsPage: isDevToolsPage,
    extension: isExtensionContext,
    web: isWebPage
};
function getContextName() {
    for (const [name, test] of Object.entries(contextNames)){
        if (test()) return name;
    }
    return "unknown";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"8ISrk"}],"8ISrk":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"jJoga":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>P);
parcelHelpers.export(exports, "hydrate", ()=>S);
parcelHelpers.export(exports, "createElement", ()=>h);
parcelHelpers.export(exports, "h", ()=>h);
parcelHelpers.export(exports, "Fragment", ()=>p);
parcelHelpers.export(exports, "createRef", ()=>y);
parcelHelpers.export(exports, "isValidElement", ()=>i);
parcelHelpers.export(exports, "Component", ()=>d);
parcelHelpers.export(exports, "cloneElement", ()=>q);
parcelHelpers.export(exports, "createContext", ()=>B);
parcelHelpers.export(exports, "toChildArray", ()=>x);
parcelHelpers.export(exports, "options", ()=>l);
var n, l, u, i, t, o, r, f = {}, e = [], c = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
function s(n1, l1) {
    for(var u1 in l1)n1[u1] = l1[u1];
    return n1;
}
function a(n2) {
    var l2 = n2.parentNode;
    l2 && l2.removeChild(n2);
}
function h(l3, u2, i1) {
    var t1, o1, r1, f1 = {};
    for(r1 in u2)"key" == r1 ? t1 = u2[r1] : "ref" == r1 ? o1 = u2[r1] : f1[r1] = u2[r1];
    if (arguments.length > 2 && (f1.children = arguments.length > 3 ? n.call(arguments, 2) : i1), "function" == typeof l3 && null != l3.defaultProps) for(r1 in l3.defaultProps)void 0 === f1[r1] && (f1[r1] = l3.defaultProps[r1]);
    return v(l3, f1, t1, o1, null);
}
function v(n3, i2, t2, o2, r2) {
    var f2 = {
        type: n3,
        props: i2,
        key: t2,
        ref: o2,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: null == r2 ? ++u : r2
    };
    return null == r2 && null != l.vnode && l.vnode(f2), f2;
}
function y() {
    return {
        current: null
    };
}
function p(n4) {
    return n4.children;
}
function d(n5, l4) {
    this.props = n5, this.context = l4;
}
function _(n6, l5) {
    if (null == l5) return n6.__ ? _(n6.__, n6.__.__k.indexOf(n6) + 1) : null;
    for(var u3; l5 < n6.__k.length; l5++)if (null != (u3 = n6.__k[l5]) && null != u3.__e) return u3.__e;
    return "function" == typeof n6.type ? _(n6) : null;
}
function k(n7) {
    var l6, u4;
    if (null != (n7 = n7.__) && null != n7.__c) {
        for(n7.__e = n7.__c.base = null, l6 = 0; l6 < n7.__k.length; l6++)if (null != (u4 = n7.__k[l6]) && null != u4.__e) {
            n7.__e = n7.__c.base = u4.__e;
            break;
        }
        return k(n7);
    }
}
function b(n8) {
    (!n8.__d && (n8.__d = !0) && t.push(n8) && !g.__r++ || o !== l.debounceRendering) && ((o = l.debounceRendering) || setTimeout)(g);
}
function g() {
    for(var n9; g.__r = t.length;)n9 = t.sort(function(n10, l7) {
        return n10.__v.__b - l7.__v.__b;
    }), t = [], n9.some(function(n11) {
        var l8, u5, i3, t3, o3, r3;
        n11.__d && (o3 = (t3 = (l8 = n11).__v).__e, (r3 = l8.__P) && (u5 = [], (i3 = s({}, t3)).__v = t3.__v + 1, j(r3, t3, i3, l8.__n, void 0 !== r3.ownerSVGElement, null != t3.__h ? [
            o3
        ] : null, u5, null == o3 ? _(t3) : o3, t3.__h), z(u5, t3), t3.__e != o3 && k(t3)));
    });
}
function w(n12, l9, u6, i4, t4, o4, r4, c1, s1, a1) {
    var h1, y1, d1, k1, b1, g1, w1, x1 = i4 && i4.__k || e, C1 = x1.length;
    for(u6.__k = [], h1 = 0; h1 < l9.length; h1++)if (null != (k1 = u6.__k[h1] = null == (k1 = l9[h1]) || "boolean" == typeof k1 ? null : "string" == typeof k1 || "number" == typeof k1 || "bigint" == typeof k1 ? v(null, k1, null, null, k1) : Array.isArray(k1) ? v(p, {
        children: k1
    }, null, null, null) : k1.__b > 0 ? v(k1.type, k1.props, k1.key, null, k1.__v) : k1)) {
        if (k1.__ = u6, k1.__b = u6.__b + 1, null === (d1 = x1[h1]) || d1 && k1.key == d1.key && k1.type === d1.type) x1[h1] = void 0;
        else for(y1 = 0; y1 < C1; y1++){
            if ((d1 = x1[y1]) && k1.key == d1.key && k1.type === d1.type) {
                x1[y1] = void 0;
                break;
            }
            d1 = null;
        }
        j(n12, k1, d1 = d1 || f, t4, o4, r4, c1, s1, a1), b1 = k1.__e, (y1 = k1.ref) && d1.ref != y1 && (w1 || (w1 = []), d1.ref && w1.push(d1.ref, null, k1), w1.push(y1, k1.__c || b1, k1)), null != b1 ? (null == g1 && (g1 = b1), "function" == typeof k1.type && k1.__k === d1.__k ? k1.__d = s1 = m(k1, s1, n12) : s1 = A(n12, k1, d1, x1, b1, s1), "function" == typeof u6.type && (u6.__d = s1)) : s1 && d1.__e == s1 && s1.parentNode != n12 && (s1 = _(d1));
    }
    for(u6.__e = g1, h1 = C1; h1--;)null != x1[h1] && ("function" == typeof u6.type && null != x1[h1].__e && x1[h1].__e == u6.__d && (u6.__d = _(i4, h1 + 1)), N(x1[h1], x1[h1]));
    if (w1) for(h1 = 0; h1 < w1.length; h1++)M(w1[h1], w1[++h1], w1[++h1]);
}
function m(n13, l10, u7) {
    for(var i5, t5 = n13.__k, o5 = 0; t5 && o5 < t5.length; o5++)(i5 = t5[o5]) && (i5.__ = n13, l10 = "function" == typeof i5.type ? m(i5, l10, u7) : A(u7, i5, i5, t5, i5.__e, l10));
    return l10;
}
function x(n14, l11) {
    return l11 = l11 || [], null == n14 || "boolean" == typeof n14 || (Array.isArray(n14) ? n14.some(function(n15) {
        x(n15, l11);
    }) : l11.push(n14)), l11;
}
function A(n16, l12, u8, i6, t6, o6) {
    var r5, f3, e1;
    if (void 0 !== l12.__d) r5 = l12.__d, l12.__d = void 0;
    else if (null == u8 || t6 != o6 || null == t6.parentNode) n: if (null == o6 || o6.parentNode !== n16) n16.appendChild(t6), r5 = null;
    else {
        for(f3 = o6, e1 = 0; (f3 = f3.nextSibling) && e1 < i6.length; e1 += 2)if (f3 == t6) break n;
        n16.insertBefore(t6, o6), r5 = o6;
    }
    return void 0 !== r5 ? r5 : t6.nextSibling;
}
function C(n17, l13, u9, i7, t7) {
    var o7;
    for(o7 in u9)"children" === o7 || "key" === o7 || o7 in l13 || H(n17, o7, null, u9[o7], i7);
    for(o7 in l13)t7 && "function" != typeof l13[o7] || "children" === o7 || "key" === o7 || "value" === o7 || "checked" === o7 || u9[o7] === l13[o7] || H(n17, o7, l13[o7], u9[o7], i7);
}
function $(n18, l14, u10) {
    "-" === l14[0] ? n18.setProperty(l14, u10) : n18[l14] = null == u10 ? "" : "number" != typeof u10 || c.test(l14) ? u10 : u10 + "px";
}
function H(n19, l15, u11, i8, t8) {
    var o8;
    n: if ("style" === l15) {
        if ("string" == typeof u11) n19.style.cssText = u11;
        else {
            if ("string" == typeof i8 && (n19.style.cssText = i8 = ""), i8) for(l15 in i8)u11 && l15 in u11 || $(n19.style, l15, "");
            if (u11) for(l15 in u11)i8 && u11[l15] === i8[l15] || $(n19.style, l15, u11[l15]);
        }
    } else if ("o" === l15[0] && "n" === l15[1]) o8 = l15 !== (l15 = l15.replace(/Capture$/, "")), l15 = l15.toLowerCase() in n19 ? l15.toLowerCase().slice(2) : l15.slice(2), n19.l || (n19.l = {}), n19.l[l15 + o8] = u11, u11 ? i8 || n19.addEventListener(l15, o8 ? T : I, o8) : n19.removeEventListener(l15, o8 ? T : I, o8);
    else if ("dangerouslySetInnerHTML" !== l15) {
        if (t8) l15 = l15.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
        else if ("href" !== l15 && "list" !== l15 && "form" !== l15 && "tabIndex" !== l15 && "download" !== l15 && l15 in n19) try {
            n19[l15] = null == u11 ? "" : u11;
            break n;
        } catch (n) {}
        "function" == typeof u11 || (null != u11 && (!1 !== u11 || "a" === l15[0] && "r" === l15[1]) ? n19.setAttribute(l15, u11) : n19.removeAttribute(l15));
    }
}
function I(n20) {
    this.l[n20.type + !1](l.event ? l.event(n20) : n20);
}
function T(n21) {
    this.l[n21.type + !0](l.event ? l.event(n21) : n21);
}
function j(n22, u12, i9, t9, o9, r6, f4, e2, c2) {
    var a2, h2, v1, y2, _1, k2, b2, g2, m1, x2, A1, C2, $1, H1 = u12.type;
    if (void 0 !== u12.constructor) return null;
    null != i9.__h && (c2 = i9.__h, e2 = u12.__e = i9.__e, u12.__h = null, r6 = [
        e2
    ]), (a2 = l.__b) && a2(u12);
    try {
        n: if ("function" == typeof H1) {
            if (g2 = u12.props, m1 = (a2 = H1.contextType) && t9[a2.__c], x2 = a2 ? m1 ? m1.props.value : a2.__ : t9, i9.__c ? b2 = (h2 = u12.__c = i9.__c).__ = h2.__E : ("prototype" in H1 && H1.prototype.render ? u12.__c = h2 = new H1(g2, x2) : (u12.__c = h2 = new d(g2, x2), h2.constructor = H1, h2.render = O), m1 && m1.sub(h2), h2.props = g2, h2.state || (h2.state = {}), h2.context = x2, h2.__n = t9, v1 = h2.__d = !0, h2.__h = []), null == h2.__s && (h2.__s = h2.state), null != H1.getDerivedStateFromProps && (h2.__s == h2.state && (h2.__s = s({}, h2.__s)), s(h2.__s, H1.getDerivedStateFromProps(g2, h2.__s))), y2 = h2.props, _1 = h2.state, v1) null == H1.getDerivedStateFromProps && null != h2.componentWillMount && h2.componentWillMount(), null != h2.componentDidMount && h2.__h.push(h2.componentDidMount);
            else {
                if (null == H1.getDerivedStateFromProps && g2 !== y2 && null != h2.componentWillReceiveProps && h2.componentWillReceiveProps(g2, x2), !h2.__e && null != h2.shouldComponentUpdate && !1 === h2.shouldComponentUpdate(g2, h2.__s, x2) || u12.__v === i9.__v) {
                    h2.props = g2, h2.state = h2.__s, u12.__v !== i9.__v && (h2.__d = !1), h2.__v = u12, u12.__e = i9.__e, u12.__k = i9.__k, u12.__k.forEach(function(n23) {
                        n23 && (n23.__ = u12);
                    }), h2.__h.length && f4.push(h2);
                    break n;
                }
                null != h2.componentWillUpdate && h2.componentWillUpdate(g2, h2.__s, x2), null != h2.componentDidUpdate && h2.__h.push(function() {
                    h2.componentDidUpdate(y2, _1, k2);
                });
            }
            if (h2.context = x2, h2.props = g2, h2.__v = u12, h2.__P = n22, A1 = l.__r, C2 = 0, "prototype" in H1 && H1.prototype.render) h2.state = h2.__s, h2.__d = !1, A1 && A1(u12), a2 = h2.render(h2.props, h2.state, h2.context);
            else do h2.__d = !1, A1 && A1(u12), a2 = h2.render(h2.props, h2.state, h2.context), h2.state = h2.__s;
            while (h2.__d && ++C2 < 25);
            h2.state = h2.__s, null != h2.getChildContext && (t9 = s(s({}, t9), h2.getChildContext())), v1 || null == h2.getSnapshotBeforeUpdate || (k2 = h2.getSnapshotBeforeUpdate(y2, _1)), $1 = null != a2 && a2.type === p && null == a2.key ? a2.props.children : a2, w(n22, Array.isArray($1) ? $1 : [
                $1
            ], u12, i9, t9, o9, r6, f4, e2, c2), h2.base = u12.__e, u12.__h = null, h2.__h.length && f4.push(h2), b2 && (h2.__E = h2.__ = null), h2.__e = !1;
        } else null == r6 && u12.__v === i9.__v ? (u12.__k = i9.__k, u12.__e = i9.__e) : u12.__e = L(i9.__e, u12, i9, t9, o9, r6, f4, c2);
        (a2 = l.diffed) && a2(u12);
    } catch (n24) {
        u12.__v = null, (c2 || null != r6) && (u12.__e = e2, u12.__h = !!c2, r6[r6.indexOf(e2)] = null), l.__e(n24, u12, i9);
    }
}
function z(n25, u13) {
    l.__c && l.__c(u13, n25), n25.some(function(u14) {
        try {
            n25 = u14.__h, u14.__h = [], n25.some(function(n26) {
                n26.call(u14);
            });
        } catch (n27) {
            l.__e(n27, u14.__v);
        }
    });
}
function L(l16, u15, i10, t10, o10, r7, e3, c3) {
    var s2, h3, v2, y3 = i10.props, p1 = u15.props, d2 = u15.type, k3 = 0;
    if ("svg" === d2 && (o10 = !0), null != r7) {
        for(; k3 < r7.length; k3++)if ((s2 = r7[k3]) && "setAttribute" in s2 == !!d2 && (d2 ? s2.localName === d2 : 3 === s2.nodeType)) {
            l16 = s2, r7[k3] = null;
            break;
        }
    }
    if (null == l16) {
        if (null === d2) return document.createTextNode(p1);
        l16 = o10 ? document.createElementNS("http://www.w3.org/2000/svg", d2) : document.createElement(d2, p1.is && p1), r7 = null, c3 = !1;
    }
    if (null === d2) y3 === p1 || c3 && l16.data === p1 || (l16.data = p1);
    else {
        if (r7 = r7 && n.call(l16.childNodes), h3 = (y3 = i10.props || f).dangerouslySetInnerHTML, v2 = p1.dangerouslySetInnerHTML, !c3) {
            if (null != r7) for(y3 = {}, k3 = 0; k3 < l16.attributes.length; k3++)y3[l16.attributes[k3].name] = l16.attributes[k3].value;
            (v2 || h3) && (v2 && (h3 && v2.__html == h3.__html || v2.__html === l16.innerHTML) || (l16.innerHTML = v2 && v2.__html || ""));
        }
        if (C(l16, p1, y3, o10, c3), v2) u15.__k = [];
        else if (k3 = u15.props.children, w(l16, Array.isArray(k3) ? k3 : [
            k3
        ], u15, i10, t10, o10 && "foreignObject" !== d2, r7, e3, r7 ? r7[0] : i10.__k && _(i10, 0), c3), null != r7) for(k3 = r7.length; k3--;)null != r7[k3] && a(r7[k3]);
        c3 || ("value" in p1 && void 0 !== (k3 = p1.value) && (k3 !== l16.value || "progress" === d2 && !k3 || "option" === d2 && k3 !== y3.value) && H(l16, "value", k3, y3.value, !1), "checked" in p1 && void 0 !== (k3 = p1.checked) && k3 !== l16.checked && H(l16, "checked", k3, y3.checked, !1));
    }
    return l16;
}
function M(n28, u16, i11) {
    try {
        "function" == typeof n28 ? n28(u16) : n28.current = u16;
    } catch (n29) {
        l.__e(n29, i11);
    }
}
function N(n30, u17, i12) {
    var t11, o11;
    if (l.unmount && l.unmount(n30), (t11 = n30.ref) && (t11.current && t11.current !== n30.__e || M(t11, null, u17)), null != (t11 = n30.__c)) {
        if (t11.componentWillUnmount) try {
            t11.componentWillUnmount();
        } catch (n31) {
            l.__e(n31, u17);
        }
        t11.base = t11.__P = null;
    }
    if (t11 = n30.__k) for(o11 = 0; o11 < t11.length; o11++)t11[o11] && N(t11[o11], u17, "function" != typeof n30.type);
    i12 || null == n30.__e || a(n30.__e), n30.__e = n30.__d = void 0;
}
function O(n32, l, u18) {
    return this.constructor(n32, u18);
}
function P(u19, i13, t12) {
    var o12, r8, e4;
    l.__ && l.__(u19, i13), r8 = (o12 = "function" == typeof t12) ? null : t12 && t12.__k || i13.__k, e4 = [], j(i13, u19 = (!o12 && t12 || i13).__k = h(p, null, [
        u19
    ]), r8 || f, f, void 0 !== i13.ownerSVGElement, !o12 && t12 ? [
        t12
    ] : r8 ? null : i13.firstChild ? n.call(i13.childNodes) : null, e4, !o12 && t12 ? t12 : r8 ? r8.__e : i13.firstChild, o12), z(e4, u19);
}
function S(n33, l17) {
    P(n33, l17, S);
}
function q(l18, u20, i14) {
    var t13, o13, r9, f5 = s({}, l18.props);
    for(r9 in u20)"key" == r9 ? t13 = u20[r9] : "ref" == r9 ? o13 = u20[r9] : f5[r9] = u20[r9];
    return arguments.length > 2 && (f5.children = arguments.length > 3 ? n.call(arguments, 2) : i14), v(l18.type, f5, t13 || l18.key, o13 || l18.ref, null);
}
function B(n34, l19) {
    var u21 = {
        __c: l19 = "__cC" + r++,
        __: n34,
        Consumer: function(n35, l20) {
            return n35.children(l20);
        },
        Provider: function(n36) {
            var u22, i15;
            return this.getChildContext || (u22 = [], (i15 = {})[l19] = this, this.getChildContext = function() {
                return i15;
            }, this.shouldComponentUpdate = function(n37) {
                this.props.value !== n37.value && u22.some(b);
            }, this.sub = function(n38) {
                u22.push(n38);
                var l21 = n38.componentWillUnmount;
                n38.componentWillUnmount = function() {
                    u22.splice(u22.indexOf(n38), 1), l21 && l21.call(n38);
                };
            }), n36.children;
        }
    };
    return u21.Provider.__ = u21.Consumer.contextType = u21;
}
n = e.slice, l = {
    __e: function(n39, l22, u, i16) {
        for(var t14, o14, r10; l22 = l22.__;)if ((t14 = l22.__c) && !t14.__) try {
            if ((o14 = t14.constructor) && null != o14.getDerivedStateFromError && (t14.setState(o14.getDerivedStateFromError(n39)), r10 = t14.__d), null != t14.componentDidCatch && (t14.componentDidCatch(n39, i16 || {}), r10 = t14.__d), r10) return t14.__E = t14;
        } catch (l23) {
            n39 = l23;
        }
        throw n39;
    }
}, u = 0, i = function(n40) {
    return null != n40 && void 0 === n40.constructor;
}, d.prototype.setState = function(n41, l24) {
    var u23;
    u23 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = s({}, this.state), "function" == typeof n41 && (n41 = n41(s({}, u23), this.props)), n41 && s(u23, n41), null != n41 && this.__v && (l24 && this.__h.push(l24), b(this));
}, d.prototype.forceUpdate = function(n42) {
    this.__v && (this.__e = !0, n42 && this.__h.push(n42), b(this));
}, d.prototype.render = p, t = [], g.__r = 0, r = 0;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"8ISrk"}],"hj7v7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _preact = require("preact");
var _hooks = require("preact/hooks");
var _reactTinyPopover = require("react-tiny-popover");
var _styleScss = require("./style.scss");
var Injected = function() {
    var _a1 = (0, _hooks.useState)(false), isPopoverOpen = _a1[0], setIsPopoverOpen = _a1[1];
    var clickMeButtonRef = (0, _hooks.useRef)();
    return (0, _preact.h)("span", {
        className: "position-relative"
    }, (0, _preact.h)((0, _reactTinyPopover.Popover), {
        isOpen: isPopoverOpen,
        positions: [
            "bottom"
        ],
        padding: 10,
        onClickOutside: function() {
            return setIsPopoverOpen(false);
        },
        ref: clickMeButtonRef,
        content: function(_a) {
            var position = _a.position, childRect = _a.childRect, popoverRect = _a.popoverRect;
            return (0, _preact.h)((0, _reactTinyPopover.ArrowContainer // if you'd like an arrow, you can import the ArrowContainer!
            ), {
                position: position,
                childRect: childRect,
                popoverRect: popoverRect,
                arrowColor: "blue",
                arrowSize: 10,
                arrowStyle: {
                    opacity: 1
                },
                className: "popover-arrow-container",
                arrowClassName: "popover-arrow"
            }, (0, _preact.h)("div", {
                style: {
                    backgroundColor: "white",
                    opacity: 0.7
                },
                onClick: function() {
                    return setIsPopoverOpen(!isPopoverOpen);
                },
                className: "qgn-popover"
            }, "Hi! I'm popover content. Here's my position: ", position, "."));
        }
    }, (0, _preact.h)("button", {
        type: "button",
        onClick: function() {
            setIsPopoverOpen(true);
        }
    }, "testerino")));
};
exports.default = Injected;

},{"preact":"jJoga","preact/hooks":"hnjkk","react-tiny-popover":"7P7dO","./style.scss":"l4tW1","@parcel/transformer-js/src/esmodule-helpers.js":"8ISrk"}],"hnjkk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useState", ()=>y);
parcelHelpers.export(exports, "useReducer", ()=>d);
parcelHelpers.export(exports, "useEffect", ()=>_);
parcelHelpers.export(exports, "useLayoutEffect", ()=>h);
parcelHelpers.export(exports, "useRef", ()=>s);
parcelHelpers.export(exports, "useImperativeHandle", ()=>A);
parcelHelpers.export(exports, "useMemo", ()=>F);
parcelHelpers.export(exports, "useCallback", ()=>T);
parcelHelpers.export(exports, "useContext", ()=>q);
parcelHelpers.export(exports, "useDebugValue", ()=>x);
parcelHelpers.export(exports, "useErrorBoundary", ()=>V);
var _preact = require("preact");
var t, u, r, o, i = 0, c = [], f = [], e = (0, _preact.options).__b, a = (0, _preact.options).__r, v = (0, _preact.options).diffed, l = (0, _preact.options).__c, m = (0, _preact.options).unmount;
function p(t1, r1) {
    (0, _preact.options).__h && (0, _preact.options).__h(u, t1, i || r1), i = 0;
    var o1 = u.__H || (u.__H = {
        __: [],
        __h: []
    });
    return t1 >= o1.__.length && o1.__.push({
        __V: f
    }), o1.__[t1];
}
function y(n) {
    return i = 1, d(z, n);
}
function d(n1, r2, o2) {
    var i1 = p(t++, 2);
    return i1.t = n1, i1.__c || (i1.__ = [
        o2 ? o2(r2) : z(void 0, r2),
        function(n) {
            var t2 = i1.t(i1.__[0], n);
            i1.__[0] !== t2 && (i1.__ = [
                t2,
                i1.__[1]
            ], i1.__c.setState({}));
        }
    ], i1.__c = u), i1.__;
}
function _(r3, o3) {
    var i2 = p(t++, 3);
    !(0, _preact.options).__s && w(i2.__H, o3) && (i2.__ = r3, i2.u = o3, u.__H.__h.push(i2));
}
function h(r4, o4) {
    var i3 = p(t++, 4);
    !(0, _preact.options).__s && w(i3.__H, o4) && (i3.__ = r4, i3.u = o4, u.__h.push(i3));
}
function s(n) {
    return i = 5, F(function() {
        return {
            current: n
        };
    }, []);
}
function A(n, t3, u1) {
    i = 6, h(function() {
        return "function" == typeof n ? (n(t3()), function() {
            return n(null);
        }) : n ? (n.current = t3(), function() {
            return n.current = null;
        }) : void 0;
    }, null == u1 ? u1 : u1.concat(n));
}
function F(n, u2) {
    var r5 = p(t++, 7);
    return w(r5.__H, u2) ? (r5.__V = n(), r5.u = u2, r5.__h = n, r5.__V) : r5.__;
}
function T(n, t4) {
    return i = 8, F(function() {
        return n;
    }, t4);
}
function q(n) {
    var r6 = u.context[n.__c], o5 = p(t++, 9);
    return o5.c = n, r6 ? (null == o5.__ && (o5.__ = !0, r6.sub(u)), r6.props.value) : n.__;
}
function x(t5, u3) {
    (0, _preact.options).useDebugValue && (0, _preact.options).useDebugValue(u3 ? u3(t5) : t5);
}
function V(n2) {
    var r7 = p(t++, 10), o6 = y();
    return r7.__ = n2, u.componentDidCatch || (u.componentDidCatch = function(n) {
        r7.__ && r7.__(n), o6[1](n);
    }), [
        o6[0],
        function() {
            o6[1](void 0);
        }
    ];
}
function b() {
    for(var t6; t6 = c.shift();)if (t6.__P) try {
        t6.__H.__h.forEach(j), t6.__H.__h.forEach(k), t6.__H.__h = [];
    } catch (u4) {
        t6.__H.__h = [], (0, _preact.options).__e(u4, t6.__v);
    }
}
(0, _preact.options).__b = function(n) {
    u = null, e && e(n);
}, (0, _preact.options).__r = function(n3) {
    a && a(n3), t = 0;
    var o7 = (u = n3.__c).__H;
    o7 && (r === u ? (o7.__h = [], u.__h = [], o7.__.forEach(function(n) {
        n.__V = f, n.u = void 0;
    })) : (o7.__h.forEach(j), o7.__h.forEach(k), o7.__h = [])), r = u;
}, (0, _preact.options).diffed = function(t7) {
    v && v(t7);
    var i4 = t7.__c;
    i4 && i4.__H && (i4.__H.__h.length && (1 !== c.push(i4) && o === (0, _preact.options).requestAnimationFrame || ((o = (0, _preact.options).requestAnimationFrame) || function(n) {
        var t8, u5 = function() {
            clearTimeout(r8), g && cancelAnimationFrame(t8), setTimeout(n);
        }, r8 = setTimeout(u5, 100);
        g && (t8 = requestAnimationFrame(u5));
    })(b)), i4.__H.__.forEach(function(n) {
        n.u && (n.__H = n.u), n.__V !== f && (n.__ = n.__V), n.u = void 0, n.__V = f;
    })), r = u = null;
}, (0, _preact.options).__c = function(t9, u6) {
    u6.some(function(t10) {
        try {
            t10.__h.forEach(j), t10.__h = t10.__h.filter(function(n) {
                return !n.__ || k(n);
            });
        } catch (r9) {
            u6.some(function(n) {
                n.__h && (n.__h = []);
            }), u6 = [], (0, _preact.options).__e(r9, t10.__v);
        }
    }), l && l(t9, u6);
}, (0, _preact.options).unmount = function(t11) {
    m && m(t11);
    var u7, r10 = t11.__c;
    r10 && r10.__H && (r10.__H.__.forEach(function(n) {
        try {
            j(n);
        } catch (n4) {
            u7 = n4;
        }
    }), u7 && (0, _preact.options).__e(u7, r10.__v));
};
var g = "function" == typeof requestAnimationFrame;
function j(n) {
    var t12 = u, r11 = n.__c;
    "function" == typeof r11 && (n.__c = void 0, r11()), u = t12;
}
function k(n) {
    var t13 = u;
    n.__c = n.__(), u = t13;
}
function w(n, t14) {
    return !n || n.length !== t14.length || t14.some(function(t15, u8) {
        return t15 !== n[u8];
    });
}
function z(n, t16) {
    return "function" == typeof t16 ? t16(n) : t16;
}

},{"preact":"jJoga","@parcel/transformer-js/src/esmodule-helpers.js":"8ISrk"}],"7P7dO":[function(require,module,exports) {
"use strict";
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Popover = exports.usePopover = exports.ArrowContainer = exports.useArrowContainer = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var PopoverPortal_1 = require("./PopoverPortal");
var util_1 = require("./util");
var usePopover_1 = require("./usePopover");
Object.defineProperty(exports, "usePopover", {
    enumerable: true,
    get: function() {
        return usePopover_1.usePopover;
    }
});
var useMemoizedArray_1 = require("./useMemoizedArray");
var useArrowContainer_1 = require("./useArrowContainer");
Object.defineProperty(exports, "useArrowContainer", {
    enumerable: true,
    get: function() {
        return useArrowContainer_1.useArrowContainer;
    }
});
var ArrowContainer_1 = require("./ArrowContainer");
Object.defineProperty(exports, "ArrowContainer", {
    enumerable: true,
    get: function() {
        return ArrowContainer_1.ArrowContainer;
    }
});
var PopoverInternal = react_1.forwardRef(function(_a1, externalRef) {
    var isOpen = _a1.isOpen, children = _a1.children, content = _a1.content, _b1 = _a1.positions, externalPositions = _b1 === void 0 ? util_1.Constants.DEFAULT_POSITIONS : _b1, _c = _a1.align, align = _c === void 0 ? util_1.Constants.DEFAULT_ALIGN : _c, _d = _a1.padding, padding = _d === void 0 ? 0 : _d, _e = _a1.reposition, reposition = _e === void 0 ? true : _e, _f = _a1.parentElement, parentElement = _f === void 0 ? window.document.body : _f, _g = _a1.boundaryElement, boundaryElement = _g === void 0 ? parentElement : _g, _h = _a1.containerClassName, containerClassName = _h === void 0 ? "react-tiny-popover-container" : _h, containerStyle = _a1.containerStyle, contentLocation = _a1.contentLocation, _j = _a1.boundaryInset, boundaryInset = _j === void 0 ? 0 : _j, onClickOutside = _a1.onClickOutside;
    var positions = useMemoizedArray_1.useMemoizedArray(externalPositions);
    // TODO: factor prevs out into a custom prevs hook
    var prevIsOpen = react_1.useRef(false);
    var prevPositions = react_1.useRef();
    var prevContentLocation = react_1.useRef();
    var prevReposition = react_1.useRef(reposition);
    var childRef = react_1.useRef();
    var _k = react_1.useState({
        align: align,
        nudgedLeft: 0,
        nudgedTop: 0,
        position: positions[0],
        padding: padding,
        childRect: util_1.Constants.EMPTY_CLIENT_RECT,
        popoverRect: util_1.Constants.EMPTY_CLIENT_RECT,
        parentRect: util_1.Constants.EMPTY_CLIENT_RECT,
        boundaryRect: util_1.Constants.EMPTY_CLIENT_RECT,
        boundaryInset: boundaryInset,
        violations: util_1.Constants.EMPTY_CLIENT_RECT,
        hasViolations: false
    }), popoverState1 = _k[0], setPopoverState = _k[1];
    var onPositionPopover = react_1.useCallback(function(popoverState) {
        return setPopoverState(popoverState);
    }, []);
    var _l = usePopover_1.usePopover({
        isOpen: isOpen,
        childRef: childRef,
        containerClassName: containerClassName,
        parentElement: parentElement,
        boundaryElement: boundaryElement,
        contentLocation: contentLocation,
        positions: positions,
        align: align,
        padding: padding,
        boundaryInset: boundaryInset,
        reposition: reposition,
        onPositionPopover: onPositionPopover
    }), positionPopover = _l.positionPopover, popoverRef = _l.popoverRef, scoutRef = _l.scoutRef;
    react_1.useLayoutEffect(function() {
        var shouldUpdate = true;
        var updatePopover = function() {
            var _a, _b;
            if (isOpen && shouldUpdate) {
                var childRect = (_a = childRef === null || childRef === void 0 ? void 0 : childRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
                var popoverRect = (_b = popoverRef === null || popoverRef === void 0 ? void 0 : popoverRef.current) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect();
                if (childRect != null && popoverRect != null && (!util_1.rectsAreEqual(childRect, {
                    top: popoverState1.childRect.top,
                    left: popoverState1.childRect.left,
                    width: popoverState1.childRect.width,
                    height: popoverState1.childRect.height,
                    bottom: popoverState1.childRect.top + popoverState1.childRect.height,
                    right: popoverState1.childRect.left + popoverState1.childRect.width
                }) || popoverRect.width !== popoverState1.popoverRect.width || popoverRect.height !== popoverState1.popoverRect.height || popoverState1.padding !== padding || popoverState1.align !== align || positions !== prevPositions.current || contentLocation !== prevContentLocation.current || reposition !== prevReposition.current)) positionPopover();
                // TODO: factor prev checks out into the custom prevs hook
                if (positions !== prevPositions.current) prevPositions.current = positions;
                if (contentLocation !== prevContentLocation.current) prevContentLocation.current = contentLocation;
                if (reposition !== prevReposition.current) prevReposition.current = reposition;
                if (shouldUpdate) window.requestAnimationFrame(updatePopover);
            }
            prevIsOpen.current = isOpen;
        };
        window.requestAnimationFrame(updatePopover);
        return function() {
            shouldUpdate = false;
        };
    }, [
        align,
        contentLocation,
        isOpen,
        padding,
        popoverRef,
        popoverState1.align,
        popoverState1.childRect.height,
        popoverState1.childRect.left,
        popoverState1.childRect.top,
        popoverState1.childRect.width,
        popoverState1.padding,
        popoverState1.popoverRect.height,
        popoverState1.popoverRect.width,
        positionPopover,
        positions,
        reposition, 
    ]);
    react_1.useEffect(function() {
        var popoverElement = popoverRef.current;
        Object.assign(popoverElement.style, containerStyle);
        return function() {
            Object.keys(containerStyle !== null && containerStyle !== void 0 ? containerStyle : {}).forEach(function(key) {
                return delete popoverElement.style[key];
            });
        };
    }, [
        containerStyle,
        isOpen,
        popoverRef
    ]);
    var handleOnClickOutside = react_1.useCallback(function(e) {
        var _a, _b;
        if (isOpen && !((_a = popoverRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.target)) && !((_b = childRef.current) === null || _b === void 0 ? void 0 : _b.contains(e.target))) onClickOutside === null || onClickOutside === void 0 || onClickOutside(e);
    }, [
        isOpen,
        onClickOutside,
        popoverRef
    ]);
    var handleWindowResize = react_1.useCallback(function() {
        if (childRef.current) window.requestAnimationFrame(function() {
            return positionPopover();
        });
    }, [
        positionPopover
    ]);
    react_1.useEffect(function() {
        window.addEventListener("click", handleOnClickOutside, true);
        window.addEventListener("resize", handleWindowResize);
        return function() {
            window.removeEventListener("click", handleOnClickOutside, true);
            window.removeEventListener("resize", handleWindowResize);
        };
    }, [
        handleOnClickOutside,
        handleWindowResize
    ]);
    var handleRef = react_1.useCallback(function(node) {
        childRef.current = node;
        if (externalRef != null) {
            if (typeof externalRef === "object") externalRef.current = node;
            else if (typeof externalRef === "function") externalRef(node);
        }
    }, [
        externalRef
    ]);
    var renderChild = function() {
        return react_1.cloneElement(children, {
            ref: handleRef
        });
    };
    var renderPopover = function() {
        if (!isOpen) return null;
        return jsx_runtime_1.jsx(PopoverPortal_1.PopoverPortal, __assign({
            element: popoverRef.current,
            scoutElement: scoutRef.current,
            container: parentElement
        }, {
            children: typeof content === "function" ? content(popoverState1) : content
        }), void 0);
    };
    return jsx_runtime_1.jsxs(jsx_runtime_1.Fragment, {
        children: [
            renderChild(),
            renderPopover()
        ]
    }, void 0);
});
exports.Popover = react_1.forwardRef(function(props, ref) {
    if (typeof window === "undefined") return props.children;
    return jsx_runtime_1.jsx(PopoverInternal, __assign({}, props, {
        ref: ref
    }), void 0);
});

},{"react/jsx-runtime":"JwlMc","react":"iuBF6","./PopoverPortal":"fcEY5","./util":"4rzDh","./usePopover":"7xAZR","./useMemoizedArray":"6OnEz","./useArrowContainer":"g1Z4H","./ArrowContainer":"4HzYX"}],"JwlMc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Fragment", ()=>(0, _preact.Fragment));
parcelHelpers.export(exports, "jsx", ()=>e);
parcelHelpers.export(exports, "jsxs", ()=>e);
parcelHelpers.export(exports, "jsxDEV", ()=>e);
var _preact = require("preact");
var o = 0;
function e(_, e1, n, t, f) {
    var l, s, u = {};
    for(s in e1)"ref" == s ? l = e1[s] : u[s] = e1[s];
    var a = {
        type: _,
        props: u,
        key: n,
        ref: l,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: --o,
        __source: f,
        __self: t
    };
    if ("function" == typeof _ && (l = _.defaultProps)) for(s in l)void 0 === u[s] && (u[s] = l[s]);
    return (0, _preact.options).vnode && (0, _preact.options).vnode(a), a;
}

},{"preact":"jJoga","@parcel/transformer-js/src/esmodule-helpers.js":"8ISrk"}],"iuBF6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createElement", ()=>(0, _preact.createElement));
parcelHelpers.export(exports, "createContext", ()=>(0, _preact.createContext));
parcelHelpers.export(exports, "createRef", ()=>(0, _preact.createRef));
parcelHelpers.export(exports, "Fragment", ()=>(0, _preact.Fragment));
parcelHelpers.export(exports, "Component", ()=>(0, _preact.Component));
parcelHelpers.export(exports, "startTransition", ()=>an);
parcelHelpers.export(exports, "useDeferredValue", ()=>sn);
parcelHelpers.export(exports, "useTransition", ()=>hn);
parcelHelpers.export(exports, "useInsertionEffect", ()=>vn);
parcelHelpers.export(exports, "useSyncExternalStore", ()=>dn);
parcelHelpers.export(exports, "version", ()=>nn);
parcelHelpers.export(exports, "Children", ()=>k);
parcelHelpers.export(exports, "render", ()=>z);
parcelHelpers.export(exports, "hydrate", ()=>B);
parcelHelpers.export(exports, "unmountComponentAtNode", ()=>un);
parcelHelpers.export(exports, "createPortal", ()=>V);
parcelHelpers.export(exports, "createFactory", ()=>tn);
parcelHelpers.export(exports, "cloneElement", ()=>rn);
parcelHelpers.export(exports, "isValidElement", ()=>en);
parcelHelpers.export(exports, "findDOMNode", ()=>on);
parcelHelpers.export(exports, "PureComponent", ()=>E);
parcelHelpers.export(exports, "memo", ()=>g);
parcelHelpers.export(exports, "forwardRef", ()=>R);
parcelHelpers.export(exports, "flushSync", ()=>fn);
parcelHelpers.export(exports, "unstable_batchedUpdates", ()=>ln);
parcelHelpers.export(exports, "StrictMode", ()=>cn);
parcelHelpers.export(exports, "Suspense", ()=>T);
parcelHelpers.export(exports, "SuspenseList", ()=>D);
parcelHelpers.export(exports, "lazy", ()=>U);
parcelHelpers.export(exports, "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", ()=>X);
var _hooks = require("preact/hooks");
var _preact = require("preact");
parcelHelpers.exportAll(_hooks, exports);
function S(n, t) {
    for(var e in t)n[e] = t[e];
    return n;
}
function C(n, t) {
    for(var e in n)if ("__source" !== e && !(e in t)) return !0;
    for(var r in t)if ("__source" !== r && n[r] !== t[r]) return !0;
    return !1;
}
function E(n) {
    this.props = n;
}
function g(n1, t1) {
    function e1(n) {
        var e = this.props.ref, r = e == n.ref;
        return !r && e && (e.call ? e(null) : e.current = null), t1 ? !t1(this.props, n) || !r : C(this.props, n);
    }
    function r1(t) {
        return this.shouldComponentUpdate = e1, (0, _preact.createElement)(n1, t);
    }
    return r1.displayName = "Memo(" + (n1.displayName || n1.name) + ")", r1.prototype.isReactComponent = !0, r1.__f = !0, r1;
}
(E.prototype = new (0, _preact.Component)).isPureReactComponent = !0, E.prototype.shouldComponentUpdate = function(n, t) {
    return C(this.props, n) || C(this.state, t);
};
var w = (0, _preact.options).__b;
(0, _preact.options).__b = function(n) {
    n.type && n.type.__f && n.ref && (n.props.ref = n.ref, n.ref = null), w && w(n);
};
var x = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.forward_ref") || 3911;
function R(n) {
    function t2(t) {
        var e = S({}, t);
        return delete e.ref, n(e, t.ref || null);
    }
    return t2.$$typeof = x, t2.render = t2, t2.prototype.isReactComponent = t2.__f = !0, t2.displayName = "ForwardRef(" + (n.displayName || n.name) + ")", t2;
}
var N = function(n, t) {
    return null == n ? null : (0, _preact.toChildArray)((0, _preact.toChildArray)(n).map(t));
}, k = {
    map: N,
    forEach: N,
    count: function(n) {
        return n ? (0, _preact.toChildArray)(n).length : 0;
    },
    only: function(n) {
        var t = (0, _preact.toChildArray)(n);
        if (1 !== t.length) throw "Children.only";
        return t[0];
    },
    toArray: (0, _preact.toChildArray)
}, A = (0, _preact.options).__e;
(0, _preact.options).__e = function(n, t, e, r) {
    if (n.then) {
        for(var u, o = t; o = o.__;)if ((u = o.__c) && u.__c) return null == t.__e && (t.__e = e.__e, t.__k = e.__k), u.__c(n, t);
    }
    A(n, t, e, r);
};
var O = (0, _preact.options).unmount;
function T() {
    this.__u = 0, this.t = null, this.__b = null;
}
function L(n) {
    var t = n.__.__c;
    return t && t.__a && t.__a(n);
}
function U(n2) {
    var t, e, r;
    function u1(u) {
        if (t || (t = n2()).then(function(n) {
            e = n.default || n;
        }, function(n) {
            r = n;
        }), r) throw r;
        if (!e) throw t;
        return (0, _preact.createElement)(e, u);
    }
    return u1.displayName = "Lazy", u1.__f = !0, u1;
}
function D() {
    this.u = null, this.o = null;
}
(0, _preact.options).unmount = function(n) {
    var t = n.__c;
    t && t.__R && t.__R(), t && !0 === n.__h && (n.type = null), O && O(n);
}, (T.prototype = new (0, _preact.Component)).__c = function(n3, t3) {
    var e2 = t3.__c, r2 = this;
    null == r2.t && (r2.t = []), r2.t.push(e2);
    var u = L(r2.__v), o = !1, i = function() {
        o || (o = !0, e2.__R = null, u ? u(l) : l());
    };
    e2.__R = i;
    var l = function() {
        if (!--r2.__u) {
            if (r2.state.__a) {
                var n4 = r2.state.__a;
                r2.__v.__k[0] = function n(t6, e, r) {
                    return t6 && (t6.__v = null, t6.__k = t6.__k && t6.__k.map(function(t) {
                        return n(t, e, r);
                    }), t6.__c && t6.__c.__P === e && (t6.__e && r.insertBefore(t6.__e, t6.__d), t6.__c.__e = !0, t6.__c.__P = r)), t6;
                }(n4, n4.__c.__P, n4.__c.__O);
            }
            var t4;
            for(r2.setState({
                __a: r2.__b = null
            }); t4 = r2.t.pop();)t4.forceUpdate();
        }
    }, f = !0 === t3.__h;
    (r2.__u++) || f || r2.setState({
        __a: r2.__b = r2.__v.__k[0]
    }), n3.then(i, i);
}, T.prototype.componentWillUnmount = function() {
    this.t = [];
}, T.prototype.render = function(n7, t7) {
    if (this.__b) {
        if (this.__v.__k) {
            var e3 = document.createElement("div"), r3 = this.__v.__k[0].__c;
            this.__v.__k[0] = function n8(t8, e, r) {
                return t8 && (t8.__c && t8.__c.__H && (t8.__c.__H.__.forEach(function(n) {
                    "function" == typeof n.__c && n.__c();
                }), t8.__c.__H = null), null != (t8 = S({}, t8)).__c && (t8.__c.__P === r && (t8.__c.__P = e), t8.__c = null), t8.__k = t8.__k && t8.__k.map(function(t) {
                    return n8(t, e, r);
                })), t8;
            }(this.__b, e3, r3.__O = r3.__P);
        }
        this.__b = null;
    }
    var u = t7.__a && (0, _preact.createElement)((0, _preact.Fragment), null, n7.fallback);
    return u && (u.__h = null), [
        (0, _preact.createElement)((0, _preact.Fragment), null, t7.__a ? null : n7.children),
        u
    ];
};
var F = function(n, t, e) {
    if (++e[1] === e[0] && n.o.delete(t), n.props.revealOrder && ("t" !== n.props.revealOrder[0] || !n.o.size)) for(e = n.u; e;){
        for(; e.length > 3;)e.pop()();
        if (e[1] < e[0]) break;
        n.u = e = e[2];
    }
};
function I(n) {
    return this.getChildContext = function() {
        return n.context;
    }, n.children;
}
function M(n9) {
    var t = this, e = n9.i;
    t.componentWillUnmount = function() {
        (0, _preact.render)(null, t.l), t.l = null, t.i = null;
    }, t.i && t.i !== e && t.componentWillUnmount(), n9.__v ? (t.l || (t.i = e, t.l = {
        nodeType: 1,
        parentNode: e,
        childNodes: [],
        appendChild: function(n) {
            this.childNodes.push(n), t.i.appendChild(n);
        },
        insertBefore: function(n, e) {
            this.childNodes.push(n), t.i.appendChild(n);
        },
        removeChild: function(n) {
            this.childNodes.splice(this.childNodes.indexOf(n) >>> 1, 1), t.i.removeChild(n);
        }
    }), (0, _preact.render)((0, _preact.createElement)(I, {
        context: t.context
    }, n9.__v), t.l)) : t.l && t.componentWillUnmount();
}
function V(n, t) {
    var e = (0, _preact.createElement)(M, {
        __v: n,
        i: t
    });
    return e.containerInfo = t, e;
}
(D.prototype = new (0, _preact.Component)).__a = function(n) {
    var t = this, e = L(t.__v), r = t.o.get(n);
    return r[0]++, function(u) {
        var o = function() {
            t.props.revealOrder ? (r.push(u), F(t, n, r)) : u();
        };
        e ? e(o) : o();
    };
}, D.prototype.render = function(n) {
    this.u = null, this.o = new Map;
    var t = (0, _preact.toChildArray)(n.children);
    n.revealOrder && "b" === n.revealOrder[0] && t.reverse();
    for(var e = t.length; e--;)this.o.set(t[e], this.u = [
        1,
        0,
        this.u
    ]);
    return n.children;
}, D.prototype.componentDidUpdate = D.prototype.componentDidMount = function() {
    var n = this;
    this.o.forEach(function(t, e) {
        F(n, e, t);
    });
};
var W = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103, P = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|shape|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/, $ = "undefined" != typeof document, j = function(n) {
    return ("undefined" != typeof Symbol && "symbol" == typeof Symbol() ? /fil|che|rad/i : /fil|che|ra/i).test(n);
};
function z(n, t, e) {
    return null == t.__k && (t.textContent = ""), (0, _preact.render)(n, t), "function" == typeof e && e(), n ? n.__c : null;
}
function B(n, t, e) {
    return (0, _preact.hydrate)(n, t), "function" == typeof e && e(), n ? n.__c : null;
}
(0, _preact.Component).prototype.isReactComponent = {}, [
    "componentWillMount",
    "componentWillReceiveProps",
    "componentWillUpdate"
].forEach(function(n) {
    Object.defineProperty((0, _preact.Component).prototype, n, {
        configurable: !0,
        get: function() {
            return this["UNSAFE_" + n];
        },
        set: function(t) {
            Object.defineProperty(this, n, {
                configurable: !0,
                writable: !0,
                value: t
            });
        }
    });
});
var H = (0, _preact.options).event;
function Z() {}
function Y() {
    return this.cancelBubble;
}
function q() {
    return this.defaultPrevented;
}
(0, _preact.options).event = function(n) {
    return H && (n = H(n)), n.persist = Z, n.isPropagationStopped = Y, n.isDefaultPrevented = q, n.nativeEvent = n;
};
var G, J = {
    configurable: !0,
    get: function() {
        return this.class;
    }
}, K = (0, _preact.options).vnode;
(0, _preact.options).vnode = function(n10) {
    var t = n10.type, e = n10.props, r = e;
    if ("string" == typeof t) {
        var u = -1 === t.indexOf("-");
        for(var o in r = {}, e){
            var i = e[o];
            $ && "children" === o && "noscript" === t || "value" === o && "defaultValue" in e && null == i || ("defaultValue" === o && "value" in e && null == e.value ? o = "value" : "download" === o && !0 === i ? i = "" : /ondoubleclick/i.test(o) ? o = "ondblclick" : /^onchange(textarea|input)/i.test(o + t) && !j(e.type) ? o = "oninput" : /^onfocus$/i.test(o) ? o = "onfocusin" : /^onblur$/i.test(o) ? o = "onfocusout" : /^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(o) ? o = o.toLowerCase() : u && P.test(o) ? o = o.replace(/[A-Z0-9]/, "-$&").toLowerCase() : null === i && (i = void 0), /^oninput$/i.test(o) && (o = o.toLowerCase(), r[o] && (o = "oninputCapture")), r[o] = i);
        }
        "select" == t && r.multiple && Array.isArray(r.value) && (r.value = (0, _preact.toChildArray)(e.children).forEach(function(n) {
            n.props.selected = -1 != r.value.indexOf(n.props.value);
        })), "select" == t && null != r.defaultValue && (r.value = (0, _preact.toChildArray)(e.children).forEach(function(n) {
            n.props.selected = r.multiple ? -1 != r.defaultValue.indexOf(n.props.value) : r.defaultValue == n.props.value;
        })), n10.props = r, e.class != e.className && (J.enumerable = "className" in e, null != e.className && (r.class = e.className), Object.defineProperty(r, "className", J));
    }
    n10.$$typeof = W, K && K(n10);
};
var Q = (0, _preact.options).__r;
(0, _preact.options).__r = function(n) {
    Q && Q(n), G = n.__c;
};
var X = {
    ReactCurrentDispatcher: {
        current: {
            readContext: function(n) {
                return G.__n[n.__c].props.value;
            }
        }
    }
}, nn = "17.0.2";
function tn(n) {
    return (0, _preact.createElement).bind(null, n);
}
function en(n) {
    return !!n && n.$$typeof === W;
}
function rn(n) {
    return en(n) ? (0, _preact.cloneElement).apply(null, arguments) : n;
}
function un(n) {
    return !!n.__k && ((0, _preact.render)(null, n), !0);
}
function on(n) {
    return n && (n.base || 1 === n.nodeType && n) || null;
}
var ln = function(n, t) {
    return n(t);
}, fn = function(n, t) {
    return n(t);
}, cn = (0, _preact.Fragment);
function an(n) {
    n();
}
function sn(n) {
    return n;
}
function hn() {
    return [
        !1,
        an
    ];
}
var vn = (0, _hooks.useLayoutEffect);
function dn(t, r) {
    var u = (0, _hooks.useState)(r), o = u[0], i = u[1];
    return (0, _hooks.useEffect)(function() {
        return t(function() {
            i(r());
        });
    }, [
        t,
        r
    ]), o;
}
exports.default = {
    useState: (0, _hooks.useState),
    useReducer: (0, _hooks.useReducer),
    useEffect: (0, _hooks.useEffect),
    useLayoutEffect: (0, _hooks.useLayoutEffect),
    useInsertionEffect: (0, _hooks.useLayoutEffect),
    useTransition: hn,
    useDeferredValue: sn,
    useSyncExternalStore: dn,
    startTransition: an,
    useRef: (0, _hooks.useRef),
    useImperativeHandle: (0, _hooks.useImperativeHandle),
    useMemo: (0, _hooks.useMemo),
    useCallback: (0, _hooks.useCallback),
    useContext: (0, _hooks.useContext),
    useDebugValue: (0, _hooks.useDebugValue),
    version: "17.0.2",
    Children: k,
    render: z,
    hydrate: B,
    unmountComponentAtNode: un,
    createPortal: V,
    createElement: (0, _preact.createElement),
    createContext: (0, _preact.createContext),
    createFactory: tn,
    cloneElement: rn,
    createRef: (0, _preact.createRef),
    Fragment: (0, _preact.Fragment),
    isValidElement: en,
    findDOMNode: on,
    Component: (0, _preact.Component),
    PureComponent: E,
    memo: g,
    forwardRef: R,
    flushSync: fn,
    unstable_batchedUpdates: ln,
    StrictMode: (0, _preact.Fragment),
    Suspense: T,
    SuspenseList: D,
    lazy: U,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: X
};

},{"preact/hooks":"hnjkk","preact":"jJoga","@parcel/transformer-js/src/esmodule-helpers.js":"8ISrk"}],"fcEY5":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PopoverPortal = void 0;
var react_1 = require("react");
var react_dom_1 = require("react-dom");
var PopoverPortal = function(_a) {
    var container = _a.container, element = _a.element, scoutElement = _a.scoutElement, children = _a.children;
    react_1.useLayoutEffect(function() {
        container.appendChild(element);
        container.appendChild(scoutElement);
        return function() {
            container.removeChild(element);
            container.removeChild(scoutElement);
        };
    }, [
        container,
        element
    ]);
    return react_dom_1.createPortal(children, element);
};
exports.PopoverPortal = PopoverPortal;

},{"react":"iuBF6","react-dom":"iuBF6"}],"4rzDh":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getNudgedPopoverRect = exports.getNewPopoverRect = exports.popoverRectForPosition = exports.createContainer = exports.rectsAreEqual = exports.Constants = void 0;
exports.Constants = {
    DEFAULT_ALIGN: "center",
    DEFAULT_POSITIONS: [
        "top",
        "left",
        "right",
        "bottom"
    ],
    EMPTY_CLIENT_RECT: {
        top: 0,
        left: 0,
        bottom: 0,
        height: 0,
        right: 0,
        width: 0
    }
};
var rectsAreEqual = function(rectA, rectB) {
    return rectA === rectB || (rectA === null || rectA === void 0 ? void 0 : rectA.bottom) === (rectB === null || rectB === void 0 ? void 0 : rectB.bottom) && (rectA === null || rectA === void 0 ? void 0 : rectA.height) === (rectB === null || rectB === void 0 ? void 0 : rectB.height) && (rectA === null || rectA === void 0 ? void 0 : rectA.left) === (rectB === null || rectB === void 0 ? void 0 : rectB.left) && (rectA === null || rectA === void 0 ? void 0 : rectA.right) === (rectB === null || rectB === void 0 ? void 0 : rectB.right) && (rectA === null || rectA === void 0 ? void 0 : rectA.top) === (rectB === null || rectB === void 0 ? void 0 : rectB.top) && (rectA === null || rectA === void 0 ? void 0 : rectA.width) === (rectB === null || rectB === void 0 ? void 0 : rectB.width);
};
exports.rectsAreEqual = rectsAreEqual;
var createContainer = function(containerStyle, containerClassName) {
    var container = window.document.createElement("div");
    if (containerClassName) container.className = containerClassName;
    Object.assign(container.style, containerStyle);
    return container;
};
exports.createContainer = createContainer;
var popoverRectForPosition = function(position, childRect, popoverRect, padding, align) {
    var targetMidX = childRect.left + childRect.width / 2;
    var targetMidY = childRect.top + childRect.height / 2;
    var width = popoverRect.width, height = popoverRect.height;
    var top;
    var left;
    switch(position){
        case "left":
            top = targetMidY - height / 2;
            left = childRect.left - padding - width;
            if (align === "start") top = childRect.top;
            if (align === "end") top = childRect.bottom - height;
            break;
        case "bottom":
            top = childRect.bottom + padding;
            left = targetMidX - width / 2;
            if (align === "start") left = childRect.left;
            if (align === "end") left = childRect.right - width;
            break;
        case "right":
            top = targetMidY - height / 2;
            left = childRect.right + padding;
            if (align === "start") top = childRect.top;
            if (align === "end") top = childRect.bottom - height;
            break;
        default:
            top = childRect.top - height - padding;
            left = targetMidX - width / 2;
            if (align === "start") left = childRect.left;
            if (align === "end") left = childRect.right - width;
            break;
    }
    return {
        top: top,
        left: left,
        width: width,
        height: height,
        right: left + width,
        bottom: top + height
    };
};
exports.popoverRectForPosition = popoverRectForPosition;
var getNewPopoverRect = function(_a, boundaryInset) {
    var position = _a.position, align = _a.align, childRect = _a.childRect, popoverRect = _a.popoverRect, boundaryRect = _a.boundaryRect, padding = _a.padding, reposition = _a.reposition;
    var rect = exports.popoverRectForPosition(position, childRect, popoverRect, padding, align);
    var boundaryViolation = reposition && (position === "top" && rect.top < boundaryRect.top + boundaryInset || position === "left" && rect.left < boundaryRect.left + boundaryInset || position === "right" && rect.right > boundaryRect.right - boundaryInset || position === "bottom" && rect.bottom > boundaryRect.bottom - boundaryInset);
    return {
        rect: rect,
        boundaryViolation: boundaryViolation
    };
};
exports.getNewPopoverRect = getNewPopoverRect;
var getNudgedPopoverRect = function(popoverRect, boundaryRect, boundaryInset) {
    var topBoundary = boundaryRect.top + boundaryInset;
    var leftBoundary = boundaryRect.left + boundaryInset;
    var rightBoundary = boundaryRect.right - boundaryInset;
    var bottomBoundary = boundaryRect.bottom - boundaryInset;
    var top = popoverRect.top < topBoundary ? topBoundary : popoverRect.top;
    top = top + popoverRect.height > bottomBoundary ? bottomBoundary - popoverRect.height : top;
    var left = popoverRect.left < leftBoundary ? leftBoundary : popoverRect.left;
    left = left + popoverRect.width > rightBoundary ? rightBoundary - popoverRect.width : left;
    return {
        top: top,
        left: left,
        width: popoverRect.width,
        height: popoverRect.height,
        right: left + popoverRect.width,
        bottom: top + popoverRect.height
    };
};
exports.getNudgedPopoverRect = getNudgedPopoverRect;

},{}],"7xAZR":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.usePopover = void 0;
var react_1 = require("react");
var util_1 = require("./util");
var useElementRef_1 = require("./useElementRef");
var usePopover = function(_a1) {
    var isOpen = _a1.isOpen, childRef = _a1.childRef, positions = _a1.positions, containerClassName = _a1.containerClassName, parentElement = _a1.parentElement, contentLocation = _a1.contentLocation, align = _a1.align, padding = _a1.padding, reposition = _a1.reposition, boundaryInset = _a1.boundaryInset, boundaryElement = _a1.boundaryElement, onPositionPopover = _a1.onPositionPopover;
    var popoverRef = useElementRef_1.useElementRef(containerClassName, {
        position: "fixed",
        overflow: "visible",
        top: "0px",
        left: "0px"
    });
    var scoutRef = useElementRef_1.useElementRef("react-tiny-popover-scout", {
        position: "fixed",
        top: "0px",
        left: "0px",
        width: "0px",
        height: "0px",
        visibility: "hidden"
    });
    var positionPopover = react_1.useCallback(function(_a) {
        var _b, _c;
        var _d = _a === void 0 ? {} : _a, _e = _d.positionIndex, positionIndex = _e === void 0 ? 0 : _e, _f = _d.parentRect, parentRect = _f === void 0 ? parentElement.getBoundingClientRect() : _f, _g = _d.childRect, childRect = _g === void 0 ? (_b = childRef === null || childRef === void 0 ? void 0 : childRef.current) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect() : _g, _h = _d.scoutRect, scoutRect = _h === void 0 ? (_c = scoutRef === null || scoutRef === void 0 ? void 0 : scoutRef.current) === null || _c === void 0 ? void 0 : _c.getBoundingClientRect() : _h, _j = _d.popoverRect, popoverRect = _j === void 0 ? popoverRef.current.getBoundingClientRect() : _j, _k = _d.boundaryRect, boundaryRect = _k === void 0 ? boundaryElement === parentElement ? parentRect : boundaryElement.getBoundingClientRect() : _k;
        if (!childRect || !parentRect || !isOpen) return;
        if (contentLocation) {
            var _l = typeof contentLocation === "function" ? contentLocation({
                childRect: childRect,
                popoverRect: popoverRect,
                parentRect: parentRect,
                boundaryRect: boundaryRect,
                padding: padding,
                nudgedTop: 0,
                nudgedLeft: 0,
                boundaryInset: boundaryInset,
                violations: util_1.Constants.EMPTY_CLIENT_RECT,
                hasViolations: false
            }) : contentLocation, inputTop = _l.top, inputLeft = _l.left;
            var left_1 = parentRect.left + inputLeft;
            var top_1 = parentRect.top + inputTop;
            popoverRef.current.style.transform = "translate(" + (left_1 - scoutRect.left) + "px, " + (top_1 - scoutRect.top) + "px)";
            onPositionPopover({
                childRect: childRect,
                popoverRect: popoverRect,
                parentRect: parentRect,
                boundaryRect: boundaryRect,
                padding: padding,
                nudgedTop: 0,
                nudgedLeft: 0,
                boundaryInset: boundaryInset,
                violations: util_1.Constants.EMPTY_CLIENT_RECT,
                hasViolations: false
            });
            return;
        }
        var isExhausted = positionIndex === positions.length;
        var position = isExhausted ? positions[0] : positions[positionIndex];
        var _m = util_1.getNewPopoverRect({
            childRect: childRect,
            popoverRect: popoverRect,
            boundaryRect: boundaryRect,
            position: position,
            align: align,
            padding: padding,
            reposition: reposition
        }, boundaryInset), rect = _m.rect, boundaryViolation = _m.boundaryViolation;
        if (boundaryViolation && reposition && !isExhausted) {
            positionPopover({
                positionIndex: positionIndex + 1,
                childRect: childRect,
                popoverRect: popoverRect,
                parentRect: parentRect,
                boundaryRect: boundaryRect
            });
            return;
        }
        var top = rect.top, left = rect.left, width = rect.width, height = rect.height;
        var shouldNudge = reposition && !isExhausted;
        var _o = util_1.getNudgedPopoverRect(rect, boundaryRect, boundaryInset), nudgedLeft = _o.left, nudgedTop = _o.top;
        var finalTop = top;
        var finalLeft = left;
        if (shouldNudge) {
            finalTop = nudgedTop;
            finalLeft = nudgedLeft;
        }
        popoverRef.current.style.transform = "translate(" + (finalLeft - scoutRect.left) + "px, " + (finalTop - scoutRect.top) + "px)";
        var potentialViolations = {
            top: boundaryRect.top + boundaryInset - finalTop,
            left: boundaryRect.left + boundaryInset - finalLeft,
            right: finalLeft + width - boundaryRect.right + boundaryInset,
            bottom: finalTop + height - boundaryRect.bottom + boundaryInset
        };
        onPositionPopover({
            childRect: childRect,
            popoverRect: {
                top: finalTop,
                left: finalLeft,
                width: width,
                height: height,
                right: finalLeft + width,
                bottom: finalTop + height
            },
            parentRect: parentRect,
            boundaryRect: boundaryRect,
            position: position,
            align: align,
            padding: padding,
            nudgedTop: nudgedTop - top,
            nudgedLeft: nudgedLeft - left,
            boundaryInset: boundaryInset,
            violations: {
                top: potentialViolations.top <= 0 ? 0 : potentialViolations.top,
                left: potentialViolations.left <= 0 ? 0 : potentialViolations.left,
                right: potentialViolations.right <= 0 ? 0 : potentialViolations.right,
                bottom: potentialViolations.bottom <= 0 ? 0 : potentialViolations.bottom
            },
            hasViolations: potentialViolations.top > 0 || potentialViolations.left > 0 || potentialViolations.right > 0 || potentialViolations.bottom > 0
        });
    }, [
        parentElement,
        childRef,
        popoverRef,
        boundaryElement,
        contentLocation,
        positions,
        align,
        padding,
        reposition,
        boundaryInset,
        onPositionPopover,
        isOpen, 
    ]);
    return {
        positionPopover: positionPopover,
        popoverRef: popoverRef,
        scoutRef: scoutRef
    };
};
exports.usePopover = usePopover;

},{"react":"iuBF6","./util":"4rzDh","./useElementRef":"8tHUL"}],"8tHUL":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.useElementRef = void 0;
var react_1 = require("react");
var util_1 = require("./util");
var useElementRef = function(containerClassName, containerStyle) {
    var element = react_1.useMemo(function() {
        return util_1.createContainer(containerStyle, containerClassName);
    }, [
        containerClassName,
        containerStyle
    ]);
    return react_1.useRef(element);
};
exports.useElementRef = useElementRef;

},{"react":"iuBF6","./util":"4rzDh"}],"6OnEz":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.useMemoizedArray = void 0;
var react_1 = require("react");
var useMemoizedArray = function(externalArray) {
    var prevArrayRef = react_1.useRef(externalArray);
    var array = react_1.useMemo(function() {
        if (prevArrayRef.current === externalArray) return prevArrayRef.current;
        if (prevArrayRef.current.length !== externalArray.length) {
            prevArrayRef.current = externalArray;
            return externalArray;
        }
        for(var i = 0; i < externalArray.length; i += 1)if (externalArray[i] !== prevArrayRef.current[i]) {
            prevArrayRef.current = externalArray;
            return externalArray;
        }
        return prevArrayRef.current;
    }, [
        externalArray
    ]);
    return array;
};
exports.useMemoizedArray = useMemoizedArray;

},{"react":"iuBF6"}],"g1Z4H":[function(require,module,exports) {
"use strict";
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.useArrowContainer = void 0;
var react_1 = require("react");
var useArrowContainer = function(_a) {
    var childRect = _a.childRect, popoverRect = _a.popoverRect, position = _a.position, arrowSize = _a.arrowSize, arrowColor = _a.arrowColor;
    var arrowContainerStyle = react_1.useMemo(function() {
        return {
            padding: arrowSize
        };
    }, [
        arrowSize
    ]);
    var arrowStyle = react_1.useMemo(function() {
        return __assign({
            position: "absolute"
        }, function() {
            var arrowWidth = arrowSize * 2;
            var top = childRect.top - popoverRect.top + childRect.height / 2 - arrowWidth / 2;
            var left = childRect.left - popoverRect.left + childRect.width / 2 - arrowWidth / 2;
            var lowerBound = arrowSize;
            var leftUpperBound = popoverRect.width - arrowSize;
            var topUpperBound = popoverRect.height - arrowSize;
            left = left < lowerBound ? lowerBound : left;
            left = left + arrowWidth > leftUpperBound ? leftUpperBound - arrowWidth : left;
            top = top < lowerBound ? lowerBound : top;
            top = top + arrowWidth > topUpperBound ? topUpperBound - arrowWidth : top;
            top = Number.isNaN(top) ? 0 : top;
            left = Number.isNaN(left) ? 0 : left;
            switch(position){
                case "right":
                    return {
                        borderTop: arrowSize + "px solid transparent",
                        borderBottom: arrowSize + "px solid transparent",
                        borderRight: arrowSize + "px solid " + arrowColor,
                        left: 0,
                        top: top
                    };
                case "left":
                    return {
                        borderTop: arrowSize + "px solid transparent",
                        borderBottom: arrowSize + "px solid transparent",
                        borderLeft: arrowSize + "px solid " + arrowColor,
                        right: 0,
                        top: top
                    };
                case "bottom":
                    return {
                        borderLeft: arrowSize + "px solid transparent",
                        borderRight: arrowSize + "px solid transparent",
                        borderBottom: arrowSize + "px solid " + arrowColor,
                        top: 0,
                        left: left
                    };
                case "top":
                    return {
                        borderLeft: arrowSize + "px solid transparent",
                        borderRight: arrowSize + "px solid transparent",
                        borderTop: arrowSize + "px solid " + arrowColor,
                        bottom: 0,
                        left: left
                    };
                default:
                    return {
                        display: "hidden"
                    };
            }
        }());
    }, [
        arrowColor,
        arrowSize,
        childRect.height,
        childRect.left,
        childRect.top,
        childRect.width,
        popoverRect.height,
        popoverRect.left,
        popoverRect.top,
        popoverRect.width,
        position, 
    ]);
    return {
        arrowContainerStyle: arrowContainerStyle,
        arrowStyle: arrowStyle
    };
};
exports.useArrowContainer = useArrowContainer;

},{"react":"iuBF6"}],"4HzYX":[function(require,module,exports) {
"use strict";
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ArrowContainer = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var useArrowContainer_1 = require("./useArrowContainer");
var ArrowContainer = function(_a) {
    var childRect = _a.childRect, popoverRect = _a.popoverRect, position = _a.position, arrowColor = _a.arrowColor, arrowSize = _a.arrowSize, arrowClassName = _a.arrowClassName, externalArrowStyle = _a.arrowStyle, className = _a.className, children = _a.children, externalArrowContainerStyle = _a.style;
    var _b = useArrowContainer_1.useArrowContainer({
        childRect: childRect,
        popoverRect: popoverRect,
        position: position,
        arrowColor: arrowColor,
        arrowSize: arrowSize
    }), arrowContainerStyle = _b.arrowContainerStyle, arrowStyle = _b.arrowStyle;
    var mergedContainerStyle = react_1.useMemo(function() {
        return __assign(__assign({}, arrowContainerStyle), externalArrowContainerStyle);
    }, [
        arrowContainerStyle,
        externalArrowContainerStyle
    ]);
    var mergedArrowStyle = react_1.useMemo(function() {
        return __assign(__assign({}, arrowStyle), externalArrowStyle);
    }, [
        arrowStyle,
        externalArrowStyle
    ]);
    return jsx_runtime_1.jsxs("div", __assign({
        className: className,
        style: mergedContainerStyle
    }, {
        children: [
            jsx_runtime_1.jsx("div", {
                style: mergedArrowStyle,
                className: arrowClassName
            }, void 0),
            children
        ]
    }), void 0);
};
exports.ArrowContainer = ArrowContainer;

},{"react/jsx-runtime":"JwlMc","react":"iuBF6","./useArrowContainer":"g1Z4H"}],"l4tW1":[function() {},{}]},["l1KsJ"], "l1KsJ", "parcelRequire94c2")

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBO0FDQUEsYUFBYTtBQUNiLHVEQUFpRDs7QUFDakQsK0JBQWtDO0FBQ2xDLHFDQUFpQzs7QSxJLFMsRyxhLFUsUyxJLFMsTyxFLFUsRSxDLEUsUyxFO0ksUyxLLEMsSyxFO1EsTyxLLFksQyxHLEssRyxJLEMsQyxTLE8sRTtZLE8sQyxLLEMsQztTLEMsQztLO0ksTyxJLEMsQyxJLEMsQyxHLE8sQyxBLEMsQyxTLE8sRSxNLEU7USxTLFMsQyxLLEU7WSxJO2dCLEksQyxTLEMsSSxDLEssQyxDLEM7YSxDLE8sQyxFO2dCLE0sQyxDLEMsQzthO1M7USxTLFEsQyxLLEU7WSxJO2dCLEksQyxTLEMsTyxDLEMsSyxDLEMsQzthLEMsTyxDLEU7Z0IsTSxDLEMsQyxDO2E7UztRLFMsSSxDLE0sRTtZLE0sQyxJLEcsTyxDLE0sQyxLLEMsRyxLLEMsTSxDLEssQyxDLEksQyxTLEUsUSxDLEM7UztRLEksQyxBLEMsUyxHLFMsQyxLLEMsTyxFLFUsSSxFLEMsQyxDLEksRSxDLEM7SyxDLEM7QyxBO0EsSSxXLEcsYSxVLFcsSSxTLE8sRSxJLEU7SSxJLEMsRztRLEssRSxDO1EsSSxFLFc7WSxJLEMsQyxDLEMsRyxDLEUsTSxDLEMsQyxDLEM7WSxPLEMsQyxDLEMsQztTO1EsSSxFLEU7USxHLEUsRTtLLEUsQyxFLEMsRSxDLEUsQyxBO0ksTyxDLEc7USxJLEUsSSxDLEMsQztRLE8sRSxJLEMsQyxDO1EsUSxFLEksQyxDLEM7SyxFLE8sTSxLLFUsSSxDLEMsQyxNLEMsUSxDLEcsVztRLE8sSSxDO0ssQyxBLEUsQyxDO0ksUyxJLEMsQyxFO1EsTyxTLEMsRTtZLE8sSSxDO2dCLEM7Z0IsQzthLEMsQztTLEM7SztJLFMsSSxDLEUsRTtRLEksQyxFLE0sSSxTLEMsaUMsQyxDO1EsTSxDLEMsSTtZLEksQyxHLEMsRSxDLEksQyxDLEcsRSxDLEMsQyxHLEMsRyxDLEMsUSxDLEcsRSxDLEMsQyxHLEMsQyxPLEMsSSxDLEEsQyxDLEcsQyxDLFEsQyxDLEksQyxDLEksQyxDLEMsRSxDLEMsQSxHLEMsQyxJLEMsSSxDLEEsQyxDLEcsQyxDLEksQyxDLEUsRSxDLEMsQyxDLEMsQyxJLEUsTyxDLEM7WSxJLEMsRyxDLEUsQyxFLEUsRztnQixFLEMsQyxDLEcsQztnQixDLEMsSzthLEM7WSxPLEUsQyxDLEM7Z0IsSyxDLEM7Z0IsSyxDO29CLEMsRyxFLEM7b0IsTTtnQixLLEM7b0IsQyxDLEssRSxDO29CLE87d0IsSyxFLEUsQyxDLEM7d0IsSSxFLEs7cUIsQztnQixLLEM7b0IsQyxDLEssRSxDO29CLEMsRyxFLEMsQyxDLEM7b0IsRSxHO0EseUI7cUIsQztvQixTO2dCLEssQztvQixFLEcsQyxDLEcsQyxHLEUsQztvQixDLEMsSSxDLEcsRSxDO29CLFM7Z0I7b0IsSSxDLEMsQyxHLEMsQyxJLEUsQyxHLEMsQyxNLEcsQyxJLEMsQyxDLEMsTSxHLEMsQyxDLEEsSSxDLEUsQyxDLEMsSyxDLEksRSxDLEMsQyxLLEMsQyxBLEU7d0IsQyxHLEMsQzt3QixTO3FCO29CLEksRSxDLEMsQyxLLEMsSSxDLEMsQyxJLEUsQyxDLEMsRyxDLEMsQyxDLEksRSxDLEMsQyxHLEMsQyxDLEMsQSxDLEEsRTt3QixDLEMsSyxHLEUsQyxDLEMsQzt3QixNO3FCO29CLEksRSxDLEMsQyxLLEMsSSxDLEMsSyxHLEMsQyxDLEMsRTt3QixDLEMsSyxHLEMsQyxDLEMsQzt3QixDLEcsRSxDO3dCLE07cUI7b0IsSSxDLEksQyxDLEssRyxDLEMsQyxDLEU7d0IsQyxDLEssRyxDLEMsQyxDLEM7d0IsQyxDLEcsQyxJLEMsRSxDLEM7d0IsTTtxQjtvQixJLEMsQyxDLEMsRSxDLEMsRyxDLEcsRSxDO29CLEMsQyxJLEMsRyxFLEM7b0IsUzthO1ksRSxHLEksQyxJLEMsTyxFLEMsQyxDO1Ms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QU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNoRCxZQUFZLENBQUMsT0FBTyxHQUFHLGFBQWEsQ0FBQztZQUNyQyxPQUFPLGFBQWEsQ0FBQztTQUN0QjtRQUdILE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQztLQUM3QixFQUFFO1FBQUMsYUFBYTtLQUFDLENBQUMsQUFBQztJQUVwQixPQUFPLEtBQUssQ0FBQztDQUNkLEFBQUM7QUFyQlcsT0FBQSxDQUFBLGdCQUFnQixHQUFBLGdCQUFBLENBcUIzQjs7O0EsWSxDO0EsSSxRLEcsQSxJLEksSSxDLFEsSSxXO0ksUSxHLE0sQyxNLEksUyxDLEU7USxJLEksQyxFLEMsRyxDLEUsQyxHLFMsQyxNLEUsQyxHLEMsRSxDLEUsQztZLEMsRyxTLEMsQyxDLEM7WSxJLEksQyxJLEMsQyxJLE0sQyxTLEMsYyxDLEksQyxDLEUsQyxDLEUsQyxDLEMsQyxHLEMsQyxDLEMsQztTO1EsTyxDLEM7SyxDO0ksTyxRLEMsSyxDLEksRSxTLEMsQztDLEE7QSxNLEMsYyxDLE8sRSxZLEU7SSxLLEUsSTtDLEMsQztBLE8sQyxpQixHLEssQyxDO0FFdkJGLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQUFBZ0M7QUFHekIsSUFBTSxpQkFBaUIsR0FBRyxTQUFDLEVBTVQsRUFObEI7SUFDTCxJQUFBLFNBQVMsR0FBQSxFQUFBLENBQUEsU0FBQSxFQUNULFdBQVcsR0FBQSxFQUFBLENBQUEsV0FBQSxFQUNYLFFBQVEsR0FBQSxFQUFBLENBQUEsUUFBQSxFQUNSLFNBQVMsR0FBQSxFQUFBLENBQUEsU0FBQSxFQUNULFVBQVUsR0FBQSxFQUFBLENBQUEsVUFBQSxBQUpWO0lBTUEsSUFBTSxtQkFBbUIsR0FBRyxPQUFBLENBQUEsT0FBTyxDQUNqQyxXQURGO1FBRUksT0FBQztZQUNDLE9BQU8sRUFBRSxTQUFTO1NBQ0ssQ0FBQTtLQUFBLEVBQzNCO1FBQUMsU0FBUztLQUFDLENBQ1osQUFBQztJQUVGLElBQU0sVUFBVSxHQUFHLE9BQUEsQ0FBQSxPQUFPLENBQ3hCLFdB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LENBQUMsR0FBRztRQUNiLFNBQVMsQ0FBQyxLQUFLO1FBQ2YsV0FBVyxDQUFDLE1BQU07UUFDbEIsV0FBVyxDQUFDLElBQUk7UUFDaEIsV0FBVyxDQUFDLEdBQUc7UUFDZixXQUFXLENBQUMsS0FBSztRQUNqQixRQUFRO0tBQ1QsQ0FDRixBQUFDO0lBRUYsT0FBTztRQUNMLG1CQUFtQixFQUFBLG1CQUFBO1FBQ25CLFVBQVUsRUFBQSxVQUFBO0tBQ1gsQ0FBQztDQUNILEFBQUM7QUEvRlcsT0FBQSxDQUFBLGlCQUFpQixHQUFBLGlCQUFBLENBK0Y1Qjs7O0EsWSxDO0EsSSxRLEcsQSxJLEksSSxDLFEsSSxXO0ksUSxHLE0sQyxNLEksUyxDLEU7USxJLEksQyxFLEMsRyxDLEUsQyxHLFMsQyxNLEUsQyxHLEMsRSxDLEUsQztZLEMsRyxTLEMsQyxDLEM7WSxJLEksQyxJLEMsQyxJLE0sQyxTLEMsYyxDLEksQyxDLEUsQyxDLEUsQyxDLEMsQyxHLEMsQyxDLEMsQztTO1EsTyxDLEM7SyxDO0ksTyxRLEMsSyxDLEksRSxTLEMsQztDLEE7QSxNLEMsYyxDLE8sRSxZLEU7SSxLLEUsSTtDLEMsQztBLE8sQyxjLEcsSyxDLEM7QSxJLGEsRyxPLEMsbUIsQyxBO0FFbEdGLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQUFBb0M7QUFFcEMsSUFBQSxtQkFBQSxHQUFBLE9BQUEsQ0FBQSxxQkFBQSxDQUFBLEFBQXdEO0FBRWpELElBQU0sY0FBYyxHQUE0QixTQUFDLEVBV3ZELEVBWE07SUFDTCxJQUFBLFNBQVMsR0FBQSxFQUFBLENBQUEsU0FBQSxFQUNULFdBQVcsR0FBQSxFQUFBLENBQUEsV0FBQSxFQUNYLFFBQVEsR0FBQSxFQUFBLENBQUEsUUFBQSxFQUNSLFVBQVUsR0FBQSxFQUFBLENBQUEsVUFBQSxFQUNWLFNBQVMsR0FBQSxFQUFBLENBQUEsU0FBQSxFQUNULGNBQWMsR0FBQSxFQUFBLENBQUEsY0FBQSxFQUNGLGtCQUFrQixHQUFBLEVBQUEsQ0FBQSxVQUFBLEVBQzlCLFNBQVMsR0FBQSxFQUFBLENBQUEsU0FBQSxFQUNULFFBQVEsR0FBQSxFQUFBLENBQUEsUUFBQSxFQUNELDJCQUEyQixHQUFBLEVBQUEsQ0FBQSxLQUFBLEFBVGxDO0lBV00sSUFBQSxFQUFBLEdBQXNDLG1CQUFBLENBQUEsaUJBQWlCLENBQUM7UUFDNUQsU0FBUyxFQUFBLFNBQUE7UUFDVCxXQUFXLEVBQUEsV0FBQTtRQUNYLFFBQVEsRUFBQSxRQUFBO1FBQ1IsVUFBVSxFQUFBLFVBQUE7UUFDVixTQUFTLEVBQUEsU0FBQTtLQUNWLENBQUMsRUFOTSxtQkFBbUIsR0FBQSxFQUFBLENBQUEsbUJBQUEsRUFBRSxVQUFVLEdBQUEsRUFBQSxDQUFBLFVBTXJDLEFBQUM7SUFFSCxJQUFNLG9CQUFvQixHQUFHLE9BQUEsQ0FBQSxPQUFPLENBQ2xDLFdBQUE7UUFBTSxPQUFBLFFBQUEsQ0FBQSxRQUFBLENBQUEsRUFBQSxFQUNELG1CQUFtQixDQUFBLEVBQ25CLDJCQUEyQixDQUFBLENBQzlCO0tBQUEsRUFDRjtRQUFDLG1CQUFtQjtRQUFFLDJCQUEyQjtLQUFDLENBQ25ELEFBQUM7SUFFRixJQUFNLGdCQUFnQixHQUFHLE9BQUEsQ0FBQSxPQUFPLENBQzlCLFdBQUE7UUFBTSxPQUFBLFFBQUEsQ0FBQSxRQUFBLENBQUEsRUFBQSxFQUNELFVBQVUsQ0FBQSxFQUNWLGtCQUFrQixDQUFBLENBQ3JCO0tBQUEsRUFDRjtRQUFDLFVBQVU7UUFBRSxrQkFBa0I7S0FBQyxDQUNqQyxBQUFDO0lBRUYsT0FDRSxhQUFBLENBQUEsSUFBQSxDQUFBLEtBQUEsRUFBQSxRQUFBLENBQUE7UUFBSyxTQUFTLEVBQUUsU0FBUztRQUFFLEtBQUssRUFBRSxvQkFBb0I7S0FBQSxFQUFBO1FBQUEsUUFBQSxFQUFBO1lBQ3BELGFBQUEsQ0FBQSxHQUFBLENBQUEsS0FBQSxFQUFBO2dCQUFLLEtBQUssRUFBRSxnQkFBZ0I7Z0JBQUUsU0FBUyxFQUFFLGNBQWM7YUFBQSxFQUFBLEtBQUEsQ0FBQSxDQUFJO1lBQzFELFFBQVE7U0FBQTtLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsQ0FDTCxDQUNOO0NBQ0gsQUFBQztBQTFDVyxPQUFBLENBQUEsY0FBYyxHQUFBLGNBQUEsQ0EwQ3pCIiwic291cmNlcyI6WyJzb3VyY2UvY29udGVudC50c3giLCJjb250ZW50LnRzeCIsInNvdXJjZS9vcHRpb25zLXN0b3JhZ2UuanMiLCJub2RlX21vZHVsZXMvd2ViZXh0LW9wdGlvbnMtc3luYy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy93ZWJleHQtZGV0ZWN0LXBhZ2UvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQHBhcmNlbC90cmFuc2Zvcm1lci1qcy9zcmMvZXNtb2R1bGUtaGVscGVycy5qcyIsIm5vZGVfbW9kdWxlcy9wcmVhY3QvZGlzdC9wcmVhY3QubW9kdWxlLmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9zcmMvY29uc3RhbnRzLmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9zcmMvdXRpbC5qcyIsIm5vZGVfbW9kdWxlcy9wcmVhY3Qvc3JjL29wdGlvbnMuanMiLCJub2RlX21vZHVsZXMvcHJlYWN0L3NyYy9jcmVhdGUtZWxlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9wcmVhY3Qvc3JjL2NvbXBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9wcmVhY3Qvc3JjL2NyZWF0ZS1jb250ZXh0LmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9zcmMvZGlmZi9jaGlsZHJlbi5qcyIsIm5vZGVfbW9kdWxlcy9wcmVhY3Qvc3JjL2RpZmYvcHJvcHMuanMiLCJub2RlX21vZHVsZXMvcHJlYWN0L3NyYy9kaWZmL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9zcmMvcmVuZGVyLmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9zcmMvY2xvbmUtZWxlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9wcmVhY3Qvc3JjL2RpZmYvY2F0Y2gtZXJyb3IuanMiLCJzb3VyY2UvaW5qZWN0ZWQvaW5kZXgudHN4IiwiaW5kZXgudHN4Iiwibm9kZV9tb2R1bGVzL3ByZWFjdC9ob29rcy9kaXN0L2hvb2tzLm1vZHVsZS5qcyIsIm5vZGVfbW9kdWxlcy9wcmVhY3QvaG9va3Mvc3JjL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LXRpbnktcG9wb3Zlci9kaXN0L1BvcG92ZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtdGlueS1wb3BvdmVyL3NyYy9Qb3BvdmVyLnRzeCIsIm5vZGVfbW9kdWxlcy9wcmVhY3QvanN4LXJ1bnRpbWUvZGlzdC9qc3hSdW50aW1lLm1vZHVsZS5qcyIsIm5vZGVfbW9kdWxlcy9wcmVhY3QvanN4LXJ1bnRpbWUvc3JjL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9jb21wYXQvZGlzdC9jb21wYXQubW9kdWxlLmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9jb21wYXQvc3JjL3V0aWwuanMiLCJub2RlX21vZHVsZXMvcHJlYWN0L2NvbXBhdC9zcmMvUHVyZUNvbXBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9wcmVhY3QvY29tcGF0L3NyYy9tZW1vLmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9jb21wYXQvc3JjL2ZvcndhcmRSZWYuanMiLCJub2RlX21vZHVsZXMvcHJlYWN0L2NvbXBhdC9zcmMvQ2hpbGRyZW4uanMiLCJub2RlX21vZHVsZXMvcHJlYWN0L2NvbXBhdC9zcmMvc3VzcGVuc2UuanMiLCJub2RlX21vZHVsZXMvcHJlYWN0L2NvbXBhdC9zcmMvc3VzcGVuc2UtbGlzdC5qcyIsIm5vZGVfbW9kdWxlcy9wcmVhY3QvY29tcGF0L3NyYy9wb3J0YWxzLmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9jb21wYXQvc3JjL3JlbmRlci5qcyIsIm5vZGVfbW9kdWxlcy9wcmVhY3QvY29tcGF0L3NyYy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC10aW55LXBvcG92ZXIvZGlzdC9Qb3BvdmVyUG9ydGFsLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LXRpbnktcG9wb3Zlci9zcmMvUG9wb3ZlclBvcnRhbC50c3giLCJub2RlX21vZHVsZXMvcmVhY3QtdGlueS1wb3BvdmVyL2Rpc3QvdXRpbC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC10aW55LXBvcG92ZXIvc3JjL3V0aWwudHMiLCJub2RlX21vZHVsZXMvcmVhY3QtdGlueS1wb3BvdmVyL2Rpc3QvdXNlUG9wb3Zlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC10aW55LXBvcG92ZXIvc3JjL3VzZVBvcG92ZXIudHMiLCJub2RlX21vZHVsZXMvcmVhY3QtdGlueS1wb3BvdmVyL2Rpc3QvdXNlRWxlbWVudFJlZi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC10aW55LXBvcG92ZXIvc3JjL3VzZUVsZW1lbnRSZWYudHMiLCJub2RlX21vZHVsZXMvcmVhY3QtdGlueS1wb3BvdmVyL2Rpc3QvdXNlTWVtb2l6ZWRBcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC10aW55LXBvcG92ZXIvc3JjL3VzZU1lbW9pemVkQXJyYXkudHMiLCJub2RlX21vZHVsZXMvcmVhY3QtdGlueS1wb3BvdmVyL2Rpc3QvdXNlQXJyb3dDb250YWluZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtdGlueS1wb3BvdmVyL3NyYy91c2VBcnJvd0NvbnRhaW5lci50cyIsIm5vZGVfbW9kdWxlcy9yZWFjdC10aW55LXBvcG92ZXIvZGlzdC9BcnJvd0NvbnRhaW5lci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC10aW55LXBvcG92ZXIvc3JjL0Fycm93Q29udGFpbmVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAdHMtaWdub3JlXG5pbXBvcnQgb3B0aW9uc1N0b3JhZ2UgZnJvbSBcIi4vb3B0aW9ucy1zdG9yYWdlLmpzXCJcbmltcG9ydCB7IGgsIHJlbmRlciB9IGZyb20gXCJwcmVhY3RcIlxuaW1wb3J0IEluamVjdGVkIGZyb20gXCIuL2luamVjdGVkXCJcblxuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcblx0Y29uc3Qgb3B0aW9ucyA9IGF3YWl0IG9wdGlvbnNTdG9yYWdlLmdldEFsbCgpXG5cdGNvbnN0IHdpZGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5IZWFkZXIgPiAuSGVhZGVyLWl0ZW0uSGVhZGVyLWl0ZW0tLWZ1bGxcIikgLy8ud2lkdGgtZnVsbFxuXG5cdGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIilcblx0YnV0dG9uLmlubmVyVGV4dCA9IFwiUXVpY2tcIlxuXHRidXR0b24uY2xhc3NMaXN0LmFkZChcIm1yLW1kLTNcIilcblxuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2luamVjdF9tZV9naHFhXCIpPy5yZW1vdmUoKVxuXG5cdC8vIGNvbnNvbGUubG9nKFwic3RhcnRpbmcgaW5qZWN0aW9uXCIpXG5cblx0Y29uc3Qgc3BhbkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpXG5cdHNwYW5Db250YWluZXIuaWQgPSBcImluamVjdF9tZV9naHFhXCJcblx0c3BhbkNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwibXItbWQtM1wiKVxuXHRjb25zb2xlLmxvZyhzcGFuQ29udGFpbmVyKVxuXG5cdC8vIGNvbnN0IGJ1dHRvbiA9IDxidXR0b24gY2xhc3NOYW1lPVwibXItbWQtM1wiPlF1aWNrQWNjZXNzPC9idXR0b24+XG5cblx0Ly8gY29uc29sZS5sb2coYnV0dG9uKVxuXG5cdHdpZGVFbGVtZW50Py5wYXJlbnRFbGVtZW50Py5pbnNlcnRCZWZvcmUoc3BhbkNvbnRhaW5lciwgd2lkZUVsZW1lbnQ/Lm5leHRTaWJsaW5nISlcblxuXHRyZW5kZXIoPEluamVjdGVkIC8+LCBzcGFuQ29udGFpbmVyKTtcblxuXHRjb25zdCBjb2xvciA9ICdyZ2IoJyArIG9wdGlvbnMuY29sb3JSZWQgKyAnLCAnICsgb3B0aW9ucy5jb2xvckdyZWVuICsgJywnICsgb3B0aW9ucy5jb2xvckJsdWUgKyAnKSdcblx0Y29uc3QgdGV4dCA9IG9wdGlvbnMudGV4dFxuXHRjb25zdCBub3RpY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXHRub3RpY2UuaW5uZXJIVE1MID0gdGV4dFxuXHRkb2N1bWVudC5ib2R5LmFwcGVuZChub3RpY2UpXG5cdG5vdGljZS5pZCA9ICd0ZXh0LW5vdGljZSdcblx0bm90aWNlLnN0eWxlLmJvcmRlciA9ICcycHggc29saWQgJyArIGNvbG9yXG5cdG5vdGljZS5zdHlsZS5jb2xvciA9IGNvbG9yXG59XG5cbmluaXQoKVxuIixudWxsLCJpbXBvcnQgT3B0aW9uc1N5bmMgZnJvbSAnd2ViZXh0LW9wdGlvbnMtc3luYyc7XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBPcHRpb25zU3luYyh7XG5cdGRlZmF1bHRzOiB7XG5cdFx0Y29sb3JSZWQ6IDI0NCxcblx0XHRjb2xvckdyZWVuOiA2Nyxcblx0XHRjb2xvckJsdWU6IDU0LFxuXHRcdHRleHQ6ICdTZXQgYSB0ZXh0IScsXG5cdH0sXG5cdG1pZ3JhdGlvbnM6IFtcblx0XHRPcHRpb25zU3luYy5taWdyYXRpb25zLnJlbW92ZVVudXNlZCxcblx0XSxcblx0bG9nZ2luZzogdHJ1ZSxcbn0pO1xuIiwiaW1wb3J0IHsgaXNCYWNrZ3JvdW5kIH0gZnJvbSBcIndlYmV4dC1kZXRlY3QtcGFnZVwiO1xuXG5mdW5jdGlvbiB0aHJvdHRsZShkZWxheSwgbm9UcmFpbGluZywgY2FsbGJhY2ssIGRlYm91bmNlTW9kZSkge1xuICAgIHZhciB0aW1lb3V0SUQ7XG4gICAgdmFyIGNhbmNlbGxlZCA9IGZhbHNlO1xuICAgIHZhciBsYXN0RXhlYyA9IDA7XG4gICAgZnVuY3Rpb24gY2xlYXJFeGlzdGluZ1RpbWVvdXQoKSB7XG4gICAgICAgIHRpbWVvdXRJRCAmJiBjbGVhclRpbWVvdXQodGltZW91dElEKTtcbiAgICB9XG4gICAgaWYgKFwiYm9vbGVhblwiICE9IHR5cGVvZiBub1RyYWlsaW5nKSB7XG4gICAgICAgIGRlYm91bmNlTW9kZSA9IGNhbGxiYWNrO1xuICAgICAgICBjYWxsYmFjayA9IG5vVHJhaWxpbmc7XG4gICAgICAgIG5vVHJhaWxpbmcgPSB2b2lkIDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNfID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgYXJndW1lbnRzX1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgZWxhcHNlZCA9IERhdGUubm93KCkgLSBsYXN0RXhlYztcbiAgICAgICAgaWYgKCFjYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIGRlYm91bmNlTW9kZSAmJiAhdGltZW91dElEICYmIGV4ZWMoKTtcbiAgICAgICAgICAgIGNsZWFyRXhpc3RpbmdUaW1lb3V0KCk7XG4gICAgICAgICAgICB2b2lkIDAgPT09IGRlYm91bmNlTW9kZSAmJiBlbGFwc2VkID4gZGVsYXkgPyBleGVjKCkgOiB0cnVlICE9PSBub1RyYWlsaW5nICYmICh0aW1lb3V0SUQgPSBzZXRUaW1lb3V0KGRlYm91bmNlTW9kZSA/IGNsZWFyIDogZXhlYywgdm9pZCAwID09PSBkZWJvdW5jZU1vZGUgPyBkZWxheSAtIGVsYXBzZWQgOiBkZWxheSkpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGV4ZWMoKSB7XG4gICAgICAgICAgICBsYXN0RXhlYyA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseShzZWxmLCBhcmd1bWVudHNfKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgICAgIHRpbWVvdXRJRCA9IHZvaWQgMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3cmFwcGVyLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGVhckV4aXN0aW5nVGltZW91dCgpO1xuICAgICAgICBjYW5jZWxsZWQgPSB0cnVlO1xuICAgIH07XG4gICAgcmV0dXJuIHdyYXBwZXI7XG59XG5cbmNsYXNzIFR5cGVSZWdpc3RyeSB7XG4gICAgY29uc3RydWN0b3IoaW5pdGlhbCA9IHt9KSB7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJlZFR5cGVzID0gaW5pdGlhbDtcbiAgICB9XG4gICAgZ2V0KHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gdGhpcy5yZWdpc3RlcmVkVHlwZXNbdHlwZV0gPyB0aGlzLnJlZ2lzdGVyZWRUeXBlc1t0eXBlXSA6IHRoaXMucmVnaXN0ZXJlZFR5cGVzLmRlZmF1bHQ7XG4gICAgfVxuICAgIHJlZ2lzdGVyKHR5cGUsIGl0ZW0pIHtcbiAgICAgICAgdm9pZCAwID09PSB0aGlzLnJlZ2lzdGVyZWRUeXBlc1t0eXBlXSAmJiAodGhpcy5yZWdpc3RlcmVkVHlwZXNbdHlwZV0gPSBpdGVtKTtcbiAgICB9XG4gICAgcmVnaXN0ZXJEZWZhdWx0KGl0ZW0pIHtcbiAgICAgICAgdGhpcy5yZWdpc3RlcihcImRlZmF1bHRcIiwgaXRlbSk7XG4gICAgfVxufVxuXG5jbGFzcyBLZXlFeHRyYWN0b3JzIGV4dGVuZHMgVHlwZVJlZ2lzdHJ5IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRGVmYXVsdCgoZWwgPT4gZWwuZ2V0QXR0cmlidXRlKFwibmFtZVwiKSB8fCBcIlwiKSk7XG4gICAgfVxufVxuXG5jbGFzcyBJbnB1dFJlYWRlcnMgZXh0ZW5kcyBUeXBlUmVnaXN0cnkge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJEZWZhdWx0KChlbCA9PiBlbC52YWx1ZSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKFwiY2hlY2tib3hcIiwgKGVsID0+IG51bGwgIT09IGVsLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpID8gZWwuY2hlY2tlZCA/IGVsLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpIDogbnVsbCA6IGVsLmNoZWNrZWQpKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlcihcInNlbGVjdFwiLCAoZWwgPT4gZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlLCBvcHRpb24sIGk7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IGVsZW0ub3B0aW9ucztcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleDtcbiAgICAgICAgICAgIHZhciBvbmUgPSBcInNlbGVjdC1vbmVcIiA9PT0gZWxlbS50eXBlO1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXTtcbiAgICAgICAgICAgIHZhciBtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcbiAgICAgICAgICAgIGkgPSBpbmRleCA8IDAgPyBtYXggOiBvbmUgPyBpbmRleCA6IDA7XG4gICAgICAgICAgICBmb3IgKDtpIDwgbWF4OyBpKyspIGlmICgoKG9wdGlvbiA9IG9wdGlvbnNbaV0pLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4KSAmJiAhb3B0aW9uLmRpc2FibGVkICYmICEob3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgJiYgXCJvcHRncm91cFwiID09PSBvcHRpb24ucGFyZW50Tm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBvcHRpb24udmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKG9uZSkgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICAgIH0oZWwpKSk7XG4gICAgfVxufVxuXG5jbGFzcyBLZXlBc3NpZ25tZW50VmFsaWRhdG9ycyBleHRlbmRzIFR5cGVSZWdpc3RyeSB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckRlZmF1bHQoKCgpID0+IHRydWUpKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlcihcInJhZGlvXCIsIChlbCA9PiBlbC5jaGVja2VkKSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBrZXlTcGxpdHRlcihrZXkpIHtcbiAgICBsZXQgbWF0Y2hlcyA9IGtleS5tYXRjaCgvW15bXFxdXSsvZyk7XG4gICAgbGV0IGxhc3RLZXk7XG4gICAgaWYgKGtleS5sZW5ndGggPiAxICYmIGtleS5pbmRleE9mKFwiW11cIikgPT09IGtleS5sZW5ndGggLSAyKSB7XG4gICAgICAgIGxhc3RLZXkgPSBtYXRjaGVzLnBvcCgpO1xuICAgICAgICBtYXRjaGVzLnB1c2goWyBsYXN0S2V5IF0pO1xuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hlcztcbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudFR5cGUoZWwpIHtcbiAgICBsZXQgdHlwZUF0dHI7XG4gICAgbGV0IHRhZ05hbWUgPSBlbC50YWdOYW1lO1xuICAgIGxldCB0eXBlID0gdGFnTmFtZTtcbiAgICBpZiAoXCJpbnB1dFwiID09PSB0YWdOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgdHlwZUF0dHIgPSBlbC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuICAgICAgICB0eXBlID0gdHlwZUF0dHIgfHwgXCJ0ZXh0XCI7XG4gICAgfVxuICAgIHJldHVybiB0eXBlLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIGdldElucHV0RWxlbWVudHMoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXQsc2VsZWN0LHRleHRhcmVhXCIpLCAoZWwgPT4ge1xuICAgICAgICBpZiAoXCJpbnB1dFwiID09PSBlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgJiYgKFwic3VibWl0XCIgPT09IGVsLnR5cGUgfHwgXCJyZXNldFwiID09PSBlbC50eXBlKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgbXlUeXBlID0gZ2V0RWxlbWVudFR5cGUoZWwpO1xuICAgICAgICBsZXQgaWRlbnRpZmllciA9IG9wdGlvbnMua2V5RXh0cmFjdG9ycy5nZXQobXlUeXBlKShlbCk7XG4gICAgICAgIGxldCBmb3VuZEluSW5jbHVkZSA9IC0xICE9PSAob3B0aW9ucy5pbmNsdWRlIHx8IFtdKS5pbmRleE9mKGlkZW50aWZpZXIpO1xuICAgICAgICBsZXQgZm91bmRJbkV4Y2x1ZGUgPSAtMSAhPT0gKG9wdGlvbnMuZXhjbHVkZSB8fCBbXSkuaW5kZXhPZihpZGVudGlmaWVyKTtcbiAgICAgICAgbGV0IGZvdW5kSW5JZ25vcmVkID0gZmFsc2U7XG4gICAgICAgIGxldCByZWplY3QgPSBmYWxzZTtcbiAgICAgICAgaWYgKG9wdGlvbnMuaWdub3JlZFR5cGVzKSBmb3IgKGxldCBzZWxlY3RvciBvZiBvcHRpb25zLmlnbm9yZWRUeXBlcykgZWwubWF0Y2hlcyhzZWxlY3RvcikgJiYgKGZvdW5kSW5JZ25vcmVkID0gdHJ1ZSk7XG4gICAgICAgIHJlamVjdCA9ICFmb3VuZEluSW5jbHVkZSAmJiAoISFvcHRpb25zLmluY2x1ZGUgfHwgKGZvdW5kSW5FeGNsdWRlIHx8IGZvdW5kSW5JZ25vcmVkKSk7XG4gICAgICAgIHJldHVybiAhcmVqZWN0O1xuICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gYXNzaWduS2V5VmFsdWUob2JqLCBrZXljaGFpbiwgdmFsdWUpIHtcbiAgICBpZiAoIWtleWNoYWluKSByZXR1cm4gb2JqO1xuICAgIHZhciBrZXkgPSBrZXljaGFpbi5zaGlmdCgpO1xuICAgIG9ialtrZXldIHx8IChvYmpba2V5XSA9IEFycmF5LmlzQXJyYXkoa2V5KSA/IFtdIDoge30pO1xuICAgIDAgPT09IGtleWNoYWluLmxlbmd0aCAmJiAoQXJyYXkuaXNBcnJheShvYmpba2V5XSkgPyBudWxsICE9PSB2YWx1ZSAmJiBvYmpba2V5XS5wdXNoKHZhbHVlKSA6IG9ialtrZXldID0gdmFsdWUpO1xuICAgIGtleWNoYWluLmxlbmd0aCA+IDAgJiYgYXNzaWduS2V5VmFsdWUob2JqW2tleV0sIGtleWNoYWluLCB2YWx1ZSk7XG4gICAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplKGVsZW1lbnQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBkYXRhID0ge307XG4gICAgb3B0aW9ucy5rZXlTcGxpdHRlciA9IG9wdGlvbnMua2V5U3BsaXR0ZXIgfHwga2V5U3BsaXR0ZXI7XG4gICAgb3B0aW9ucy5rZXlFeHRyYWN0b3JzID0gbmV3IEtleUV4dHJhY3RvcnMob3B0aW9ucy5rZXlFeHRyYWN0b3JzIHx8IHt9KTtcbiAgICBvcHRpb25zLmlucHV0UmVhZGVycyA9IG5ldyBJbnB1dFJlYWRlcnMob3B0aW9ucy5pbnB1dFJlYWRlcnMgfHwge30pO1xuICAgIG9wdGlvbnMua2V5QXNzaWdubWVudFZhbGlkYXRvcnMgPSBuZXcgS2V5QXNzaWdubWVudFZhbGlkYXRvcnMob3B0aW9ucy5rZXlBc3NpZ25tZW50VmFsaWRhdG9ycyB8fCB7fSk7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChnZXRJbnB1dEVsZW1lbnRzKGVsZW1lbnQsIG9wdGlvbnMpLCAoZWwgPT4ge1xuICAgICAgICBsZXQgdHlwZSA9IGdldEVsZW1lbnRUeXBlKGVsKTtcbiAgICAgICAgbGV0IGtleSA9IG9wdGlvbnMua2V5RXh0cmFjdG9ycy5nZXQodHlwZSkoZWwpO1xuICAgICAgICBsZXQgdmFsdWUgPSBvcHRpb25zLmlucHV0UmVhZGVycy5nZXQodHlwZSkoZWwpO1xuICAgICAgICBpZiAob3B0aW9ucy5rZXlBc3NpZ25tZW50VmFsaWRhdG9ycy5nZXQodHlwZSkoZWwsIGtleSwgdmFsdWUpKSB7XG4gICAgICAgICAgICBsZXQga2V5Y2hhaW4gPSBvcHRpb25zLmtleVNwbGl0dGVyKGtleSk7XG4gICAgICAgICAgICBkYXRhID0gYXNzaWduS2V5VmFsdWUoZGF0YSwga2V5Y2hhaW4sIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0pKTtcbiAgICByZXR1cm4gZGF0YTtcbn1cblxuY2xhc3MgSW5wdXRXcml0ZXJzIGV4dGVuZHMgVHlwZVJlZ2lzdHJ5IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRGVmYXVsdCgoKGVsLCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgZWwudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKFwiY2hlY2tib3hcIiwgKChlbCwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgIG51bGwgPT09IHZhbHVlID8gZWwuaW5kZXRlcm1pbmF0ZSA9IHRydWUgOiBlbC5jaGVja2VkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyAtMSAhPT0gdmFsdWUuaW5kZXhPZihlbC52YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKFwicmFkaW9cIiwgKGZ1bmN0aW9uKGVsLCB2YWx1ZSkge1xuICAgICAgICAgICAgdm9pZCAwICE9PSB2YWx1ZSAmJiAoZWwuY2hlY2tlZCA9IGVsLnZhbHVlID09PSB2YWx1ZS50b1N0cmluZygpKTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKFwic2VsZWN0XCIsIHNldFNlbGVjdFZhbHVlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFNlbGVjdFZhbHVlKGVsZW0sIHZhbHVlKSB7XG4gICAgdmFyIG9wdGlvblNldCwgb3B0aW9uO1xuICAgIHZhciBvcHRpb25zID0gZWxlbS5vcHRpb25zO1xuICAgIHZhciB2YWx1ZXMgPSBmdW5jdGlvbihhcnIpIHtcbiAgICAgICAgdmFyIHJldCA9IFtdO1xuICAgICAgICBudWxsICE9PSBhcnIgJiYgKEFycmF5LmlzQXJyYXkoYXJyKSA/IHJldC5wdXNoLmFwcGx5KHJldCwgYXJyKSA6IHJldC5wdXNoKGFycikpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH0odmFsdWUpO1xuICAgIHZhciBpID0gb3B0aW9ucy5sZW5ndGg7XG4gICAgZm9yICg7aS0tOyApIHtcbiAgICAgICAgb3B0aW9uID0gb3B0aW9uc1tpXTtcbiAgICAgICAgaWYgKHZhbHVlcy5pbmRleE9mKG9wdGlvbi52YWx1ZSkgPiAtMSkge1xuICAgICAgICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZShcInNlbGVjdGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgb3B0aW9uU2V0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvcHRpb25TZXQgfHwgKGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xKTtcbn1cblxuZnVuY3Rpb24ga2V5Sm9pbmVyKHBhcmVudEtleSwgY2hpbGRLZXkpIHtcbiAgICByZXR1cm4gcGFyZW50S2V5ICsgXCJbXCIgKyBjaGlsZEtleSArIFwiXVwiO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuRGF0YShkYXRhLCBwYXJlbnRLZXksIG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBmbGF0RGF0YSA9IHt9O1xuICAgIGxldCBrZXlKb2luZXIkMSA9IG9wdGlvbnMua2V5Sm9pbmVyIHx8IGtleUpvaW5lcjtcbiAgICBmb3IgKGxldCBrZXlOYW1lIGluIGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KGtleU5hbWUpKSBjb250aW51ZTtcbiAgICAgICAgbGV0IHZhbHVlID0gZGF0YVtrZXlOYW1lXTtcbiAgICAgICAgbGV0IGhhc2ggPSB7fTtcbiAgICAgICAgcGFyZW50S2V5ICYmIChrZXlOYW1lID0ga2V5Sm9pbmVyJDEocGFyZW50S2V5LCBrZXlOYW1lKSk7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgaGFzaFtrZXlOYW1lICsgXCJbXVwiXSA9IHZhbHVlO1xuICAgICAgICAgICAgaGFzaFtrZXlOYW1lXSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2UgXCJvYmplY3RcIiA9PSB0eXBlb2YgdmFsdWUgPyBoYXNoID0gZmxhdHRlbkRhdGEodmFsdWUsIGtleU5hbWUsIG9wdGlvbnMpIDogaGFzaFtrZXlOYW1lXSA9IHZhbHVlO1xuICAgICAgICBPYmplY3QuYXNzaWduKGZsYXREYXRhLCBoYXNoKTtcbiAgICB9XG4gICAgcmV0dXJuIGZsYXREYXRhO1xufVxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZShmb3JtLCBkYXRhLCBvcHRpb25zID0ge30pIHtcbiAgICBsZXQgZmxhdHRlbmVkRGF0YSA9IGZsYXR0ZW5EYXRhKGRhdGEsIG51bGwsIG9wdGlvbnMpO1xuICAgIG9wdGlvbnMua2V5RXh0cmFjdG9ycyA9IG5ldyBLZXlFeHRyYWN0b3JzKG9wdGlvbnMua2V5RXh0cmFjdG9ycyB8fCB7fSk7XG4gICAgb3B0aW9ucy5pbnB1dFdyaXRlcnMgPSBuZXcgSW5wdXRXcml0ZXJzKG9wdGlvbnMuaW5wdXRXcml0ZXJzIHx8IHt9KTtcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGdldElucHV0RWxlbWVudHMoZm9ybSwgb3B0aW9ucyksIChlbCA9PiB7XG4gICAgICAgIGxldCB0eXBlID0gZ2V0RWxlbWVudFR5cGUoZWwpO1xuICAgICAgICBsZXQga2V5ID0gb3B0aW9ucy5rZXlFeHRyYWN0b3JzLmdldCh0eXBlKShlbCk7XG4gICAgICAgIG9wdGlvbnMuaW5wdXRXcml0ZXJzLmdldCh0eXBlKShlbCwgZmxhdHRlbmVkRGF0YVtrZXldKTtcbiAgICB9KSk7XG59XG5cbnZhciBselN0cmluZyA9IHtcbiAgICBleHBvcnRzOiB7fVxufTtcblxubW9kdWxlID0gbHpTdHJpbmcsIExaU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGYgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuICAgIHZhciBrZXlTdHJCYXNlNjQgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCI7XG4gICAgdmFyIGtleVN0clVyaVNhZmUgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky0kXCI7XG4gICAgdmFyIGJhc2VSZXZlcnNlRGljID0ge307XG4gICAgZnVuY3Rpb24gZ2V0QmFzZVZhbHVlKGFscGhhYmV0LCBjaGFyYWN0ZXIpIHtcbiAgICAgICAgaWYgKCFiYXNlUmV2ZXJzZURpY1thbHBoYWJldF0pIHtcbiAgICAgICAgICAgIGJhc2VSZXZlcnNlRGljW2FscGhhYmV0XSA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbHBoYWJldC5sZW5ndGg7IGkrKykgYmFzZVJldmVyc2VEaWNbYWxwaGFiZXRdW2FscGhhYmV0LmNoYXJBdChpKV0gPSBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlUmV2ZXJzZURpY1thbHBoYWJldF1bY2hhcmFjdGVyXTtcbiAgICB9XG4gICAgdmFyIExaU3RyaW5nID0ge1xuICAgICAgICBjb21wcmVzc1RvQmFzZTY0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgaWYgKG51bGwgPT0gaW5wdXQpIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgdmFyIHJlcyA9IExaU3RyaW5nLl9jb21wcmVzcyhpbnB1dCwgNiwgKGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5U3RyQmFzZTY0LmNoYXJBdChhKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHN3aXRjaCAocmVzLmxlbmd0aCAlIDQpIHtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG5cbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXMgKyBcIj09PVwiO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzICsgXCI9PVwiO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzICsgXCI9XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlY29tcHJlc3NGcm9tQmFzZTY0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gaW5wdXQgPyBcIlwiIDogXCJcIiA9PSBpbnB1dCA/IG51bGwgOiBMWlN0cmluZy5fZGVjb21wcmVzcyhpbnB1dC5sZW5ndGgsIDMyLCAoZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QmFzZVZhbHVlKGtleVN0ckJhc2U2NCwgaW5wdXQuY2hhckF0KGluZGV4KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXByZXNzVG9VVEYxNjogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsID09IGlucHV0ID8gXCJcIiA6IExaU3RyaW5nLl9jb21wcmVzcyhpbnB1dCwgMTUsIChmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGYoYSArIDMyKTtcbiAgICAgICAgICAgIH0pKSArIFwiIFwiO1xuICAgICAgICB9LFxuICAgICAgICBkZWNvbXByZXNzRnJvbVVURjE2OiBmdW5jdGlvbihjb21wcmVzc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbCA9PSBjb21wcmVzc2VkID8gXCJcIiA6IFwiXCIgPT0gY29tcHJlc3NlZCA/IG51bGwgOiBMWlN0cmluZy5fZGVjb21wcmVzcyhjb21wcmVzc2VkLmxlbmd0aCwgMTYzODQsIChmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21wcmVzc2VkLmNoYXJDb2RlQXQoaW5kZXgpIC0gMzI7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXByZXNzVG9VaW50OEFycmF5OiBmdW5jdGlvbih1bmNvbXByZXNzZWQpIHtcbiAgICAgICAgICAgIHZhciBjb21wcmVzc2VkID0gTFpTdHJpbmcuY29tcHJlc3ModW5jb21wcmVzc2VkKTtcbiAgICAgICAgICAgIHZhciBidWYgPSBuZXcgVWludDhBcnJheSgyICogY29tcHJlc3NlZC5sZW5ndGgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIFRvdGFsTGVuID0gY29tcHJlc3NlZC5sZW5ndGg7IGkgPCBUb3RhbExlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRfdmFsdWUgPSBjb21wcmVzc2VkLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICAgICAgYnVmWzIgKiBpXSA9IGN1cnJlbnRfdmFsdWUgPj4+IDg7XG4gICAgICAgICAgICAgICAgYnVmWzIgKiBpICsgMV0gPSBjdXJyZW50X3ZhbHVlICUgMjU2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICAgICAgfSxcbiAgICAgICAgZGVjb21wcmVzc0Zyb21VaW50OEFycmF5OiBmdW5jdGlvbihjb21wcmVzc2VkKSB7XG4gICAgICAgICAgICBpZiAobnVsbCA9PSBjb21wcmVzc2VkKSByZXR1cm4gTFpTdHJpbmcuZGVjb21wcmVzcyhjb21wcmVzc2VkKTtcbiAgICAgICAgICAgIHZhciBidWYgPSBuZXcgQXJyYXkoY29tcHJlc3NlZC5sZW5ndGggLyAyKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBUb3RhbExlbiA9IGJ1Zi5sZW5ndGg7IGkgPCBUb3RhbExlbjsgaSsrKSBidWZbaV0gPSAyNTYgKiBjb21wcmVzc2VkWzIgKiBpXSArIGNvbXByZXNzZWRbMiAqIGkgKyAxXTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIGJ1Zi5mb3JFYWNoKChmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZihjKSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4gTFpTdHJpbmcuZGVjb21wcmVzcyhyZXN1bHQuam9pbihcIlwiKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXByZXNzVG9FbmNvZGVkVVJJQ29tcG9uZW50OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gaW5wdXQgPyBcIlwiIDogTFpTdHJpbmcuX2NvbXByZXNzKGlucHV0LCA2LCAoZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXlTdHJVcmlTYWZlLmNoYXJBdChhKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVjb21wcmVzc0Zyb21FbmNvZGVkVVJJQ29tcG9uZW50OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgaWYgKG51bGwgPT0gaW5wdXQpIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgaWYgKFwiXCIgPT0gaW5wdXQpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKC8gL2csIFwiK1wiKTtcbiAgICAgICAgICAgIHJldHVybiBMWlN0cmluZy5fZGVjb21wcmVzcyhpbnB1dC5sZW5ndGgsIDMyLCAoZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QmFzZVZhbHVlKGtleVN0clVyaVNhZmUsIGlucHV0LmNoYXJBdChpbmRleCkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9LFxuICAgICAgICBjb21wcmVzczogZnVuY3Rpb24odW5jb21wcmVzc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gTFpTdHJpbmcuX2NvbXByZXNzKHVuY29tcHJlc3NlZCwgMTYsIChmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGYoYSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9jb21wcmVzczogZnVuY3Rpb24odW5jb21wcmVzc2VkLCBiaXRzUGVyQ2hhciwgZ2V0Q2hhckZyb21JbnQpIHtcbiAgICAgICAgICAgIGlmIChudWxsID09IHVuY29tcHJlc3NlZCkgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICB2YXIgaSwgdmFsdWUsIGlpLCBjb250ZXh0X2RpY3Rpb25hcnkgPSB7fSwgY29udGV4dF9kaWN0aW9uYXJ5VG9DcmVhdGUgPSB7fSwgY29udGV4dF9jID0gXCJcIiwgY29udGV4dF93YyA9IFwiXCIsIGNvbnRleHRfdyA9IFwiXCIsIGNvbnRleHRfZW5sYXJnZUluID0gMiwgY29udGV4dF9kaWN0U2l6ZSA9IDMsIGNvbnRleHRfbnVtQml0cyA9IDIsIGNvbnRleHRfZGF0YSA9IFtdLCBjb250ZXh0X2RhdGFfdmFsID0gMCwgY29udGV4dF9kYXRhX3Bvc2l0aW9uID0gMDtcbiAgICAgICAgICAgIGZvciAoaWkgPSAwOyBpaSA8IHVuY29tcHJlc3NlZC5sZW5ndGg7IGlpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0X2MgPSB1bmNvbXByZXNzZWQuY2hhckF0KGlpKTtcbiAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjb250ZXh0X2RpY3Rpb25hcnksIGNvbnRleHRfYykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kaWN0aW9uYXJ5W2NvbnRleHRfY10gPSBjb250ZXh0X2RpY3RTaXplKys7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRfZGljdGlvbmFyeVRvQ3JlYXRlW2NvbnRleHRfY10gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250ZXh0X3djID0gY29udGV4dF93ICsgY29udGV4dF9jO1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29udGV4dF9kaWN0aW9uYXJ5LCBjb250ZXh0X3djKSkgY29udGV4dF93ID0gY29udGV4dF93YzsgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29udGV4dF9kaWN0aW9uYXJ5VG9DcmVhdGUsIGNvbnRleHRfdykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0X3cuY2hhckNvZGVBdCgwKSA8IDI1Nikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb250ZXh0X251bUJpdHM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsIDw8PSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGV4dF9kYXRhX3Bvc2l0aW9uID09IGJpdHNQZXJDaGFyIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YS5wdXNoKGdldENoYXJGcm9tSW50KGNvbnRleHRfZGF0YV92YWwpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY29udGV4dF9kYXRhX3Bvc2l0aW9uKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gY29udGV4dF93LmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gY29udGV4dF9kYXRhX3ZhbCA8PCAxIHwgMSAmIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGV4dF9kYXRhX3Bvc2l0aW9uID09IGJpdHNQZXJDaGFyIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YS5wdXNoKGdldENoYXJGcm9tSW50KGNvbnRleHRfZGF0YV92YWwpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY29udGV4dF9kYXRhX3Bvc2l0aW9uKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID4+PSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb250ZXh0X251bUJpdHM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gY29udGV4dF9kYXRhX3ZhbCA8PCAxIHwgdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0X2RhdGFfcG9zaXRpb24gPT0gYml0c1BlckNoYXIgLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhLnB1c2goZ2V0Q2hhckZyb21JbnQoY29udGV4dF9kYXRhX3ZhbCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3ZhbCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBjb250ZXh0X2RhdGFfcG9zaXRpb24rKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGNvbnRleHRfdy5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSBjb250ZXh0X2RhdGFfdmFsIDw8IDEgfCAxICYgdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0X2RhdGFfcG9zaXRpb24gPT0gYml0c1BlckNoYXIgLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhLnB1c2goZ2V0Q2hhckZyb21JbnQoY29udGV4dF9kYXRhX3ZhbCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3ZhbCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBjb250ZXh0X2RhdGFfcG9zaXRpb24rKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPj49IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT0gLS1jb250ZXh0X2VubGFyZ2VJbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRfZW5sYXJnZUluID0gTWF0aC5wb3coMiwgY29udGV4dF9udW1CaXRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0X251bUJpdHMrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb250ZXh0X2RpY3Rpb25hcnlUb0NyZWF0ZVtjb250ZXh0X3ddO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBjb250ZXh0X2RpY3Rpb25hcnlbY29udGV4dF93XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb250ZXh0X251bUJpdHM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSBjb250ZXh0X2RhdGFfdmFsIDw8IDEgfCAxICYgdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9PSBiaXRzUGVyQ2hhciAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhLnB1c2goZ2V0Q2hhckZyb21JbnQoY29udGV4dF9kYXRhX3ZhbCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY29udGV4dF9kYXRhX3Bvc2l0aW9uKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPj49IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT0gLS1jb250ZXh0X2VubGFyZ2VJbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9lbmxhcmdlSW4gPSBNYXRoLnBvdygyLCBjb250ZXh0X251bUJpdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9udW1CaXRzKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kaWN0aW9uYXJ5W2NvbnRleHRfd2NdID0gY29udGV4dF9kaWN0U2l6ZSsrO1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0X3cgPSBTdHJpbmcoY29udGV4dF9jKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXCJcIiAhPT0gY29udGV4dF93KSB7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjb250ZXh0X2RpY3Rpb25hcnlUb0NyZWF0ZSwgY29udGV4dF93KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGV4dF93LmNoYXJDb2RlQXQoMCkgPCAyNTYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb250ZXh0X251bUJpdHM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPDw9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9PSBiaXRzUGVyQ2hhciAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhLnB1c2goZ2V0Q2hhckZyb21JbnQoY29udGV4dF9kYXRhX3ZhbCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY29udGV4dF9kYXRhX3Bvc2l0aW9uKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGNvbnRleHRfdy5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSBjb250ZXh0X2RhdGFfdmFsIDw8IDEgfCAxICYgdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9PSBiaXRzUGVyQ2hhciAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhLnB1c2goZ2V0Q2hhckZyb21JbnQoY29udGV4dF9kYXRhX3ZhbCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY29udGV4dF9kYXRhX3Bvc2l0aW9uKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPj49IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29udGV4dF9udW1CaXRzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gY29udGV4dF9kYXRhX3ZhbCA8PCAxIHwgdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9PSBiaXRzUGVyQ2hhciAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhLnB1c2goZ2V0Q2hhckZyb21JbnQoY29udGV4dF9kYXRhX3ZhbCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY29udGV4dF9kYXRhX3Bvc2l0aW9uKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBjb250ZXh0X3cuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3ZhbCA9IGNvbnRleHRfZGF0YV92YWwgPDwgMSB8IDEgJiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGV4dF9kYXRhX3Bvc2l0aW9uID09IGJpdHNQZXJDaGFyIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGEucHVzaChnZXRDaGFyRnJvbUludChjb250ZXh0X2RhdGFfdmFsKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBjb250ZXh0X2RhdGFfcG9zaXRpb24rKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA+Pj0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PSAtLWNvbnRleHRfZW5sYXJnZUluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0X2VubGFyZ2VJbiA9IE1hdGgucG93KDIsIGNvbnRleHRfbnVtQml0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0X251bUJpdHMrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgY29udGV4dF9kaWN0aW9uYXJ5VG9DcmVhdGVbY29udGV4dF93XTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGNvbnRleHRfZGljdGlvbmFyeVtjb250ZXh0X3ddO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29udGV4dF9udW1CaXRzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSBjb250ZXh0X2RhdGFfdmFsIDw8IDEgfCAxICYgdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGV4dF9kYXRhX3Bvc2l0aW9uID09IGJpdHNQZXJDaGFyIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhLnB1c2goZ2V0Q2hhckZyb21JbnQoY29udGV4dF9kYXRhX3ZhbCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGNvbnRleHRfZGF0YV9wb3NpdGlvbisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPj49IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKDAgPT0gLS1jb250ZXh0X2VubGFyZ2VJbikge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0X2VubGFyZ2VJbiA9IE1hdGgucG93KDIsIGNvbnRleHRfbnVtQml0cyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRfbnVtQml0cysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlID0gMjtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb250ZXh0X251bUJpdHM7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSBjb250ZXh0X2RhdGFfdmFsIDw8IDEgfCAxICYgdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9PSBiaXRzUGVyQ2hhciAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uID0gMDtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dF9kYXRhLnB1c2goZ2V0Q2hhckZyb21JbnQoY29udGV4dF9kYXRhX3ZhbCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgY29udGV4dF9kYXRhX3Bvc2l0aW9uKys7XG4gICAgICAgICAgICAgICAgdmFsdWUgPj49IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3ZhbCA8PD0gMTtcbiAgICAgICAgICAgICAgICBpZiAoY29udGV4dF9kYXRhX3Bvc2l0aW9uID09IGJpdHNQZXJDaGFyIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGEucHVzaChnZXRDaGFyRnJvbUludChjb250ZXh0X2RhdGFfdmFsKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24rKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0X2RhdGEuam9pbihcIlwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVjb21wcmVzczogZnVuY3Rpb24oY29tcHJlc3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gY29tcHJlc3NlZCA/IFwiXCIgOiBcIlwiID09IGNvbXByZXNzZWQgPyBudWxsIDogTFpTdHJpbmcuX2RlY29tcHJlc3MoY29tcHJlc3NlZC5sZW5ndGgsIDMyNzY4LCAoZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcHJlc3NlZC5jaGFyQ29kZUF0KGluZGV4KTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2RlY29tcHJlc3M6IGZ1bmN0aW9uKGxlbmd0aCwgcmVzZXRWYWx1ZSwgZ2V0TmV4dFZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgaSwgdywgYml0cywgcmVzYiwgbWF4cG93ZXIsIHBvd2VyLCBjLCBkaWN0aW9uYXJ5ID0gW10sIGVubGFyZ2VJbiA9IDQsIGRpY3RTaXplID0gNCwgbnVtQml0cyA9IDMsIGVudHJ5ID0gXCJcIiwgcmVzdWx0ID0gW10sIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgdmFsOiBnZXROZXh0VmFsdWUoMCksXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlc2V0VmFsdWUsXG4gICAgICAgICAgICAgICAgaW5kZXg6IDFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMzsgaSArPSAxKSBkaWN0aW9uYXJ5W2ldID0gaTtcbiAgICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgICAgbWF4cG93ZXIgPSBNYXRoLnBvdygyLCAyKTtcbiAgICAgICAgICAgIHBvd2VyID0gMTtcbiAgICAgICAgICAgIGZvciAoO3Bvd2VyICE9IG1heHBvd2VyOyApIHtcbiAgICAgICAgICAgICAgICByZXNiID0gZGF0YS52YWwgJiBkYXRhLnBvc2l0aW9uO1xuICAgICAgICAgICAgICAgIGRhdGEucG9zaXRpb24gPj49IDE7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT0gZGF0YS5wb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnBvc2l0aW9uID0gcmVzZXRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS52YWwgPSBnZXROZXh0VmFsdWUoZGF0YS5pbmRleCsrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYml0cyB8PSAocmVzYiA+IDAgPyAxIDogMCkgKiBwb3dlcjtcbiAgICAgICAgICAgICAgICBwb3dlciA8PD0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoYml0cykge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgICAgICAgbWF4cG93ZXIgPSBNYXRoLnBvdygyLCA4KTtcbiAgICAgICAgICAgICAgICBwb3dlciA9IDE7XG4gICAgICAgICAgICAgICAgZm9yICg7cG93ZXIgIT0gbWF4cG93ZXI7ICkge1xuICAgICAgICAgICAgICAgICAgICByZXNiID0gZGF0YS52YWwgJiBkYXRhLnBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnBvc2l0aW9uID4+PSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PSBkYXRhLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBvc2l0aW9uID0gcmVzZXRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudmFsID0gZ2V0TmV4dFZhbHVlKGRhdGEuaW5kZXgrKyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYml0cyB8PSAocmVzYiA+IDAgPyAxIDogMCkgKiBwb3dlcjtcbiAgICAgICAgICAgICAgICAgICAgcG93ZXIgPDw9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGMgPSBmKGJpdHMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAgICAgICBtYXhwb3dlciA9IE1hdGgucG93KDIsIDE2KTtcbiAgICAgICAgICAgICAgICBwb3dlciA9IDE7XG4gICAgICAgICAgICAgICAgZm9yICg7cG93ZXIgIT0gbWF4cG93ZXI7ICkge1xuICAgICAgICAgICAgICAgICAgICByZXNiID0gZGF0YS52YWwgJiBkYXRhLnBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnBvc2l0aW9uID4+PSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PSBkYXRhLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBvc2l0aW9uID0gcmVzZXRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudmFsID0gZ2V0TmV4dFZhbHVlKGRhdGEuaW5kZXgrKyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYml0cyB8PSAocmVzYiA+IDAgPyAxIDogMCkgKiBwb3dlcjtcbiAgICAgICAgICAgICAgICAgICAgcG93ZXIgPDw9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGMgPSBmKGJpdHMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpY3Rpb25hcnlbM10gPSBjO1xuICAgICAgICAgICAgdyA9IGM7XG4gICAgICAgICAgICByZXN1bHQucHVzaChjKTtcbiAgICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5pbmRleCA+IGxlbmd0aCkgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgICAgICAgbWF4cG93ZXIgPSBNYXRoLnBvdygyLCBudW1CaXRzKTtcbiAgICAgICAgICAgICAgICBwb3dlciA9IDE7XG4gICAgICAgICAgICAgICAgZm9yICg7cG93ZXIgIT0gbWF4cG93ZXI7ICkge1xuICAgICAgICAgICAgICAgICAgICByZXNiID0gZGF0YS52YWwgJiBkYXRhLnBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnBvc2l0aW9uID4+PSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PSBkYXRhLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBvc2l0aW9uID0gcmVzZXRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudmFsID0gZ2V0TmV4dFZhbHVlKGRhdGEuaW5kZXgrKyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYml0cyB8PSAocmVzYiA+IDAgPyAxIDogMCkgKiBwb3dlcjtcbiAgICAgICAgICAgICAgICAgICAgcG93ZXIgPDw9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCAoYyA9IGJpdHMpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIG1heHBvd2VyID0gTWF0aC5wb3coMiwgOCk7XG4gICAgICAgICAgICAgICAgICAgIHBvd2VyID0gMTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7cG93ZXIgIT0gbWF4cG93ZXI7ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzYiA9IGRhdGEudmFsICYgZGF0YS5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucG9zaXRpb24gPj49IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PSBkYXRhLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wb3NpdGlvbiA9IHJlc2V0VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS52YWwgPSBnZXROZXh0VmFsdWUoZGF0YS5pbmRleCsrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJpdHMgfD0gKHJlc2IgPiAwID8gMSA6IDApICogcG93ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3dlciA8PD0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkaWN0aW9uYXJ5W2RpY3RTaXplKytdID0gZihiaXRzKTtcbiAgICAgICAgICAgICAgICAgICAgYyA9IGRpY3RTaXplIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgZW5sYXJnZUluLS07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgICAgICAgICAgICBtYXhwb3dlciA9IE1hdGgucG93KDIsIDE2KTtcbiAgICAgICAgICAgICAgICAgICAgcG93ZXIgPSAxO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKDtwb3dlciAhPSBtYXhwb3dlcjsgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNiID0gZGF0YS52YWwgJiBkYXRhLnBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wb3NpdGlvbiA+Pj0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgwID09IGRhdGEucG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBvc2l0aW9uID0gcmVzZXRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnZhbCA9IGdldE5leHRWYWx1ZShkYXRhLmluZGV4KyspO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYml0cyB8PSAocmVzYiA+IDAgPyAxIDogMCkgKiBwb3dlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvd2VyIDw8PSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRpY3Rpb25hcnlbZGljdFNpemUrK10gPSBmKGJpdHMpO1xuICAgICAgICAgICAgICAgICAgICBjID0gZGljdFNpemUgLSAxO1xuICAgICAgICAgICAgICAgICAgICBlbmxhcmdlSW4tLTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoMCA9PSBlbmxhcmdlSW4pIHtcbiAgICAgICAgICAgICAgICAgICAgZW5sYXJnZUluID0gTWF0aC5wb3coMiwgbnVtQml0cyk7XG4gICAgICAgICAgICAgICAgICAgIG51bUJpdHMrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRpY3Rpb25hcnlbY10pIGVudHJ5ID0gZGljdGlvbmFyeVtjXTsgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjICE9PSBkaWN0U2l6ZSkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGVudHJ5ID0gdyArIHcuY2hhckF0KDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChlbnRyeSk7XG4gICAgICAgICAgICAgICAgZGljdGlvbmFyeVtkaWN0U2l6ZSsrXSA9IHcgKyBlbnRyeS5jaGFyQXQoMCk7XG4gICAgICAgICAgICAgICAgdyA9IGVudHJ5O1xuICAgICAgICAgICAgICAgIGlmICgwID09IC0tZW5sYXJnZUluKSB7XG4gICAgICAgICAgICAgICAgICAgIGVubGFyZ2VJbiA9IE1hdGgucG93KDIsIG51bUJpdHMpO1xuICAgICAgICAgICAgICAgICAgICBudW1CaXRzKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gTFpTdHJpbmc7XG59KCksIG51bGwgIT0gbW9kdWxlICYmIChtb2R1bGUuZXhwb3J0cyA9IExaU3RyaW5nKTtcblxudmFyIG1vZHVsZSwgTFpTdHJpbmc7XG5cbmNsYXNzIE9wdGlvbnNTeW5jIHtcbiAgICBjb25zdHJ1Y3Rvcih7ZGVmYXVsdHM6IGRlZmF1bHRzID0ge30sIHN0b3JhZ2VOYW1lOiBzdG9yYWdlTmFtZSA9IFwib3B0aW9uc1wiLCBtaWdyYXRpb25zOiBtaWdyYXRpb25zID0gW10sIGxvZ2dpbmc6IGxvZ2dpbmcgPSB0cnVlLCBzdG9yYWdlVHlwZTogc3RvcmFnZVR5cGUgPSBcInN5bmNcIn0gPSB7fSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzdG9yYWdlTmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzdG9yYWdlVHlwZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJkZWZhdWx0c1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJfZm9ybVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJfbWlncmF0aW9uc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN0b3JhZ2VOYW1lID0gc3RvcmFnZU5hbWU7XG4gICAgICAgIHRoaXMuZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICAgICAgdGhpcy5zdG9yYWdlVHlwZSA9IHN0b3JhZ2VUeXBlO1xuICAgICAgICB0aGlzLl9oYW5kbGVGb3JtSW5wdXQgPSAoZGVsYXkgPSAzMDAsIGF0QmVnaW4gPSB0aGlzLl9oYW5kbGVGb3JtSW5wdXQuYmluZCh0aGlzKSwgXG4gICAgICAgIHZvaWQgMCA9PT0gY2FsbGJhY2sgPyB0aHJvdHRsZShkZWxheSwgYXRCZWdpbiwgZmFsc2UpIDogdGhyb3R0bGUoZGVsYXksIGNhbGxiYWNrLCBmYWxzZSAhPT0gYXRCZWdpbikpO1xuICAgICAgICB2YXIgZGVsYXksIGF0QmVnaW4sIGNhbGxiYWNrO1xuICAgICAgICB0aGlzLl9oYW5kbGVTdG9yYWdlQ2hhbmdlT25Gb3JtID0gdGhpcy5faGFuZGxlU3RvcmFnZUNoYW5nZU9uRm9ybS5iaW5kKHRoaXMpO1xuICAgICAgICBsb2dnaW5nIHx8ICh0aGlzLl9sb2cgPSAoKSA9PiB7fSk7XG4gICAgICAgIHRoaXMuX21pZ3JhdGlvbnMgPSB0aGlzLl9ydW5NaWdyYXRpb25zKG1pZ3JhdGlvbnMpO1xuICAgIH1cbiAgICBnZXQgc3RvcmFnZSgpIHtcbiAgICAgICAgcmV0dXJuIGNocm9tZS5zdG9yYWdlW3RoaXMuc3RvcmFnZVR5cGVdO1xuICAgIH1cbiAgICBhc3luYyBnZXRBbGwoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX21pZ3JhdGlvbnM7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRBbGwoKTtcbiAgICB9XG4gICAgYXN5bmMgc2V0QWxsKG5ld09wdGlvbnMpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5fbWlncmF0aW9ucztcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldEFsbChuZXdPcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgc2V0KG5ld09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0QWxsKHtcbiAgICAgICAgICAgIC4uLmF3YWl0IHRoaXMuZ2V0QWxsKCksXG4gICAgICAgICAgICAuLi5uZXdPcHRpb25zXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBzeW5jRm9ybShmb3JtKSB7XG4gICAgICAgIHRoaXMuX2Zvcm0gPSBmb3JtIGluc3RhbmNlb2YgSFRNTEZvcm1FbGVtZW50ID8gZm9ybSA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZm9ybSk7XG4gICAgICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHRoaXMuX2hhbmRsZUZvcm1JbnB1dCk7XG4gICAgICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KTtcbiAgICAgICAgY2hyb21lLnN0b3JhZ2Uub25DaGFuZ2VkLmFkZExpc3RlbmVyKHRoaXMuX2hhbmRsZVN0b3JhZ2VDaGFuZ2VPbkZvcm0pO1xuICAgICAgICB0aGlzLl91cGRhdGVGb3JtKHRoaXMuX2Zvcm0sIGF3YWl0IHRoaXMuZ2V0QWxsKCkpO1xuICAgIH1cbiAgICBhc3luYyBzdG9wU3luY0Zvcm0oKSB7XG4gICAgICAgIGlmICh0aGlzLl9mb3JtKSB7XG4gICAgICAgICAgICB0aGlzLl9mb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCB0aGlzLl9oYW5kbGVGb3JtSW5wdXQpO1xuICAgICAgICAgICAgdGhpcy5fZm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQpO1xuICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2Uub25DaGFuZ2VkLnJlbW92ZUxpc3RlbmVyKHRoaXMuX2hhbmRsZVN0b3JhZ2VDaGFuZ2VPbkZvcm0pO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2Zvcm07XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2xvZyhtZXRob2QsIC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc29sZVttZXRob2RdKC4uLmFyZ3MpO1xuICAgIH1cbiAgICBhc3luYyBfZ2V0QWxsKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5nZXQodGhpcy5zdG9yYWdlTmFtZSwgKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yID8gcmVqZWN0KGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcikgOiByZXNvbHZlKHRoaXMuX2RlY29kZShyZXN1bHRbdGhpcy5zdG9yYWdlTmFtZV0pKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBhc3luYyBfc2V0QWxsKG5ld09wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fbG9nKFwibG9nXCIsIFwiU2F2aW5nIG9wdGlvbnNcIiwgbmV3T3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdG9yYWdlLnNldCh7XG4gICAgICAgICAgICAgICAgW3RoaXMuc3RvcmFnZU5hbWVdOiB0aGlzLl9lbmNvZGUobmV3T3B0aW9ucylcbiAgICAgICAgICAgIH0sICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yID8gcmVqZWN0KGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcikgOiByZXNvbHZlKCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgX2VuY29kZShvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHRoaW5uZWRPcHRpb25zID0ge1xuICAgICAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgICB9O1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGlubmVkT3B0aW9ucykpIHRoaXMuZGVmYXVsdHNba2V5XSA9PT0gdmFsdWUgJiYgZGVsZXRlIHRoaW5uZWRPcHRpb25zW2tleV07XG4gICAgICAgIHRoaXMuX2xvZyhcImxvZ1wiLCBcIldpdGhvdXQgdGhlIGRlZmF1bHQgdmFsdWVzXCIsIHRoaW5uZWRPcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGx6U3RyaW5nLmV4cG9ydHMuY29tcHJlc3NUb0VuY29kZWRVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkodGhpbm5lZE9wdGlvbnMpKTtcbiAgICB9XG4gICAgX2RlY29kZShvcHRpb25zKSB7XG4gICAgICAgIGxldCBkZWNvbXByZXNzZWQgPSBvcHRpb25zO1xuICAgICAgICBcInN0cmluZ1wiID09IHR5cGVvZiBvcHRpb25zICYmIChkZWNvbXByZXNzZWQgPSBKU09OLnBhcnNlKGx6U3RyaW5nLmV4cG9ydHMuZGVjb21wcmVzc0Zyb21FbmNvZGVkVVJJQ29tcG9uZW50KG9wdGlvbnMpKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi50aGlzLmRlZmF1bHRzLFxuICAgICAgICAgICAgLi4uZGVjb21wcmVzc2VkXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIF9ydW5NaWdyYXRpb25zKG1pZ3JhdGlvbnMpIHtcbiAgICAgICAgaWYgKDAgPT09IG1pZ3JhdGlvbnMubGVuZ3RoIHx8ICFpc0JhY2tncm91bmQoKSB8fCAhYXdhaXQgYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gaW5zdGFsbFR5cGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSBpbnN0YWxsVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21lLnJ1bnRpbWUub25JbnN0YWxsZWQuYWRkTGlzdGVuZXIoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChyZXNvbHZlLCA1MDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjaHJvbWUubWFuYWdlbWVudD8uZ2V0U2VsZiA/IGNocm9tZS5tYW5hZ2VtZW50LmdldFNlbGYoKCh7aW5zdGFsbFR5cGU6IGluc3RhbGxUeXBlfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhpbnN0YWxsVHlwZSk7XG4gICAgICAgICAgICAgICAgfSkpIDogY2FsbGJhY2soXCJ1bmtub3duXCIpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KCkpIHJldHVybjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGF3YWl0IHRoaXMuX2dldEFsbCgpO1xuICAgICAgICBjb25zdCBpbml0aWFsID0gSlNPTi5zdHJpbmdpZnkob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2xvZyhcImxvZ1wiLCBcIkZvdW5kIHRoZXNlIHN0b3JlZCBvcHRpb25zXCIsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2xvZyhcImluZm9cIiwgXCJXaWxsIHJ1blwiLCBtaWdyYXRpb25zLmxlbmd0aCwgMSA9PT0gbWlncmF0aW9ucy5sZW5ndGggPyBcIm1pZ3JhdGlvblwiIDogXCIgbWlncmF0aW9uc1wiKTtcbiAgICAgICAgZm9yIChjb25zdCBtaWdyYXRlIG9mIG1pZ3JhdGlvbnMpIG1pZ3JhdGUob3B0aW9ucywgdGhpcy5kZWZhdWx0cyk7XG4gICAgICAgIGluaXRpYWwgIT09IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpICYmIGF3YWl0IHRoaXMuX3NldEFsbChvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgX2hhbmRsZUZvcm1JbnB1dCh7dGFyZ2V0OiB0YXJnZXR9KSB7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gdGFyZ2V0O1xuICAgICAgICBpZiAoZmllbGQubmFtZSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXQodGhpcy5fcGFyc2VGb3JtKGZpZWxkLmZvcm0pKTtcbiAgICAgICAgICAgIGZpZWxkLmZvcm0uZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJvcHRpb25zLXN5bmM6Zm9ybS1zeW5jZWRcIiwge1xuICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWVcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaGFuZGxlRm9ybVN1Ym1pdChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBfdXBkYXRlRm9ybShmb3JtLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRGb3JtU3RhdGUgPSB0aGlzLl9wYXJzZUZvcm0oZm9ybSk7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9wdGlvbnMpKSBjdXJyZW50Rm9ybVN0YXRlW2tleV0gPT09IHZhbHVlICYmIGRlbGV0ZSBvcHRpb25zW2tleV07XG4gICAgICAgIGNvbnN0IGluY2x1ZGUgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgICAgICAgaW5jbHVkZS5sZW5ndGggPiAwICYmIGRlc2VyaWFsaXplKGZvcm0sIG9wdGlvbnMsIHtcbiAgICAgICAgICAgIGluY2x1ZGU6IGluY2x1ZGVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9wYXJzZUZvcm0oZm9ybSkge1xuICAgICAgICBjb25zdCBpbmNsdWRlID0gW107XG4gICAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgZm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWVdXCIpKSBmaWVsZC52YWxpZGl0eS52YWxpZCAmJiAhZmllbGQuZGlzYWJsZWQgJiYgaW5jbHVkZS5wdXNoKGZpZWxkLm5hbWUucmVwbGFjZSgvXFxbLipdLywgXCJcIikpO1xuICAgICAgICByZXR1cm4gc2VyaWFsaXplKGZvcm0sIHtcbiAgICAgICAgICAgIGluY2x1ZGU6IGluY2x1ZGVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9oYW5kbGVTdG9yYWdlQ2hhbmdlT25Gb3JtKGNoYW5nZXMsIGFyZWFOYW1lKSB7XG4gICAgICAgIGFyZWFOYW1lICE9PSB0aGlzLnN0b3JhZ2VUeXBlIHx8ICFjaGFuZ2VzW3RoaXMuc3RvcmFnZU5hbWVdIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkgJiYgdGhpcy5fZm9ybS5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB8fCB0aGlzLl91cGRhdGVGb3JtKHRoaXMuX2Zvcm0sIHRoaXMuX2RlY29kZShjaGFuZ2VzW3RoaXMuc3RvcmFnZU5hbWVdLm5ld1ZhbHVlKSk7XG4gICAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoT3B0aW9uc1N5bmMsIFwibWlncmF0aW9uc1wiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgdmFsdWU6IHtcbiAgICAgICAgcmVtb3ZlVW51c2VkKG9wdGlvbnMsIGRlZmF1bHRzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhvcHRpb25zKSkga2V5IGluIGRlZmF1bHRzIHx8IGRlbGV0ZSBvcHRpb25zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuZXhwb3J0IHsgT3B0aW9uc1N5bmMgYXMgZGVmYXVsdCB9O1xuIiwibGV0IGNhY2hlID0gdHJ1ZTtcbmV4cG9ydCBmdW5jdGlvbiBkaXNhYmxlV2ViZXh0RGV0ZWN0UGFnZUNhY2hlKCkge1xuICAgIGNhY2hlID0gZmFsc2U7XG59XG5mdW5jdGlvbiBpc0N1cnJlbnRQYXRobmFtZShwYXRoKSB7XG4gICAgaWYgKCFwYXRoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBwYXRobmFtZSB9ID0gbmV3IFVSTChwYXRoLCBsb2NhdGlvbi5vcmlnaW4pO1xuICAgICAgICByZXR1cm4gcGF0aG5hbWUgPT09IGxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRNYW5pZmVzdChfdmVyc2lvbikge1xuICAgIHJldHVybiBnbG9iYWxUaGlzLmNocm9tZT8ucnVudGltZT8uZ2V0TWFuaWZlc3Q/LigpO1xufVxuZnVuY3Rpb24gb25jZShmdW5jdGlvbl8pIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmICghY2FjaGUgfHwgdHlwZW9mIHJlc3VsdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmN0aW9uXygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn1cbi8qKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY29kZSBpcyBiZWluZyBydW4gb24gaHR0cChzKTovLyBwYWdlcyAoaXQgY291bGQgYmUgaW4gYSBjb250ZW50IHNjcmlwdCBvciByZWd1bGFyIHdlYiBjb250ZXh0KSAqL1xuZXhwb3J0IGNvbnN0IGlzV2ViUGFnZSA9IG9uY2UoKCkgPT4gZ2xvYmFsVGhpcy5sb2NhdGlvbj8ucHJvdG9jb2wuc3RhcnRzV2l0aCgnaHR0cCcpKTtcbi8qKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY29kZSBpcyBiZWluZyBydW4gaW4gZXh0ZW5zaW9uIGNvbnRleHRzIHRoYXQgaGF2ZSBhY2Nlc3MgdG8gdGhlIGNocm9tZSBBUEkgKi9cbmV4cG9ydCBjb25zdCBpc0V4dGVuc2lvbkNvbnRleHQgPSBvbmNlKCgpID0+IHR5cGVvZiBnbG9iYWxUaGlzLmNocm9tZT8uZXh0ZW5zaW9uID09PSAnb2JqZWN0Jyk7XG4vKiogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGNvZGUgaXMgYmVpbmcgcnVuIGluIGEgY29udGVudCBzY3JpcHQgKi9cbmV4cG9ydCBjb25zdCBpc0NvbnRlbnRTY3JpcHQgPSBvbmNlKCgpID0+IGlzRXh0ZW5zaW9uQ29udGV4dCgpICYmIGlzV2ViUGFnZSgpKTtcbi8qKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY29kZSBpcyBiZWluZyBydW4gaW4gYSBiYWNrZ3JvdW5kIGNvbnRleHQgKi9cbmV4cG9ydCBjb25zdCBpc0JhY2tncm91bmQgPSAoKSA9PiBpc0JhY2tncm91bmRQYWdlKCkgfHwgaXNCYWNrZ3JvdW5kV29ya2VyKCk7XG4vKiogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGNvZGUgaXMgYmVpbmcgcnVuIGluIGEgYmFja2dyb3VuZCBwYWdlICovXG5leHBvcnQgY29uc3QgaXNCYWNrZ3JvdW5kUGFnZSA9IG9uY2UoKCkgPT4ge1xuICAgIGNvbnN0IG1hbmlmZXN0ID0gZ2V0TWFuaWZlc3QoMik7XG4gICAgaWYgKG1hbmlmZXN0XG4gICAgICAgICYmIGlzQ3VycmVudFBhdGhuYW1lKG1hbmlmZXN0LmJhY2tncm91bmRfcGFnZSB8fCBtYW5pZmVzdC5iYWNrZ3JvdW5kPy5wYWdlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIEJvb2xlYW4obWFuaWZlc3Q/LmJhY2tncm91bmQ/LnNjcmlwdHNcbiAgICAgICAgJiYgaXNDdXJyZW50UGF0aG5hbWUoJy9fZ2VuZXJhdGVkX2JhY2tncm91bmRfcGFnZS5odG1sJykpO1xufSk7XG4vKiogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGNvZGUgaXMgYmVpbmcgcnVuIGluIGEgYmFja2dyb3VuZCB3b3JrZXIgKi9cbmV4cG9ydCBjb25zdCBpc0JhY2tncm91bmRXb3JrZXIgPSBvbmNlKCgpID0+IGlzQ3VycmVudFBhdGhuYW1lKGdldE1hbmlmZXN0KDMpPy5iYWNrZ3JvdW5kPy5zZXJ2aWNlX3dvcmtlcikpO1xuLyoqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBjb2RlIGlzIGJlaW5nIHJ1biBpbiBhbiBvcHRpb25zIHBhZ2UuIFRoaXMgb25seSB3b3JrcyBpZiB0aGUgY3VycmVudCBwYWdl4oCZcyBVUkwgbWF0Y2hlcyB0aGUgb25lIHNwZWNpZmllZCBpbiB0aGUgZXh0ZW5zaW9uJ3MgYG1hbmlmZXN0Lmpzb25gICovXG5leHBvcnQgY29uc3QgaXNPcHRpb25zUGFnZSA9IG9uY2UoKCkgPT4ge1xuICAgIGlmICghaXNFeHRlbnNpb25Db250ZXh0KCkgfHwgIWNocm9tZS5ydW50aW1lLmdldE1hbmlmZXN0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgeyBvcHRpb25zX3VpOiBvcHRpb25zVWkgfSA9IGNocm9tZS5ydW50aW1lLmdldE1hbmlmZXN0KCk7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zVWk/LnBhZ2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChvcHRpb25zVWkucGFnZSwgbG9jYXRpb24ub3JpZ2luKTtcbiAgICByZXR1cm4gdXJsLnBhdGhuYW1lID09PSBsb2NhdGlvbi5wYXRobmFtZTtcbn0pO1xuLyoqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBjb2RlIGlzIGJlaW5nIHJ1biBpbiBhIGRldiB0b29scyBwYWdlLiBUaGlzIG9ubHkgd29ya3MgaWYgdGhlIGN1cnJlbnQgcGFnZeKAmXMgVVJMIG1hdGNoZXMgdGhlIG9uZSBzcGVjaWZpZWQgaW4gdGhlIGV4dGVuc2lvbidzIGBtYW5pZmVzdC5qc29uYCBgZGV2dG9vbHNfcGFnZWAgZmllbGQuICovXG5leHBvcnQgY29uc3QgaXNEZXZUb29sc1BhZ2UgPSBvbmNlKCgpID0+IHtcbiAgICBpZiAoIWlzRXh0ZW5zaW9uQ29udGV4dCgpIHx8ICFjaHJvbWUuZGV2dG9vbHMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB7IGRldnRvb2xzX3BhZ2U6IGRldnRvb2xzUGFnZSB9ID0gY2hyb21lLnJ1bnRpbWUuZ2V0TWFuaWZlc3QoKTtcbiAgICBpZiAodHlwZW9mIGRldnRvb2xzUGFnZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGRldnRvb2xzUGFnZSwgbG9jYXRpb24ub3JpZ2luKTtcbiAgICByZXR1cm4gdXJsLnBhdGhuYW1lID09PSBsb2NhdGlvbi5wYXRobmFtZTtcbn0pO1xuLyoqIExvb3NlbHkgZGV0ZWN0IEZpcmVmb3ggdmlhIHVzZXIgYWdlbnQgKi9cbmV4cG9ydCBjb25zdCBpc0ZpcmVmb3ggPSAoKSA9PiBnbG9iYWxUaGlzLm5hdmlnYXRvcj8udXNlckFnZW50LmluY2x1ZGVzKCdGaXJlZm94Jyk7XG4vKiogTG9vc2VseSBkZXRlY3QgQ2hyb21lIHZpYSB1c2VyIGFnZW50IChtaWdodCBhbHNvIGluY2x1ZGUgQ2hyb21pdW0gYW5kIGZvcmtzIGxpa2UgT3BlcmEpICovXG5leHBvcnQgY29uc3QgaXNDaHJvbWUgPSAoKSA9PiBnbG9iYWxUaGlzLm5hdmlnYXRvcj8udXNlckFnZW50LmluY2x1ZGVzKCdDaHJvbWUnKTtcbi8qKiBMb29zZWx5IGRldGVjdCBTYWZhcmkgdmlhIHVzZXIgYWdlbnQgKi9cbmV4cG9ydCBjb25zdCBpc1NhZmFyaSA9ICgpID0+ICFpc0Nocm9tZSgpICYmIGdsb2JhbFRoaXMubmF2aWdhdG9yPy51c2VyQWdlbnQuaW5jbHVkZXMoJ1NhZmFyaScpO1xuZXhwb3J0IGNvbnN0IGNvbnRleHROYW1lcyA9IHtcbiAgICBjb250ZW50U2NyaXB0OiBpc0NvbnRlbnRTY3JpcHQsXG4gICAgYmFja2dyb3VuZDogaXNCYWNrZ3JvdW5kLFxuICAgIG9wdGlvbnM6IGlzT3B0aW9uc1BhZ2UsXG4gICAgZGV2VG9vbHNQYWdlOiBpc0RldlRvb2xzUGFnZSxcbiAgICBleHRlbnNpb246IGlzRXh0ZW5zaW9uQ29udGV4dCxcbiAgICB3ZWI6IGlzV2ViUGFnZSxcbn07XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udGV4dE5hbWUoKSB7XG4gICAgZm9yIChjb25zdCBbbmFtZSwgdGVzdF0gb2YgT2JqZWN0LmVudHJpZXMoY29udGV4dE5hbWVzKSkge1xuICAgICAgICBpZiAodGVzdCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJ3Vua25vd24nO1xufVxuIiwiZXhwb3J0cy5pbnRlcm9wRGVmYXVsdCA9IGZ1bmN0aW9uIChhKSB7XG4gIHJldHVybiBhICYmIGEuX19lc01vZHVsZSA/IGEgOiB7ZGVmYXVsdDogYX07XG59O1xuXG5leHBvcnRzLmRlZmluZUludGVyb3BGbGFnID0gZnVuY3Rpb24gKGEpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsICdfX2VzTW9kdWxlJywge3ZhbHVlOiB0cnVlfSk7XG59O1xuXG5leHBvcnRzLmV4cG9ydEFsbCA9IGZ1bmN0aW9uIChzb3VyY2UsIGRlc3QpIHtcbiAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoa2V5ID09PSAnZGVmYXVsdCcgfHwga2V5ID09PSAnX19lc01vZHVsZScgfHwgZGVzdC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlc3QsIGtleSwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc291cmNlW2tleV07XG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gZGVzdDtcbn07XG5cbmV4cG9ydHMuZXhwb3J0ID0gZnVuY3Rpb24gKGRlc3QsIGRlc3ROYW1lLCBnZXQpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlc3QsIGRlc3ROYW1lLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGdldCxcbiAgfSk7XG59O1xuIiwidmFyIG4sbCx1LGksdCxvLHIsZj17fSxlPVtdLGM9L2FjaXR8ZXgoPzpzfGd8bnxwfCQpfHJwaHxncmlkfG93c3xtbmN8bnR3fGluZVtjaF18em9vfF5vcmR8aXRlcmEvaTtmdW5jdGlvbiBzKG4sbCl7Zm9yKHZhciB1IGluIGwpblt1XT1sW3VdO3JldHVybiBufWZ1bmN0aW9uIGEobil7dmFyIGw9bi5wYXJlbnROb2RlO2wmJmwucmVtb3ZlQ2hpbGQobil9ZnVuY3Rpb24gaChsLHUsaSl7dmFyIHQsbyxyLGY9e307Zm9yKHIgaW4gdSlcImtleVwiPT1yP3Q9dVtyXTpcInJlZlwiPT1yP289dVtyXTpmW3JdPXVbcl07aWYoYXJndW1lbnRzLmxlbmd0aD4yJiYoZi5jaGlsZHJlbj1hcmd1bWVudHMubGVuZ3RoPjM/bi5jYWxsKGFyZ3VtZW50cywyKTppKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBsJiZudWxsIT1sLmRlZmF1bHRQcm9wcylmb3IociBpbiBsLmRlZmF1bHRQcm9wcyl2b2lkIDA9PT1mW3JdJiYoZltyXT1sLmRlZmF1bHRQcm9wc1tyXSk7cmV0dXJuIHYobCxmLHQsbyxudWxsKX1mdW5jdGlvbiB2KG4saSx0LG8scil7dmFyIGY9e3R5cGU6bixwcm9wczppLGtleTp0LHJlZjpvLF9fazpudWxsLF9fOm51bGwsX19iOjAsX19lOm51bGwsX19kOnZvaWQgMCxfX2M6bnVsbCxfX2g6bnVsbCxjb25zdHJ1Y3Rvcjp2b2lkIDAsX192Om51bGw9PXI/Kyt1OnJ9O3JldHVybiBudWxsPT1yJiZudWxsIT1sLnZub2RlJiZsLnZub2RlKGYpLGZ9ZnVuY3Rpb24geSgpe3JldHVybntjdXJyZW50Om51bGx9fWZ1bmN0aW9uIHAobil7cmV0dXJuIG4uY2hpbGRyZW59ZnVuY3Rpb24gZChuLGwpe3RoaXMucHJvcHM9bix0aGlzLmNvbnRleHQ9bH1mdW5jdGlvbiBfKG4sbCl7aWYobnVsbD09bClyZXR1cm4gbi5fXz9fKG4uX18sbi5fXy5fX2suaW5kZXhPZihuKSsxKTpudWxsO2Zvcih2YXIgdTtsPG4uX19rLmxlbmd0aDtsKyspaWYobnVsbCE9KHU9bi5fX2tbbF0pJiZudWxsIT11Ll9fZSlyZXR1cm4gdS5fX2U7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2Ygbi50eXBlP18obik6bnVsbH1mdW5jdGlvbiBrKG4pe3ZhciBsLHU7aWYobnVsbCE9KG49bi5fXykmJm51bGwhPW4uX19jKXtmb3Iobi5fX2U9bi5fX2MuYmFzZT1udWxsLGw9MDtsPG4uX19rLmxlbmd0aDtsKyspaWYobnVsbCE9KHU9bi5fX2tbbF0pJiZudWxsIT11Ll9fZSl7bi5fX2U9bi5fX2MuYmFzZT11Ll9fZTticmVha31yZXR1cm4gayhuKX19ZnVuY3Rpb24gYihuKXsoIW4uX19kJiYobi5fX2Q9ITApJiZ0LnB1c2gobikmJiFnLl9fcisrfHxvIT09bC5kZWJvdW5jZVJlbmRlcmluZykmJigobz1sLmRlYm91bmNlUmVuZGVyaW5nKXx8c2V0VGltZW91dCkoZyl9ZnVuY3Rpb24gZygpe2Zvcih2YXIgbjtnLl9fcj10Lmxlbmd0aDspbj10LnNvcnQoZnVuY3Rpb24obixsKXtyZXR1cm4gbi5fX3YuX19iLWwuX192Ll9fYn0pLHQ9W10sbi5zb21lKGZ1bmN0aW9uKG4pe3ZhciBsLHUsaSx0LG8scjtuLl9fZCYmKG89KHQ9KGw9bikuX192KS5fX2UsKHI9bC5fX1ApJiYodT1bXSwoaT1zKHt9LHQpKS5fX3Y9dC5fX3YrMSxqKHIsdCxpLGwuX19uLHZvaWQgMCE9PXIub3duZXJTVkdFbGVtZW50LG51bGwhPXQuX19oP1tvXTpudWxsLHUsbnVsbD09bz9fKHQpOm8sdC5fX2gpLHoodSx0KSx0Ll9fZSE9byYmayh0KSkpfSl9ZnVuY3Rpb24gdyhuLGwsdSxpLHQsbyxyLGMscyxhKXt2YXIgaCx5LGQsayxiLGcsdyx4PWkmJmkuX19rfHxlLEM9eC5sZW5ndGg7Zm9yKHUuX19rPVtdLGg9MDtoPGwubGVuZ3RoO2grKylpZihudWxsIT0oaz11Ll9fa1toXT1udWxsPT0oaz1sW2hdKXx8XCJib29sZWFuXCI9PXR5cGVvZiBrP251bGw6XCJzdHJpbmdcIj09dHlwZW9mIGt8fFwibnVtYmVyXCI9PXR5cGVvZiBrfHxcImJpZ2ludFwiPT10eXBlb2Ygaz92KG51bGwsayxudWxsLG51bGwsayk6QXJyYXkuaXNBcnJheShrKT92KHAse2NoaWxkcmVuOmt9LG51bGwsbnVsbCxudWxsKTprLl9fYj4wP3Yoay50eXBlLGsucHJvcHMsay5rZXksbnVsbCxrLl9fdik6aykpe2lmKGsuX189dSxrLl9fYj11Ll9fYisxLG51bGw9PT0oZD14W2hdKXx8ZCYmay5rZXk9PWQua2V5JiZrLnR5cGU9PT1kLnR5cGUpeFtoXT12b2lkIDA7ZWxzZSBmb3IoeT0wO3k8Qzt5Kyspe2lmKChkPXhbeV0pJiZrLmtleT09ZC5rZXkmJmsudHlwZT09PWQudHlwZSl7eFt5XT12b2lkIDA7YnJlYWt9ZD1udWxsfWoobixrLGQ9ZHx8Zix0LG8scixjLHMsYSksYj1rLl9fZSwoeT1rLnJlZikmJmQucmVmIT15JiYod3x8KHc9W10pLGQucmVmJiZ3LnB1c2goZC5yZWYsbnVsbCxrKSx3LnB1c2goeSxrLl9fY3x8YixrKSksbnVsbCE9Yj8obnVsbD09ZyYmKGc9YiksXCJmdW5jdGlvblwiPT10eXBlb2Ygay50eXBlJiZrLl9faz09PWQuX19rP2suX19kPXM9bShrLHMsbik6cz1BKG4sayxkLHgsYixzKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB1LnR5cGUmJih1Ll9fZD1zKSk6cyYmZC5fX2U9PXMmJnMucGFyZW50Tm9kZSE9biYmKHM9XyhkKSl9Zm9yKHUuX19lPWcsaD1DO2gtLTspbnVsbCE9eFtoXSYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHUudHlwZSYmbnVsbCE9eFtoXS5fX2UmJnhbaF0uX19lPT11Ll9fZCYmKHUuX19kPV8oaSxoKzEpKSxOKHhbaF0seFtoXSkpO2lmKHcpZm9yKGg9MDtoPHcubGVuZ3RoO2grKylNKHdbaF0sd1srK2hdLHdbKytoXSl9ZnVuY3Rpb24gbShuLGwsdSl7Zm9yKHZhciBpLHQ9bi5fX2ssbz0wO3QmJm88dC5sZW5ndGg7bysrKShpPXRbb10pJiYoaS5fXz1uLGw9XCJmdW5jdGlvblwiPT10eXBlb2YgaS50eXBlP20oaSxsLHUpOkEodSxpLGksdCxpLl9fZSxsKSk7cmV0dXJuIGx9ZnVuY3Rpb24geChuLGwpe3JldHVybiBsPWx8fFtdLG51bGw9PW58fFwiYm9vbGVhblwiPT10eXBlb2Ygbnx8KEFycmF5LmlzQXJyYXkobik/bi5zb21lKGZ1bmN0aW9uKG4pe3gobixsKX0pOmwucHVzaChuKSksbH1mdW5jdGlvbiBBKG4sbCx1LGksdCxvKXt2YXIgcixmLGU7aWYodm9pZCAwIT09bC5fX2Qpcj1sLl9fZCxsLl9fZD12b2lkIDA7ZWxzZSBpZihudWxsPT11fHx0IT1vfHxudWxsPT10LnBhcmVudE5vZGUpbjppZihudWxsPT1vfHxvLnBhcmVudE5vZGUhPT1uKW4uYXBwZW5kQ2hpbGQodCkscj1udWxsO2Vsc2V7Zm9yKGY9byxlPTA7KGY9Zi5uZXh0U2libGluZykmJmU8aS5sZW5ndGg7ZSs9MilpZihmPT10KWJyZWFrIG47bi5pbnNlcnRCZWZvcmUodCxvKSxyPW99cmV0dXJuIHZvaWQgMCE9PXI/cjp0Lm5leHRTaWJsaW5nfWZ1bmN0aW9uIEMobixsLHUsaSx0KXt2YXIgbztmb3IobyBpbiB1KVwiY2hpbGRyZW5cIj09PW98fFwia2V5XCI9PT1vfHxvIGluIGx8fEgobixvLG51bGwsdVtvXSxpKTtmb3IobyBpbiBsKXQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGxbb118fFwiY2hpbGRyZW5cIj09PW98fFwia2V5XCI9PT1vfHxcInZhbHVlXCI9PT1vfHxcImNoZWNrZWRcIj09PW98fHVbb109PT1sW29dfHxIKG4sbyxsW29dLHVbb10saSl9ZnVuY3Rpb24gJChuLGwsdSl7XCItXCI9PT1sWzBdP24uc2V0UHJvcGVydHkobCx1KTpuW2xdPW51bGw9PXU/XCJcIjpcIm51bWJlclwiIT10eXBlb2YgdXx8Yy50ZXN0KGwpP3U6dStcInB4XCJ9ZnVuY3Rpb24gSChuLGwsdSxpLHQpe3ZhciBvO246aWYoXCJzdHlsZVwiPT09bClpZihcInN0cmluZ1wiPT10eXBlb2YgdSluLnN0eWxlLmNzc1RleHQ9dTtlbHNle2lmKFwic3RyaW5nXCI9PXR5cGVvZiBpJiYobi5zdHlsZS5jc3NUZXh0PWk9XCJcIiksaSlmb3IobCBpbiBpKXUmJmwgaW4gdXx8JChuLnN0eWxlLGwsXCJcIik7aWYodSlmb3IobCBpbiB1KWkmJnVbbF09PT1pW2xdfHwkKG4uc3R5bGUsbCx1W2xdKX1lbHNlIGlmKFwib1wiPT09bFswXSYmXCJuXCI9PT1sWzFdKW89bCE9PShsPWwucmVwbGFjZSgvQ2FwdHVyZSQvLFwiXCIpKSxsPWwudG9Mb3dlckNhc2UoKWluIG4/bC50b0xvd2VyQ2FzZSgpLnNsaWNlKDIpOmwuc2xpY2UoMiksbi5sfHwobi5sPXt9KSxuLmxbbCtvXT11LHU/aXx8bi5hZGRFdmVudExpc3RlbmVyKGwsbz9UOkksbyk6bi5yZW1vdmVFdmVudExpc3RlbmVyKGwsbz9UOkksbyk7ZWxzZSBpZihcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sKXtpZih0KWw9bC5yZXBsYWNlKC94bGluayhIfDpoKS8sXCJoXCIpLnJlcGxhY2UoL3NOYW1lJC8sXCJzXCIpO2Vsc2UgaWYoXCJocmVmXCIhPT1sJiZcImxpc3RcIiE9PWwmJlwiZm9ybVwiIT09bCYmXCJ0YWJJbmRleFwiIT09bCYmXCJkb3dubG9hZFwiIT09bCYmbCBpbiBuKXRyeXtuW2xdPW51bGw9PXU/XCJcIjp1O2JyZWFrIG59Y2F0Y2gobil7fVwiZnVuY3Rpb25cIj09dHlwZW9mIHV8fChudWxsIT11JiYoITEhPT11fHxcImFcIj09PWxbMF0mJlwiclwiPT09bFsxXSk/bi5zZXRBdHRyaWJ1dGUobCx1KTpuLnJlbW92ZUF0dHJpYnV0ZShsKSl9fWZ1bmN0aW9uIEkobil7dGhpcy5sW24udHlwZSshMV0obC5ldmVudD9sLmV2ZW50KG4pOm4pfWZ1bmN0aW9uIFQobil7dGhpcy5sW24udHlwZSshMF0obC5ldmVudD9sLmV2ZW50KG4pOm4pfWZ1bmN0aW9uIGoobix1LGksdCxvLHIsZixlLGMpe3ZhciBhLGgsdix5LF8sayxiLGcsbSx4LEEsQywkLEg9dS50eXBlO2lmKHZvaWQgMCE9PXUuY29uc3RydWN0b3IpcmV0dXJuIG51bGw7bnVsbCE9aS5fX2gmJihjPWkuX19oLGU9dS5fX2U9aS5fX2UsdS5fX2g9bnVsbCxyPVtlXSksKGE9bC5fX2IpJiZhKHUpO3RyeXtuOmlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIEgpe2lmKGc9dS5wcm9wcyxtPShhPUguY29udGV4dFR5cGUpJiZ0W2EuX19jXSx4PWE/bT9tLnByb3BzLnZhbHVlOmEuX186dCxpLl9fYz9iPShoPXUuX19jPWkuX19jKS5fXz1oLl9fRTooXCJwcm90b3R5cGVcImluIEgmJkgucHJvdG90eXBlLnJlbmRlcj91Ll9fYz1oPW5ldyBIKGcseCk6KHUuX19jPWg9bmV3IGQoZyx4KSxoLmNvbnN0cnVjdG9yPUgsaC5yZW5kZXI9TyksbSYmbS5zdWIoaCksaC5wcm9wcz1nLGguc3RhdGV8fChoLnN0YXRlPXt9KSxoLmNvbnRleHQ9eCxoLl9fbj10LHY9aC5fX2Q9ITAsaC5fX2g9W10pLG51bGw9PWguX19zJiYoaC5fX3M9aC5zdGF0ZSksbnVsbCE9SC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJihoLl9fcz09aC5zdGF0ZSYmKGguX19zPXMoe30saC5fX3MpKSxzKGguX19zLEguZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKGcsaC5fX3MpKSkseT1oLnByb3BzLF89aC5zdGF0ZSx2KW51bGw9PUguZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZudWxsIT1oLmNvbXBvbmVudFdpbGxNb3VudCYmaC5jb21wb25lbnRXaWxsTW91bnQoKSxudWxsIT1oLmNvbXBvbmVudERpZE1vdW50JiZoLl9faC5wdXNoKGguY29tcG9uZW50RGlkTW91bnQpO2Vsc2V7aWYobnVsbD09SC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJmchPT15JiZudWxsIT1oLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmguY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhnLHgpLCFoLl9fZSYmbnVsbCE9aC5zaG91bGRDb21wb25lbnRVcGRhdGUmJiExPT09aC5zaG91bGRDb21wb25lbnRVcGRhdGUoZyxoLl9fcyx4KXx8dS5fX3Y9PT1pLl9fdil7aC5wcm9wcz1nLGguc3RhdGU9aC5fX3MsdS5fX3YhPT1pLl9fdiYmKGguX19kPSExKSxoLl9fdj11LHUuX19lPWkuX19lLHUuX19rPWkuX19rLHUuX19rLmZvckVhY2goZnVuY3Rpb24obil7biYmKG4uX189dSl9KSxoLl9faC5sZW5ndGgmJmYucHVzaChoKTticmVhayBufW51bGwhPWguY29tcG9uZW50V2lsbFVwZGF0ZSYmaC5jb21wb25lbnRXaWxsVXBkYXRlKGcsaC5fX3MseCksbnVsbCE9aC5jb21wb25lbnREaWRVcGRhdGUmJmguX19oLnB1c2goZnVuY3Rpb24oKXtoLmNvbXBvbmVudERpZFVwZGF0ZSh5LF8sayl9KX1pZihoLmNvbnRleHQ9eCxoLnByb3BzPWcsaC5fX3Y9dSxoLl9fUD1uLEE9bC5fX3IsQz0wLFwicHJvdG90eXBlXCJpbiBIJiZILnByb3RvdHlwZS5yZW5kZXIpaC5zdGF0ZT1oLl9fcyxoLl9fZD0hMSxBJiZBKHUpLGE9aC5yZW5kZXIoaC5wcm9wcyxoLnN0YXRlLGguY29udGV4dCk7ZWxzZSBkb3toLl9fZD0hMSxBJiZBKHUpLGE9aC5yZW5kZXIoaC5wcm9wcyxoLnN0YXRlLGguY29udGV4dCksaC5zdGF0ZT1oLl9fc313aGlsZShoLl9fZCYmKytDPDI1KTtoLnN0YXRlPWguX19zLG51bGwhPWguZ2V0Q2hpbGRDb250ZXh0JiYodD1zKHMoe30sdCksaC5nZXRDaGlsZENvbnRleHQoKSkpLHZ8fG51bGw9PWguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fChrPWguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoeSxfKSksJD1udWxsIT1hJiZhLnR5cGU9PT1wJiZudWxsPT1hLmtleT9hLnByb3BzLmNoaWxkcmVuOmEsdyhuLEFycmF5LmlzQXJyYXkoJCk/JDpbJF0sdSxpLHQsbyxyLGYsZSxjKSxoLmJhc2U9dS5fX2UsdS5fX2g9bnVsbCxoLl9faC5sZW5ndGgmJmYucHVzaChoKSxiJiYoaC5fX0U9aC5fXz1udWxsKSxoLl9fZT0hMX1lbHNlIG51bGw9PXImJnUuX192PT09aS5fX3Y/KHUuX19rPWkuX19rLHUuX19lPWkuX19lKTp1Ll9fZT1MKGkuX19lLHUsaSx0LG8scixmLGMpOyhhPWwuZGlmZmVkKSYmYSh1KX1jYXRjaChuKXt1Ll9fdj1udWxsLChjfHxudWxsIT1yKSYmKHUuX19lPWUsdS5fX2g9ISFjLHJbci5pbmRleE9mKGUpXT1udWxsKSxsLl9fZShuLHUsaSl9fWZ1bmN0aW9uIHoobix1KXtsLl9fYyYmbC5fX2ModSxuKSxuLnNvbWUoZnVuY3Rpb24odSl7dHJ5e249dS5fX2gsdS5fX2g9W10sbi5zb21lKGZ1bmN0aW9uKG4pe24uY2FsbCh1KX0pfWNhdGNoKG4pe2wuX19lKG4sdS5fX3YpfX0pfWZ1bmN0aW9uIEwobCx1LGksdCxvLHIsZSxjKXt2YXIgcyxoLHYseT1pLnByb3BzLHA9dS5wcm9wcyxkPXUudHlwZSxrPTA7aWYoXCJzdmdcIj09PWQmJihvPSEwKSxudWxsIT1yKWZvcig7azxyLmxlbmd0aDtrKyspaWYoKHM9cltrXSkmJlwic2V0QXR0cmlidXRlXCJpbiBzPT0hIWQmJihkP3MubG9jYWxOYW1lPT09ZDozPT09cy5ub2RlVHlwZSkpe2w9cyxyW2tdPW51bGw7YnJlYWt9aWYobnVsbD09bCl7aWYobnVsbD09PWQpcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHApO2w9bz9kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLGQpOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZCxwLmlzJiZwKSxyPW51bGwsYz0hMX1pZihudWxsPT09ZCl5PT09cHx8YyYmbC5kYXRhPT09cHx8KGwuZGF0YT1wKTtlbHNle2lmKHI9ciYmbi5jYWxsKGwuY2hpbGROb2RlcyksaD0oeT1pLnByb3BzfHxmKS5kYW5nZXJvdXNseVNldElubmVySFRNTCx2PXAuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsIWMpe2lmKG51bGwhPXIpZm9yKHk9e30saz0wO2s8bC5hdHRyaWJ1dGVzLmxlbmd0aDtrKyspeVtsLmF0dHJpYnV0ZXNba10ubmFtZV09bC5hdHRyaWJ1dGVzW2tdLnZhbHVlOyh2fHxoKSYmKHYmJihoJiZ2Ll9faHRtbD09aC5fX2h0bWx8fHYuX19odG1sPT09bC5pbm5lckhUTUwpfHwobC5pbm5lckhUTUw9diYmdi5fX2h0bWx8fFwiXCIpKX1pZihDKGwscCx5LG8sYyksdil1Ll9faz1bXTtlbHNlIGlmKGs9dS5wcm9wcy5jaGlsZHJlbix3KGwsQXJyYXkuaXNBcnJheShrKT9rOltrXSx1LGksdCxvJiZcImZvcmVpZ25PYmplY3RcIiE9PWQscixlLHI/clswXTppLl9fayYmXyhpLDApLGMpLG51bGwhPXIpZm9yKGs9ci5sZW5ndGg7ay0tOyludWxsIT1yW2tdJiZhKHJba10pO2N8fChcInZhbHVlXCJpbiBwJiZ2b2lkIDAhPT0oaz1wLnZhbHVlKSYmKGshPT1sLnZhbHVlfHxcInByb2dyZXNzXCI9PT1kJiYha3x8XCJvcHRpb25cIj09PWQmJmshPT15LnZhbHVlKSYmSChsLFwidmFsdWVcIixrLHkudmFsdWUsITEpLFwiY2hlY2tlZFwiaW4gcCYmdm9pZCAwIT09KGs9cC5jaGVja2VkKSYmayE9PWwuY2hlY2tlZCYmSChsLFwiY2hlY2tlZFwiLGsseS5jaGVja2VkLCExKSl9cmV0dXJuIGx9ZnVuY3Rpb24gTShuLHUsaSl7dHJ5e1wiZnVuY3Rpb25cIj09dHlwZW9mIG4/bih1KTpuLmN1cnJlbnQ9dX1jYXRjaChuKXtsLl9fZShuLGkpfX1mdW5jdGlvbiBOKG4sdSxpKXt2YXIgdCxvO2lmKGwudW5tb3VudCYmbC51bm1vdW50KG4pLCh0PW4ucmVmKSYmKHQuY3VycmVudCYmdC5jdXJyZW50IT09bi5fX2V8fE0odCxudWxsLHUpKSxudWxsIT0odD1uLl9fYykpe2lmKHQuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e3QuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChuKXtsLl9fZShuLHUpfXQuYmFzZT10Ll9fUD1udWxsfWlmKHQ9bi5fX2spZm9yKG89MDtvPHQubGVuZ3RoO28rKyl0W29dJiZOKHRbb10sdSxcImZ1bmN0aW9uXCIhPXR5cGVvZiBuLnR5cGUpO2l8fG51bGw9PW4uX19lfHxhKG4uX19lKSxuLl9fZT1uLl9fZD12b2lkIDB9ZnVuY3Rpb24gTyhuLGwsdSl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3Iobix1KX1mdW5jdGlvbiBQKHUsaSx0KXt2YXIgbyxyLGU7bC5fXyYmbC5fXyh1LGkpLHI9KG89XCJmdW5jdGlvblwiPT10eXBlb2YgdCk/bnVsbDp0JiZ0Ll9fa3x8aS5fX2ssZT1bXSxqKGksdT0oIW8mJnR8fGkpLl9faz1oKHAsbnVsbCxbdV0pLHJ8fGYsZix2b2lkIDAhPT1pLm93bmVyU1ZHRWxlbWVudCwhbyYmdD9bdF06cj9udWxsOmkuZmlyc3RDaGlsZD9uLmNhbGwoaS5jaGlsZE5vZGVzKTpudWxsLGUsIW8mJnQ/dDpyP3IuX19lOmkuZmlyc3RDaGlsZCxvKSx6KGUsdSl9ZnVuY3Rpb24gUyhuLGwpe1AobixsLFMpfWZ1bmN0aW9uIHEobCx1LGkpe3ZhciB0LG8scixmPXMoe30sbC5wcm9wcyk7Zm9yKHIgaW4gdSlcImtleVwiPT1yP3Q9dVtyXTpcInJlZlwiPT1yP289dVtyXTpmW3JdPXVbcl07cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+MiYmKGYuY2hpbGRyZW49YXJndW1lbnRzLmxlbmd0aD4zP24uY2FsbChhcmd1bWVudHMsMik6aSksdihsLnR5cGUsZix0fHxsLmtleSxvfHxsLnJlZixudWxsKX1mdW5jdGlvbiBCKG4sbCl7dmFyIHU9e19fYzpsPVwiX19jQ1wiK3IrKyxfXzpuLENvbnN1bWVyOmZ1bmN0aW9uKG4sbCl7cmV0dXJuIG4uY2hpbGRyZW4obCl9LFByb3ZpZGVyOmZ1bmN0aW9uKG4pe3ZhciB1LGk7cmV0dXJuIHRoaXMuZ2V0Q2hpbGRDb250ZXh0fHwodT1bXSwoaT17fSlbbF09dGhpcyx0aGlzLmdldENoaWxkQ29udGV4dD1mdW5jdGlvbigpe3JldHVybiBpfSx0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZT1mdW5jdGlvbihuKXt0aGlzLnByb3BzLnZhbHVlIT09bi52YWx1ZSYmdS5zb21lKGIpfSx0aGlzLnN1Yj1mdW5jdGlvbihuKXt1LnB1c2gobik7dmFyIGw9bi5jb21wb25lbnRXaWxsVW5tb3VudDtuLmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uKCl7dS5zcGxpY2UodS5pbmRleE9mKG4pLDEpLGwmJmwuY2FsbChuKX19KSxuLmNoaWxkcmVufX07cmV0dXJuIHUuUHJvdmlkZXIuX189dS5Db25zdW1lci5jb250ZXh0VHlwZT11fW49ZS5zbGljZSxsPXtfX2U6ZnVuY3Rpb24obixsLHUsaSl7Zm9yKHZhciB0LG8scjtsPWwuX187KWlmKCh0PWwuX19jKSYmIXQuX18pdHJ5e2lmKChvPXQuY29uc3RydWN0b3IpJiZudWxsIT1vLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciYmKHQuc2V0U3RhdGUoby5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IobikpLHI9dC5fX2QpLG51bGwhPXQuY29tcG9uZW50RGlkQ2F0Y2gmJih0LmNvbXBvbmVudERpZENhdGNoKG4saXx8e30pLHI9dC5fX2QpLHIpcmV0dXJuIHQuX19FPXR9Y2F0Y2gobCl7bj1sfXRocm93IG59fSx1PTAsaT1mdW5jdGlvbihuKXtyZXR1cm4gbnVsbCE9biYmdm9pZCAwPT09bi5jb25zdHJ1Y3Rvcn0sZC5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24obixsKXt2YXIgdTt1PW51bGwhPXRoaXMuX19zJiZ0aGlzLl9fcyE9PXRoaXMuc3RhdGU/dGhpcy5fX3M6dGhpcy5fX3M9cyh7fSx0aGlzLnN0YXRlKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYobj1uKHMoe30sdSksdGhpcy5wcm9wcykpLG4mJnModSxuKSxudWxsIT1uJiZ0aGlzLl9fdiYmKGwmJnRoaXMuX19oLnB1c2gobCksYih0aGlzKSl9LGQucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKG4pe3RoaXMuX192JiYodGhpcy5fX2U9ITAsbiYmdGhpcy5fX2gucHVzaChuKSxiKHRoaXMpKX0sZC5wcm90b3R5cGUucmVuZGVyPXAsdD1bXSxnLl9fcj0wLHI9MDtleHBvcnR7UCBhcyByZW5kZXIsUyBhcyBoeWRyYXRlLGggYXMgY3JlYXRlRWxlbWVudCxoLHAgYXMgRnJhZ21lbnQseSBhcyBjcmVhdGVSZWYsaSBhcyBpc1ZhbGlkRWxlbWVudCxkIGFzIENvbXBvbmVudCxxIGFzIGNsb25lRWxlbWVudCxCIGFzIGNyZWF0ZUNvbnRleHQseCBhcyB0b0NoaWxkQXJyYXksbCBhcyBvcHRpb25zfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByZWFjdC5tb2R1bGUuanMubWFwXG4iLCJleHBvcnQgY29uc3QgRU1QVFlfT0JKID0ge307XG5leHBvcnQgY29uc3QgRU1QVFlfQVJSID0gW107XG5leHBvcnQgY29uc3QgSVNfTk9OX0RJTUVOU0lPTkFMID0gL2FjaXR8ZXgoPzpzfGd8bnxwfCQpfHJwaHxncmlkfG93c3xtbmN8bnR3fGluZVtjaF18em9vfF5vcmR8aXRlcmEvaTtcbiIsImltcG9ydCB7IEVNUFRZX0FSUiB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuXG4vKipcbiAqIEFzc2lnbiBwcm9wZXJ0aWVzIGZyb20gYHByb3BzYCB0byBgb2JqYFxuICogQHRlbXBsYXRlIE8sIFAgVGhlIG9iaiBhbmQgcHJvcHMgdHlwZXNcbiAqIEBwYXJhbSB7T30gb2JqIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvXG4gKiBAcGFyYW0ge1B9IHByb3BzIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEByZXR1cm5zIHtPICYgUH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbihvYmosIHByb3BzKSB7XG5cdC8vIEB0cy1pZ25vcmUgV2UgY2hhbmdlIHRoZSB0eXBlIG9mIGBvYmpgIHRvIGJlIGBPICYgUGBcblx0Zm9yIChsZXQgaSBpbiBwcm9wcykgb2JqW2ldID0gcHJvcHNbaV07XG5cdHJldHVybiAvKiogQHR5cGUge08gJiBQfSAqLyAob2JqKTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYSBjaGlsZCBub2RlIGZyb20gaXRzIHBhcmVudCBpZiBhdHRhY2hlZC4gVGhpcyBpcyBhIHdvcmthcm91bmQgZm9yXG4gKiBJRTExIHdoaWNoIGRvZXNuJ3Qgc3VwcG9ydCBgRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlKClgLiBVc2luZyB0aGlzIGZ1bmN0aW9uXG4gKiBpcyBzbWFsbGVyIHRoYW4gaW5jbHVkaW5nIGEgZGVkaWNhdGVkIHBvbHlmaWxsLlxuICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBub2RlIHRvIHJlbW92ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlTm9kZShub2RlKSB7XG5cdGxldCBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnROb2RlO1xuXHRpZiAocGFyZW50Tm9kZSkgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbn1cblxuZXhwb3J0IGNvbnN0IHNsaWNlID0gRU1QVFlfQVJSLnNsaWNlO1xuIiwiaW1wb3J0IHsgX2NhdGNoRXJyb3IgfSBmcm9tICcuL2RpZmYvY2F0Y2gtZXJyb3InO1xuXG4vKipcbiAqIFRoZSBgb3B0aW9uYCBvYmplY3QgY2FuIHBvdGVudGlhbGx5IGNvbnRhaW4gY2FsbGJhY2sgZnVuY3Rpb25zXG4gKiB0aGF0IGFyZSBjYWxsZWQgZHVyaW5nIHZhcmlvdXMgc3RhZ2VzIG9mIG91ciByZW5kZXJlci4gVGhpcyBpcyB0aGVcbiAqIGZvdW5kYXRpb24gb24gd2hpY2ggYWxsIG91ciBhZGRvbnMgbGlrZSBgcHJlYWN0L2RlYnVnYCwgYHByZWFjdC9jb21wYXRgLFxuICogYW5kIGBwcmVhY3QvaG9va3NgIGFyZSBiYXNlZCBvbi4gU2VlIHRoZSBgT3B0aW9uc2AgdHlwZSBpbiBgaW50ZXJuYWwuZC50c2BcbiAqIGZvciBhIGZ1bGwgbGlzdCBvZiBhdmFpbGFibGUgb3B0aW9uIGhvb2tzIChtb3N0IGVkaXRvcnMvSURFcyBhbGxvdyB5b3UgdG9cbiAqIGN0cmwrY2xpY2sgb3IgY21kK2NsaWNrIG9uIG1hYyB0aGUgdHlwZSBkZWZpbml0aW9uIGJlbG93KS5cbiAqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5PcHRpb25zfVxuICovXG5jb25zdCBvcHRpb25zID0ge1xuXHRfY2F0Y2hFcnJvclxufTtcblxuZXhwb3J0IGRlZmF1bHQgb3B0aW9ucztcbiIsImltcG9ydCB7IHNsaWNlIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCBvcHRpb25zIGZyb20gJy4vb3B0aW9ucyc7XG5cbmxldCB2bm9kZUlkID0gMDtcblxuLyoqXG4gKiBDcmVhdGUgYW4gdmlydHVhbCBub2RlICh1c2VkIGZvciBKU1gpXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlW1widHlwZVwiXX0gdHlwZSBUaGUgbm9kZSBuYW1lIG9yIENvbXBvbmVudFxuICogY29uc3RydWN0b3IgZm9yIHRoaXMgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGwgfCB1bmRlZmluZWR9IFtwcm9wc10gVGhlIHByb3BlcnRpZXMgb2YgdGhlIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtBcnJheTxpbXBvcnQoJy4nKS5Db21wb25lbnRDaGlsZHJlbj59IFtjaGlsZHJlbl0gVGhlIGNoaWxkcmVuIG9mIHRoZSB2aXJ0dWFsIG5vZGVcbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodHlwZSwgcHJvcHMsIGNoaWxkcmVuKSB7XG5cdGxldCBub3JtYWxpemVkUHJvcHMgPSB7fSxcblx0XHRrZXksXG5cdFx0cmVmLFxuXHRcdGk7XG5cdGZvciAoaSBpbiBwcm9wcykge1xuXHRcdGlmIChpID09ICdrZXknKSBrZXkgPSBwcm9wc1tpXTtcblx0XHRlbHNlIGlmIChpID09ICdyZWYnKSByZWYgPSBwcm9wc1tpXTtcblx0XHRlbHNlIG5vcm1hbGl6ZWRQcm9wc1tpXSA9IHByb3BzW2ldO1xuXHR9XG5cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG5cdFx0bm9ybWFsaXplZFByb3BzLmNoaWxkcmVuID1cblx0XHRcdGFyZ3VtZW50cy5sZW5ndGggPiAzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogY2hpbGRyZW47XG5cdH1cblxuXHQvLyBJZiBhIENvbXBvbmVudCBWTm9kZSwgY2hlY2sgZm9yIGFuZCBhcHBseSBkZWZhdWx0UHJvcHNcblx0Ly8gTm90ZTogdHlwZSBtYXkgYmUgdW5kZWZpbmVkIGluIGRldmVsb3BtZW50LCBtdXN0IG5ldmVyIGVycm9yIGhlcmUuXG5cdGlmICh0eXBlb2YgdHlwZSA9PSAnZnVuY3Rpb24nICYmIHR5cGUuZGVmYXVsdFByb3BzICE9IG51bGwpIHtcblx0XHRmb3IgKGkgaW4gdHlwZS5kZWZhdWx0UHJvcHMpIHtcblx0XHRcdGlmIChub3JtYWxpemVkUHJvcHNbaV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRub3JtYWxpemVkUHJvcHNbaV0gPSB0eXBlLmRlZmF1bHRQcm9wc1tpXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgbm9ybWFsaXplZFByb3BzLCBrZXksIHJlZiwgbnVsbCk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgVk5vZGUgKHVzZWQgaW50ZXJuYWxseSBieSBQcmVhY3QpXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlW1widHlwZVwiXX0gdHlwZSBUaGUgbm9kZSBuYW1lIG9yIENvbXBvbmVudFxuICogQ29uc3RydWN0b3IgZm9yIHRoaXMgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge29iamVjdCB8IHN0cmluZyB8IG51bWJlciB8IG51bGx9IHByb3BzIFRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgdmlydHVhbCBub2RlLlxuICogSWYgdGhpcyB2aXJ0dWFsIG5vZGUgcmVwcmVzZW50cyBhIHRleHQgbm9kZSwgdGhpcyBpcyB0aGUgdGV4dCBvZiB0aGUgbm9kZSAoc3RyaW5nIG9yIG51bWJlcikuXG4gKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlciB8IG51bGx9IGtleSBUaGUga2V5IGZvciB0aGlzIHZpcnR1YWwgbm9kZSwgdXNlZCB3aGVuXG4gKiBkaWZmaW5nIGl0IGFnYWluc3QgaXRzIGNoaWxkcmVuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlW1wicmVmXCJdfSByZWYgVGhlIHJlZiBwcm9wZXJ0eSB0aGF0IHdpbGxcbiAqIHJlY2VpdmUgYSByZWZlcmVuY2UgdG8gaXRzIGNyZWF0ZWQgY2hpbGRcbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVZOb2RlKHR5cGUsIHByb3BzLCBrZXksIHJlZiwgb3JpZ2luYWwpIHtcblx0Ly8gVjggc2VlbXMgdG8gYmUgYmV0dGVyIGF0IGRldGVjdGluZyB0eXBlIHNoYXBlcyBpZiB0aGUgb2JqZWN0IGlzIGFsbG9jYXRlZCBmcm9tIHRoZSBzYW1lIGNhbGwgc2l0ZVxuXHQvLyBEbyBub3QgaW5saW5lIGludG8gY3JlYXRlRWxlbWVudCBhbmQgY29lcmNlVG9WTm9kZSFcblx0Y29uc3Qgdm5vZGUgPSB7XG5cdFx0dHlwZSxcblx0XHRwcm9wcyxcblx0XHRrZXksXG5cdFx0cmVmLFxuXHRcdF9jaGlsZHJlbjogbnVsbCxcblx0XHRfcGFyZW50OiBudWxsLFxuXHRcdF9kZXB0aDogMCxcblx0XHRfZG9tOiBudWxsLFxuXHRcdC8vIF9uZXh0RG9tIG11c3QgYmUgaW5pdGlhbGl6ZWQgdG8gdW5kZWZpbmVkIGIvYyBpdCB3aWxsIGV2ZW50dWFsbHlcblx0XHQvLyBiZSBzZXQgdG8gZG9tLm5leHRTaWJsaW5nIHdoaWNoIGNhbiByZXR1cm4gYG51bGxgIGFuZCBpdCBpcyBpbXBvcnRhbnRcblx0XHQvLyB0byBiZSBhYmxlIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gYW4gdW5pbml0aWFsaXplZCBfbmV4dERvbSBhbmRcblx0XHQvLyBhIF9uZXh0RG9tIHRoYXQgaGFzIGJlZW4gc2V0IHRvIGBudWxsYFxuXHRcdF9uZXh0RG9tOiB1bmRlZmluZWQsXG5cdFx0X2NvbXBvbmVudDogbnVsbCxcblx0XHRfaHlkcmF0aW5nOiBudWxsLFxuXHRcdGNvbnN0cnVjdG9yOiB1bmRlZmluZWQsXG5cdFx0X29yaWdpbmFsOiBvcmlnaW5hbCA9PSBudWxsID8gKyt2bm9kZUlkIDogb3JpZ2luYWxcblx0fTtcblxuXHQvLyBPbmx5IGludm9rZSB0aGUgdm5vZGUgaG9vayBpZiB0aGlzIHdhcyAqbm90KiBhIGRpcmVjdCBjb3B5OlxuXHRpZiAob3JpZ2luYWwgPT0gbnVsbCAmJiBvcHRpb25zLnZub2RlICE9IG51bGwpIG9wdGlvbnMudm5vZGUodm5vZGUpO1xuXG5cdHJldHVybiB2bm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlZigpIHtcblx0cmV0dXJuIHsgY3VycmVudDogbnVsbCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRnJhZ21lbnQocHJvcHMpIHtcblx0cmV0dXJuIHByb3BzLmNoaWxkcmVuO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgdGhlIGFyZ3VtZW50IGlzIGEgdmFsaWQgUHJlYWN0IFZOb2RlLlxuICogQHBhcmFtIHsqfSB2bm9kZVxuICogQHJldHVybnMge3Zub2RlIGlzIGltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlfVxuICovXG5leHBvcnQgY29uc3QgaXNWYWxpZEVsZW1lbnQgPSB2bm9kZSA9PlxuXHR2bm9kZSAhPSBudWxsICYmIHZub2RlLmNvbnN0cnVjdG9yID09PSB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyBhc3NpZ24gfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHsgZGlmZiwgY29tbWl0Um9vdCB9IGZyb20gJy4vZGlmZi9pbmRleCc7XG5pbXBvcnQgb3B0aW9ucyBmcm9tICcuL29wdGlvbnMnO1xuaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tICcuL2NyZWF0ZS1lbGVtZW50JztcblxuLyoqXG4gKiBCYXNlIENvbXBvbmVudCBjbGFzcy4gUHJvdmlkZXMgYHNldFN0YXRlKClgIGFuZCBgZm9yY2VVcGRhdGUoKWAsIHdoaWNoXG4gKiB0cmlnZ2VyIHJlbmRlcmluZ1xuICogQHBhcmFtIHtvYmplY3R9IHByb3BzIFRoZSBpbml0aWFsIGNvbXBvbmVudCBwcm9wc1xuICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgVGhlIGluaXRpYWwgY29udGV4dCBmcm9tIHBhcmVudCBjb21wb25lbnRzJ1xuICogZ2V0Q2hpbGRDb250ZXh0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBDb21wb25lbnQocHJvcHMsIGNvbnRleHQpIHtcblx0dGhpcy5wcm9wcyA9IHByb3BzO1xuXHR0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xufVxuXG4vKipcbiAqIFVwZGF0ZSBjb21wb25lbnQgc3RhdGUgYW5kIHNjaGVkdWxlIGEgcmUtcmVuZGVyLlxuICogQHRoaXMge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkNvbXBvbmVudH1cbiAqIEBwYXJhbSB7b2JqZWN0IHwgKChzOiBvYmplY3QsIHA6IG9iamVjdCkgPT4gb2JqZWN0KX0gdXBkYXRlIEEgaGFzaCBvZiBzdGF0ZVxuICogcHJvcGVydGllcyB0byB1cGRhdGUgd2l0aCBuZXcgdmFsdWVzIG9yIGEgZnVuY3Rpb24gdGhhdCBnaXZlbiB0aGUgY3VycmVudFxuICogc3RhdGUgYW5kIHByb3BzIHJldHVybnMgYSBuZXcgcGFydGlhbCBzdGF0ZVxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBbY2FsbGJhY2tdIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uY2UgY29tcG9uZW50IHN0YXRlIGlzXG4gKiB1cGRhdGVkXG4gKi9cbkNvbXBvbmVudC5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbih1cGRhdGUsIGNhbGxiYWNrKSB7XG5cdC8vIG9ubHkgY2xvbmUgc3RhdGUgd2hlbiBjb3B5aW5nIHRvIG5leHRTdGF0ZSB0aGUgZmlyc3QgdGltZS5cblx0bGV0IHM7XG5cdGlmICh0aGlzLl9uZXh0U3RhdGUgIT0gbnVsbCAmJiB0aGlzLl9uZXh0U3RhdGUgIT09IHRoaXMuc3RhdGUpIHtcblx0XHRzID0gdGhpcy5fbmV4dFN0YXRlO1xuXHR9IGVsc2Uge1xuXHRcdHMgPSB0aGlzLl9uZXh0U3RhdGUgPSBhc3NpZ24oe30sIHRoaXMuc3RhdGUpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiB1cGRhdGUgPT0gJ2Z1bmN0aW9uJykge1xuXHRcdC8vIFNvbWUgbGlicmFyaWVzIGxpa2UgYGltbWVyYCBtYXJrIHRoZSBjdXJyZW50IHN0YXRlIGFzIHJlYWRvbmx5LFxuXHRcdC8vIHByZXZlbnRpbmcgdXMgZnJvbSBtdXRhdGluZyBpdCwgc28gd2UgbmVlZCB0byBjbG9uZSBpdC4gU2VlICMyNzE2XG5cdFx0dXBkYXRlID0gdXBkYXRlKGFzc2lnbih7fSwgcyksIHRoaXMucHJvcHMpO1xuXHR9XG5cblx0aWYgKHVwZGF0ZSkge1xuXHRcdGFzc2lnbihzLCB1cGRhdGUpO1xuXHR9XG5cblx0Ly8gU2tpcCB1cGRhdGUgaWYgdXBkYXRlciBmdW5jdGlvbiByZXR1cm5lZCBudWxsXG5cdGlmICh1cGRhdGUgPT0gbnVsbCkgcmV0dXJuO1xuXG5cdGlmICh0aGlzLl92bm9kZSkge1xuXHRcdGlmIChjYWxsYmFjaykgdGhpcy5fcmVuZGVyQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuXHRcdGVucXVldWVSZW5kZXIodGhpcyk7XG5cdH1cbn07XG5cbi8qKlxuICogSW1tZWRpYXRlbHkgcGVyZm9ybSBhIHN5bmNocm9ub3VzIHJlLXJlbmRlciBvZiB0aGUgY29tcG9uZW50XG4gKiBAdGhpcyB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50fVxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBbY2FsbGJhY2tdIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGFmdGVyIGNvbXBvbmVudCBpc1xuICogcmUtcmVuZGVyZWRcbiAqL1xuQ29tcG9uZW50LnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdGlmICh0aGlzLl92bm9kZSkge1xuXHRcdC8vIFNldCByZW5kZXIgbW9kZSBzbyB0aGF0IHdlIGNhbiBkaWZmZXJlbnRpYXRlIHdoZXJlIHRoZSByZW5kZXIgcmVxdWVzdFxuXHRcdC8vIGlzIGNvbWluZyBmcm9tLiBXZSBuZWVkIHRoaXMgYmVjYXVzZSBmb3JjZVVwZGF0ZSBzaG91bGQgbmV2ZXIgY2FsbFxuXHRcdC8vIHNob3VsZENvbXBvbmVudFVwZGF0ZVxuXHRcdHRoaXMuX2ZvcmNlID0gdHJ1ZTtcblx0XHRpZiAoY2FsbGJhY2spIHRoaXMuX3JlbmRlckNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcblx0XHRlbnF1ZXVlUmVuZGVyKHRoaXMpO1xuXHR9XG59O1xuXG4vKipcbiAqIEFjY2VwdHMgYHByb3BzYCBhbmQgYHN0YXRlYCwgYW5kIHJldHVybnMgYSBuZXcgVmlydHVhbCBET00gdHJlZSB0byBidWlsZC5cbiAqIFZpcnR1YWwgRE9NIGlzIGdlbmVyYWxseSBjb25zdHJ1Y3RlZCB2aWEgW0pTWF0oaHR0cDovL2phc29uZm9ybWF0LmNvbS93dGYtaXMtanN4KS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyBQcm9wcyAoZWc6IEpTWCBhdHRyaWJ1dGVzKSByZWNlaXZlZCBmcm9tIHBhcmVudFxuICogZWxlbWVudC9jb21wb25lbnRcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSBUaGUgY29tcG9uZW50J3MgY3VycmVudCBzdGF0ZVxuICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgQ29udGV4dCBvYmplY3QsIGFzIHJldHVybmVkIGJ5IHRoZSBuZWFyZXN0XG4gKiBhbmNlc3RvcidzIGBnZXRDaGlsZENvbnRleHQoKWBcbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vaW5kZXgnKS5Db21wb25lbnRDaGlsZHJlbiB8IHZvaWR9XG4gKi9cbkNvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID0gRnJhZ21lbnQ7XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGVcbiAqIEBwYXJhbSB7bnVtYmVyIHwgbnVsbH0gW2NoaWxkSW5kZXhdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREb21TaWJsaW5nKHZub2RlLCBjaGlsZEluZGV4KSB7XG5cdGlmIChjaGlsZEluZGV4ID09IG51bGwpIHtcblx0XHQvLyBVc2UgY2hpbGRJbmRleD09bnVsbCBhcyBhIHNpZ25hbCB0byByZXN1bWUgdGhlIHNlYXJjaCBmcm9tIHRoZSB2bm9kZSdzIHNpYmxpbmdcblx0XHRyZXR1cm4gdm5vZGUuX3BhcmVudFxuXHRcdFx0PyBnZXREb21TaWJsaW5nKHZub2RlLl9wYXJlbnQsIHZub2RlLl9wYXJlbnQuX2NoaWxkcmVuLmluZGV4T2Yodm5vZGUpICsgMSlcblx0XHRcdDogbnVsbDtcblx0fVxuXG5cdGxldCBzaWJsaW5nO1xuXHRmb3IgKDsgY2hpbGRJbmRleCA8IHZub2RlLl9jaGlsZHJlbi5sZW5ndGg7IGNoaWxkSW5kZXgrKykge1xuXHRcdHNpYmxpbmcgPSB2bm9kZS5fY2hpbGRyZW5bY2hpbGRJbmRleF07XG5cblx0XHRpZiAoc2libGluZyAhPSBudWxsICYmIHNpYmxpbmcuX2RvbSAhPSBudWxsKSB7XG5cdFx0XHQvLyBTaW5jZSB1cGRhdGVQYXJlbnREb21Qb2ludGVycyBrZWVwcyBfZG9tIHBvaW50ZXIgY29ycmVjdCxcblx0XHRcdC8vIHdlIGNhbiByZWx5IG9uIF9kb20gdG8gdGVsbCB1cyBpZiB0aGlzIHN1YnRyZWUgY29udGFpbnMgYVxuXHRcdFx0Ly8gcmVuZGVyZWQgRE9NIG5vZGUsIGFuZCB3aGF0IHRoZSBmaXJzdCByZW5kZXJlZCBET00gbm9kZSBpc1xuXHRcdFx0cmV0dXJuIHNpYmxpbmcuX2RvbTtcblx0XHR9XG5cdH1cblxuXHQvLyBJZiB3ZSBnZXQgaGVyZSwgd2UgaGF2ZSBub3QgZm91bmQgYSBET00gbm9kZSBpbiB0aGlzIHZub2RlJ3MgY2hpbGRyZW4uXG5cdC8vIFdlIG11c3QgcmVzdW1lIGZyb20gdGhpcyB2bm9kZSdzIHNpYmxpbmcgKGluIGl0J3MgcGFyZW50IF9jaGlsZHJlbiBhcnJheSlcblx0Ly8gT25seSBjbGltYiB1cCBhbmQgc2VhcmNoIHRoZSBwYXJlbnQgaWYgd2UgYXJlbid0IHNlYXJjaGluZyB0aHJvdWdoIGEgRE9NXG5cdC8vIFZOb2RlIChtZWFuaW5nIHdlIHJlYWNoZWQgdGhlIERPTSBwYXJlbnQgb2YgdGhlIG9yaWdpbmFsIHZub2RlIHRoYXQgYmVnYW5cblx0Ly8gdGhlIHNlYXJjaClcblx0cmV0dXJuIHR5cGVvZiB2bm9kZS50eXBlID09ICdmdW5jdGlvbicgPyBnZXREb21TaWJsaW5nKHZub2RlKSA6IG51bGw7XG59XG5cbi8qKlxuICogVHJpZ2dlciBpbi1wbGFjZSByZS1yZW5kZXJpbmcgb2YgYSBjb21wb25lbnQuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkNvbXBvbmVudH0gY29tcG9uZW50IFRoZSBjb21wb25lbnQgdG8gcmVyZW5kZXJcbiAqL1xuZnVuY3Rpb24gcmVuZGVyQ29tcG9uZW50KGNvbXBvbmVudCkge1xuXHRsZXQgdm5vZGUgPSBjb21wb25lbnQuX3Zub2RlLFxuXHRcdG9sZERvbSA9IHZub2RlLl9kb20sXG5cdFx0cGFyZW50RG9tID0gY29tcG9uZW50Ll9wYXJlbnREb207XG5cblx0aWYgKHBhcmVudERvbSkge1xuXHRcdGxldCBjb21taXRRdWV1ZSA9IFtdO1xuXHRcdGNvbnN0IG9sZFZOb2RlID0gYXNzaWduKHt9LCB2bm9kZSk7XG5cdFx0b2xkVk5vZGUuX29yaWdpbmFsID0gdm5vZGUuX29yaWdpbmFsICsgMTtcblxuXHRcdGRpZmYoXG5cdFx0XHRwYXJlbnREb20sXG5cdFx0XHR2bm9kZSxcblx0XHRcdG9sZFZOb2RlLFxuXHRcdFx0Y29tcG9uZW50Ll9nbG9iYWxDb250ZXh0LFxuXHRcdFx0cGFyZW50RG9tLm93bmVyU1ZHRWxlbWVudCAhPT0gdW5kZWZpbmVkLFxuXHRcdFx0dm5vZGUuX2h5ZHJhdGluZyAhPSBudWxsID8gW29sZERvbV0gOiBudWxsLFxuXHRcdFx0Y29tbWl0UXVldWUsXG5cdFx0XHRvbGREb20gPT0gbnVsbCA/IGdldERvbVNpYmxpbmcodm5vZGUpIDogb2xkRG9tLFxuXHRcdFx0dm5vZGUuX2h5ZHJhdGluZ1xuXHRcdCk7XG5cdFx0Y29tbWl0Um9vdChjb21taXRRdWV1ZSwgdm5vZGUpO1xuXG5cdFx0aWYgKHZub2RlLl9kb20gIT0gb2xkRG9tKSB7XG5cdFx0XHR1cGRhdGVQYXJlbnREb21Qb2ludGVycyh2bm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGVcbiAqL1xuZnVuY3Rpb24gdXBkYXRlUGFyZW50RG9tUG9pbnRlcnModm5vZGUpIHtcblx0aWYgKCh2bm9kZSA9IHZub2RlLl9wYXJlbnQpICE9IG51bGwgJiYgdm5vZGUuX2NvbXBvbmVudCAhPSBudWxsKSB7XG5cdFx0dm5vZGUuX2RvbSA9IHZub2RlLl9jb21wb25lbnQuYmFzZSA9IG51bGw7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB2bm9kZS5fY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcblx0XHRcdGxldCBjaGlsZCA9IHZub2RlLl9jaGlsZHJlbltpXTtcblx0XHRcdGlmIChjaGlsZCAhPSBudWxsICYmIGNoaWxkLl9kb20gIT0gbnVsbCkge1xuXHRcdFx0XHR2bm9kZS5fZG9tID0gdm5vZGUuX2NvbXBvbmVudC5iYXNlID0gY2hpbGQuX2RvbTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVwZGF0ZVBhcmVudERvbVBvaW50ZXJzKHZub2RlKTtcblx0fVxufVxuXG4vKipcbiAqIFRoZSByZW5kZXIgcXVldWVcbiAqIEB0eXBlIHtBcnJheTxpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fVxuICovXG5sZXQgcmVyZW5kZXJRdWV1ZSA9IFtdO1xuXG4vKlxuICogVGhlIHZhbHVlIG9mIGBDb21wb25lbnQuZGVib3VuY2VgIG11c3QgYXN5bmNocm9ub3VzbHkgaW52b2tlIHRoZSBwYXNzZWQgaW4gY2FsbGJhY2suIEl0IGlzXG4gKiBpbXBvcnRhbnQgdGhhdCBjb250cmlidXRvcnMgdG8gUHJlYWN0IGNhbiBjb25zaXN0ZW50bHkgcmVhc29uIGFib3V0IHdoYXQgY2FsbHMgdG8gYHNldFN0YXRlYCwgZXRjLlxuICogZG8sIGFuZCB3aGVuIHRoZWlyIGVmZmVjdHMgd2lsbCBiZSBhcHBsaWVkLiBTZWUgdGhlIGxpbmtzIGJlbG93IGZvciBzb21lIGZ1cnRoZXIgcmVhZGluZyBvbiBkZXNpZ25pbmdcbiAqIGFzeW5jaHJvbm91cyBBUElzLlxuICogKiBbRGVzaWduaW5nIEFQSXMgZm9yIEFzeW5jaHJvbnldKGh0dHBzOi8vYmxvZy5penMubWUvMjAxMy8wOC9kZXNpZ25pbmctYXBpcy1mb3ItYXN5bmNocm9ueSlcbiAqICogW0NhbGxiYWNrcyBzeW5jaHJvbm91cyBhbmQgYXN5bmNocm9ub3VzXShodHRwczovL2Jsb2cub21ldGVyLmNvbS8yMDExLzA3LzI0L2NhbGxiYWNrcy1zeW5jaHJvbm91cy1hbmQtYXN5bmNocm9ub3VzLylcbiAqL1xuXG5sZXQgcHJldkRlYm91bmNlO1xuXG4vKipcbiAqIEVucXVldWUgYSByZXJlbmRlciBvZiBhIGNvbXBvbmVudFxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnR9IGMgVGhlIGNvbXBvbmVudCB0byByZXJlbmRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5xdWV1ZVJlbmRlcihjKSB7XG5cdGlmIChcblx0XHQoIWMuX2RpcnR5ICYmXG5cdFx0XHQoYy5fZGlydHkgPSB0cnVlKSAmJlxuXHRcdFx0cmVyZW5kZXJRdWV1ZS5wdXNoKGMpICYmXG5cdFx0XHQhcHJvY2Vzcy5fcmVyZW5kZXJDb3VudCsrKSB8fFxuXHRcdHByZXZEZWJvdW5jZSAhPT0gb3B0aW9ucy5kZWJvdW5jZVJlbmRlcmluZ1xuXHQpIHtcblx0XHRwcmV2RGVib3VuY2UgPSBvcHRpb25zLmRlYm91bmNlUmVuZGVyaW5nO1xuXHRcdChwcmV2RGVib3VuY2UgfHwgc2V0VGltZW91dCkocHJvY2Vzcyk7XG5cdH1cbn1cblxuLyoqIEZsdXNoIHRoZSByZW5kZXIgcXVldWUgYnkgcmVyZW5kZXJpbmcgYWxsIHF1ZXVlZCBjb21wb25lbnRzICovXG5mdW5jdGlvbiBwcm9jZXNzKCkge1xuXHRsZXQgcXVldWU7XG5cdHdoaWxlICgocHJvY2Vzcy5fcmVyZW5kZXJDb3VudCA9IHJlcmVuZGVyUXVldWUubGVuZ3RoKSkge1xuXHRcdHF1ZXVlID0gcmVyZW5kZXJRdWV1ZS5zb3J0KChhLCBiKSA9PiBhLl92bm9kZS5fZGVwdGggLSBiLl92bm9kZS5fZGVwdGgpO1xuXHRcdHJlcmVuZGVyUXVldWUgPSBbXTtcblx0XHQvLyBEb24ndCB1cGRhdGUgYHJlbmRlckNvdW50YCB5ZXQuIEtlZXAgaXRzIHZhbHVlIG5vbi16ZXJvIHRvIHByZXZlbnQgdW5uZWNlc3Nhcnlcblx0XHQvLyBwcm9jZXNzKCkgY2FsbHMgZnJvbSBnZXR0aW5nIHNjaGVkdWxlZCB3aGlsZSBgcXVldWVgIGlzIHN0aWxsIGJlaW5nIGNvbnN1bWVkLlxuXHRcdHF1ZXVlLnNvbWUoYyA9PiB7XG5cdFx0XHRpZiAoYy5fZGlydHkpIHJlbmRlckNvbXBvbmVudChjKTtcblx0XHR9KTtcblx0fVxufVxucHJvY2Vzcy5fcmVyZW5kZXJDb3VudCA9IDA7XG4iLCJpbXBvcnQgeyBlbnF1ZXVlUmVuZGVyIH0gZnJvbSAnLi9jb21wb25lbnQnO1xuXG5leHBvcnQgbGV0IGkgPSAwO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29udGV4dChkZWZhdWx0VmFsdWUsIGNvbnRleHRJZCkge1xuXHRjb250ZXh0SWQgPSAnX19jQycgKyBpKys7XG5cblx0Y29uc3QgY29udGV4dCA9IHtcblx0XHRfaWQ6IGNvbnRleHRJZCxcblx0XHRfZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUsXG5cdFx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5GdW5jdGlvbkNvbXBvbmVudH0gKi9cblx0XHRDb25zdW1lcihwcm9wcywgY29udGV4dFZhbHVlKSB7XG5cdFx0XHQvLyByZXR1cm4gcHJvcHMuY2hpbGRyZW4oXG5cdFx0XHQvLyBcdGNvbnRleHRbY29udGV4dElkXSA/IGNvbnRleHRbY29udGV4dElkXS5wcm9wcy52YWx1ZSA6IGRlZmF1bHRWYWx1ZVxuXHRcdFx0Ly8gKTtcblx0XHRcdHJldHVybiBwcm9wcy5jaGlsZHJlbihjb250ZXh0VmFsdWUpO1xuXHRcdH0sXG5cdFx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5GdW5jdGlvbkNvbXBvbmVudH0gKi9cblx0XHRQcm92aWRlcihwcm9wcykge1xuXHRcdFx0aWYgKCF0aGlzLmdldENoaWxkQ29udGV4dCkge1xuXHRcdFx0XHRsZXQgc3VicyA9IFtdO1xuXHRcdFx0XHRsZXQgY3R4ID0ge307XG5cdFx0XHRcdGN0eFtjb250ZXh0SWRdID0gdGhpcztcblxuXHRcdFx0XHR0aGlzLmdldENoaWxkQ29udGV4dCA9ICgpID0+IGN0eDtcblxuXHRcdFx0XHR0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uKF9wcm9wcykge1xuXHRcdFx0XHRcdGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBfcHJvcHMudmFsdWUpIHtcblx0XHRcdFx0XHRcdC8vIEkgdGhpbmsgdGhlIGZvcmNlZCB2YWx1ZSBwcm9wYWdhdGlvbiBoZXJlIHdhcyBvbmx5IG5lZWRlZCB3aGVuIGBvcHRpb25zLmRlYm91bmNlUmVuZGVyaW5nYCB3YXMgYmVpbmcgYnlwYXNzZWQ6XG5cdFx0XHRcdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vcHJlYWN0anMvcHJlYWN0L2NvbW1pdC80ZDMzOWZiODAzYmVhMDllOWYxOThhYmYzOGNhMWJmOGVhNGI3NzcxI2RpZmYtNTQ2ODJjZTM4MDkzNWE3MTdlNDFiOGJmYzU0NzM3ZjZSMzU4XG5cdFx0XHRcdFx0XHQvLyBJbiB0aG9zZSBjYXNlcyB0aG91Z2gsIGV2ZW4gd2l0aCB0aGUgdmFsdWUgY29ycmVjdGVkLCB3ZSdyZSBkb3VibGUtcmVuZGVyaW5nIGFsbCBub2Rlcy5cblx0XHRcdFx0XHRcdC8vIEl0IG1pZ2h0IGJlIGJldHRlciB0byBqdXN0IHRlbGwgZm9sa3Mgbm90IHRvIHVzZSBmb3JjZS1zeW5jIG1vZGUuXG5cdFx0XHRcdFx0XHQvLyBDdXJyZW50bHksIHVzaW5nIGB1c2VDb250ZXh0KClgIGluIGEgY2xhc3MgY29tcG9uZW50IHdpbGwgb3ZlcndyaXRlIGl0cyBgdGhpcy5jb250ZXh0YCB2YWx1ZS5cblx0XHRcdFx0XHRcdC8vIHN1YnMuc29tZShjID0+IHtcblx0XHRcdFx0XHRcdC8vIFx0Yy5jb250ZXh0ID0gX3Byb3BzLnZhbHVlO1xuXHRcdFx0XHRcdFx0Ly8gXHRlbnF1ZXVlUmVuZGVyKGMpO1xuXHRcdFx0XHRcdFx0Ly8gfSk7XG5cblx0XHRcdFx0XHRcdC8vIHN1YnMuc29tZShjID0+IHtcblx0XHRcdFx0XHRcdC8vIFx0Yy5jb250ZXh0W2NvbnRleHRJZF0gPSBfcHJvcHMudmFsdWU7XG5cdFx0XHRcdFx0XHQvLyBcdGVucXVldWVSZW5kZXIoYyk7XG5cdFx0XHRcdFx0XHQvLyB9KTtcblx0XHRcdFx0XHRcdHN1YnMuc29tZShlbnF1ZXVlUmVuZGVyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0dGhpcy5zdWIgPSBjID0+IHtcblx0XHRcdFx0XHRzdWJzLnB1c2goYyk7XG5cdFx0XHRcdFx0bGV0IG9sZCA9IGMuY29tcG9uZW50V2lsbFVubW91bnQ7XG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsVW5tb3VudCA9ICgpID0+IHtcblx0XHRcdFx0XHRcdHN1YnMuc3BsaWNlKHN1YnMuaW5kZXhPZihjKSwgMSk7XG5cdFx0XHRcdFx0XHRpZiAob2xkKSBvbGQuY2FsbChjKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcHJvcHMuY2hpbGRyZW47XG5cdFx0fVxuXHR9O1xuXG5cdC8vIERldnRvb2xzIG5lZWRzIGFjY2VzcyB0byB0aGUgY29udGV4dCBvYmplY3Qgd2hlbiBpdFxuXHQvLyBlbmNvdW50ZXJzIGEgUHJvdmlkZXIuIFRoaXMgaXMgbmVjZXNzYXJ5IHRvIHN1cHBvcnRcblx0Ly8gc2V0dGluZyBgZGlzcGxheU5hbWVgIG9uIHRoZSBjb250ZXh0IG9iamVjdCBpbnN0ZWFkXG5cdC8vIG9mIG9uIHRoZSBjb21wb25lbnQgaXRzZWxmLiBTZWU6XG5cdC8vIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9jb250ZXh0Lmh0bWwjY29udGV4dGRpc3BsYXluYW1lXG5cblx0cmV0dXJuIChjb250ZXh0LlByb3ZpZGVyLl9jb250ZXh0UmVmID0gY29udGV4dC5Db25zdW1lci5jb250ZXh0VHlwZSA9IGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IHsgZGlmZiwgdW5tb3VudCwgYXBwbHlSZWYgfSBmcm9tICcuL2luZGV4JztcbmltcG9ydCB7IGNyZWF0ZVZOb2RlLCBGcmFnbWVudCB9IGZyb20gJy4uL2NyZWF0ZS1lbGVtZW50JztcbmltcG9ydCB7IEVNUFRZX09CSiwgRU1QVFlfQVJSIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IGdldERvbVNpYmxpbmcgfSBmcm9tICcuLi9jb21wb25lbnQnO1xuXG4vKipcbiAqIERpZmYgdGhlIGNoaWxkcmVuIG9mIGEgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fSBwYXJlbnREb20gVGhlIERPTSBlbGVtZW50IHdob3NlXG4gKiBjaGlsZHJlbiBhcmUgYmVpbmcgZGlmZmVkXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5Db21wb25lbnRDaGlsZHJlbltdfSByZW5kZXJSZXN1bHRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBuZXdQYXJlbnRWTm9kZSBUaGUgbmV3IHZpcnR1YWxcbiAqIG5vZGUgd2hvc2UgY2hpbGRyZW4gc2hvdWxkIGJlIGRpZmYnZWQgYWdhaW5zdCBvbGRQYXJlbnRWTm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IG9sZFBhcmVudFZOb2RlIFRoZSBvbGQgdmlydHVhbFxuICogbm9kZSB3aG9zZSBjaGlsZHJlbiBzaG91bGQgYmUgZGlmZidlZCBhZ2FpbnN0IG5ld1BhcmVudFZOb2RlXG4gKiBAcGFyYW0ge29iamVjdH0gZ2xvYmFsQ29udGV4dCBUaGUgY3VycmVudCBjb250ZXh0IG9iamVjdCAtIG1vZGlmaWVkIGJ5IGdldENoaWxkQ29udGV4dFxuICogQHBhcmFtIHtib29sZWFufSBpc1N2ZyBXaGV0aGVyIG9yIG5vdCB0aGlzIERPTSBub2RlIGlzIGFuIFNWRyBub2RlXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50Pn0gZXhjZXNzRG9tQ2hpbGRyZW5cbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuLi9pbnRlcm5hbCcpLkNvbXBvbmVudD59IGNvbW1pdFF1ZXVlIExpc3Qgb2YgY29tcG9uZW50c1xuICogd2hpY2ggaGF2ZSBjYWxsYmFja3MgdG8gaW52b2tlIGluIGNvbW1pdFJvb3RcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IG9sZERvbSBUaGUgY3VycmVudCBhdHRhY2hlZCBET01cbiAqIGVsZW1lbnQgYW55IG5ldyBkb20gZWxlbWVudHMgc2hvdWxkIGJlIHBsYWNlZCBhcm91bmQuIExpa2VseSBgbnVsbGAgb24gZmlyc3RcbiAqIHJlbmRlciAoZXhjZXB0IHdoZW4gaHlkcmF0aW5nKS4gQ2FuIGJlIGEgc2libGluZyBET00gZWxlbWVudCB3aGVuIGRpZmZpbmdcbiAqIEZyYWdtZW50cyB0aGF0IGhhdmUgc2libGluZ3MuIEluIG1vc3QgY2FzZXMsIGl0IHN0YXJ0cyBvdXQgYXMgYG9sZENoaWxkcmVuWzBdLl9kb21gLlxuICogQHBhcmFtIHtib29sZWFufSBpc0h5ZHJhdGluZyBXaGV0aGVyIG9yIG5vdCB3ZSBhcmUgaW4gaHlkcmF0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaWZmQ2hpbGRyZW4oXG5cdHBhcmVudERvbSxcblx0cmVuZGVyUmVzdWx0LFxuXHRuZXdQYXJlbnRWTm9kZSxcblx0b2xkUGFyZW50Vk5vZGUsXG5cdGdsb2JhbENvbnRleHQsXG5cdGlzU3ZnLFxuXHRleGNlc3NEb21DaGlsZHJlbixcblx0Y29tbWl0UXVldWUsXG5cdG9sZERvbSxcblx0aXNIeWRyYXRpbmdcbikge1xuXHRsZXQgaSwgaiwgb2xkVk5vZGUsIGNoaWxkVk5vZGUsIG5ld0RvbSwgZmlyc3RDaGlsZERvbSwgcmVmcztcblxuXHQvLyBUaGlzIGlzIGEgY29tcHJlc3Npb24gb2Ygb2xkUGFyZW50Vk5vZGUhPW51bGwgJiYgb2xkUGFyZW50Vk5vZGUgIT0gRU1QVFlfT0JKICYmIG9sZFBhcmVudFZOb2RlLl9jaGlsZHJlbiB8fCBFTVBUWV9BUlJcblx0Ly8gYXMgRU1QVFlfT0JKLl9jaGlsZHJlbiBzaG91bGQgYmUgYHVuZGVmaW5lZGAuXG5cdGxldCBvbGRDaGlsZHJlbiA9IChvbGRQYXJlbnRWTm9kZSAmJiBvbGRQYXJlbnRWTm9kZS5fY2hpbGRyZW4pIHx8IEVNUFRZX0FSUjtcblxuXHRsZXQgb2xkQ2hpbGRyZW5MZW5ndGggPSBvbGRDaGlsZHJlbi5sZW5ndGg7XG5cblx0bmV3UGFyZW50Vk5vZGUuX2NoaWxkcmVuID0gW107XG5cdGZvciAoaSA9IDA7IGkgPCByZW5kZXJSZXN1bHQubGVuZ3RoOyBpKyspIHtcblx0XHRjaGlsZFZOb2RlID0gcmVuZGVyUmVzdWx0W2ldO1xuXG5cdFx0aWYgKGNoaWxkVk5vZGUgPT0gbnVsbCB8fCB0eXBlb2YgY2hpbGRWTm9kZSA9PSAnYm9vbGVhbicpIHtcblx0XHRcdGNoaWxkVk5vZGUgPSBuZXdQYXJlbnRWTm9kZS5fY2hpbGRyZW5baV0gPSBudWxsO1xuXHRcdH1cblx0XHQvLyBJZiB0aGlzIG5ld1ZOb2RlIGlzIGJlaW5nIHJldXNlZCAoZS5nLiA8ZGl2PntyZXVzZX17cmV1c2V9PC9kaXY+KSBpbiB0aGUgc2FtZSBkaWZmLFxuXHRcdC8vIG9yIHdlIGFyZSByZW5kZXJpbmcgYSBjb21wb25lbnQgKGUuZy4gc2V0U3RhdGUpIGNvcHkgdGhlIG9sZFZOb2RlcyBzbyBpdCBjYW4gaGF2ZVxuXHRcdC8vIGl0J3Mgb3duIERPTSAmIGV0Yy4gcG9pbnRlcnNcblx0XHRlbHNlIGlmIChcblx0XHRcdHR5cGVvZiBjaGlsZFZOb2RlID09ICdzdHJpbmcnIHx8XG5cdFx0XHR0eXBlb2YgY2hpbGRWTm9kZSA9PSAnbnVtYmVyJyB8fFxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHZhbGlkLXR5cGVvZlxuXHRcdFx0dHlwZW9mIGNoaWxkVk5vZGUgPT0gJ2JpZ2ludCdcblx0XHQpIHtcblx0XHRcdGNoaWxkVk5vZGUgPSBuZXdQYXJlbnRWTm9kZS5fY2hpbGRyZW5baV0gPSBjcmVhdGVWTm9kZShcblx0XHRcdFx0bnVsbCxcblx0XHRcdFx0Y2hpbGRWTm9kZSxcblx0XHRcdFx0bnVsbCxcblx0XHRcdFx0bnVsbCxcblx0XHRcdFx0Y2hpbGRWTm9kZVxuXHRcdFx0KTtcblx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRWTm9kZSkpIHtcblx0XHRcdGNoaWxkVk5vZGUgPSBuZXdQYXJlbnRWTm9kZS5fY2hpbGRyZW5baV0gPSBjcmVhdGVWTm9kZShcblx0XHRcdFx0RnJhZ21lbnQsXG5cdFx0XHRcdHsgY2hpbGRyZW46IGNoaWxkVk5vZGUgfSxcblx0XHRcdFx0bnVsbCxcblx0XHRcdFx0bnVsbCxcblx0XHRcdFx0bnVsbFxuXHRcdFx0KTtcblx0XHR9IGVsc2UgaWYgKGNoaWxkVk5vZGUuX2RlcHRoID4gMCkge1xuXHRcdFx0Ly8gVk5vZGUgaXMgYWxyZWFkeSBpbiB1c2UsIGNsb25lIGl0LiBUaGlzIGNhbiBoYXBwZW4gaW4gdGhlIGZvbGxvd2luZ1xuXHRcdFx0Ly8gc2NlbmFyaW86XG5cdFx0XHQvLyAgIGNvbnN0IHJldXNlID0gPGRpdiAvPlxuXHRcdFx0Ly8gICA8ZGl2PntyZXVzZX08c3BhbiAvPntyZXVzZX08L2Rpdj5cblx0XHRcdGNoaWxkVk5vZGUgPSBuZXdQYXJlbnRWTm9kZS5fY2hpbGRyZW5baV0gPSBjcmVhdGVWTm9kZShcblx0XHRcdFx0Y2hpbGRWTm9kZS50eXBlLFxuXHRcdFx0XHRjaGlsZFZOb2RlLnByb3BzLFxuXHRcdFx0XHRjaGlsZFZOb2RlLmtleSxcblx0XHRcdFx0bnVsbCxcblx0XHRcdFx0Y2hpbGRWTm9kZS5fb3JpZ2luYWxcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNoaWxkVk5vZGUgPSBuZXdQYXJlbnRWTm9kZS5fY2hpbGRyZW5baV0gPSBjaGlsZFZOb2RlO1xuXHRcdH1cblxuXHRcdC8vIFRlcnNlciByZW1vdmVzIHRoZSBgY29udGludWVgIGhlcmUgYW5kIHdyYXBzIHRoZSBsb29wIGJvZHlcblx0XHQvLyBpbiBhIGBpZiAoY2hpbGRWTm9kZSkgeyAuLi4gfSBjb25kaXRpb25cblx0XHRpZiAoY2hpbGRWTm9kZSA9PSBudWxsKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjaGlsZFZOb2RlLl9wYXJlbnQgPSBuZXdQYXJlbnRWTm9kZTtcblx0XHRjaGlsZFZOb2RlLl9kZXB0aCA9IG5ld1BhcmVudFZOb2RlLl9kZXB0aCArIDE7XG5cblx0XHQvLyBDaGVjayBpZiB3ZSBmaW5kIGEgY29ycmVzcG9uZGluZyBlbGVtZW50IGluIG9sZENoaWxkcmVuLlxuXHRcdC8vIElmIGZvdW5kLCBkZWxldGUgdGhlIGFycmF5IGl0ZW0gYnkgc2V0dGluZyB0byBgdW5kZWZpbmVkYC5cblx0XHQvLyBXZSB1c2UgYHVuZGVmaW5lZGAsIGFzIGBudWxsYCBpcyByZXNlcnZlZCBmb3IgZW1wdHkgcGxhY2Vob2xkZXJzXG5cdFx0Ly8gKGhvbGVzKS5cblx0XHRvbGRWTm9kZSA9IG9sZENoaWxkcmVuW2ldO1xuXG5cdFx0aWYgKFxuXHRcdFx0b2xkVk5vZGUgPT09IG51bGwgfHxcblx0XHRcdChvbGRWTm9kZSAmJlxuXHRcdFx0XHRjaGlsZFZOb2RlLmtleSA9PSBvbGRWTm9kZS5rZXkgJiZcblx0XHRcdFx0Y2hpbGRWTm9kZS50eXBlID09PSBvbGRWTm9kZS50eXBlKVxuXHRcdCkge1xuXHRcdFx0b2xkQ2hpbGRyZW5baV0gPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEVpdGhlciBvbGRWTm9kZSA9PT0gdW5kZWZpbmVkIG9yIG9sZENoaWxkcmVuTGVuZ3RoID4gMCxcblx0XHRcdC8vIHNvIGFmdGVyIHRoaXMgbG9vcCBvbGRWTm9kZSA9PSBudWxsIG9yIG9sZFZOb2RlIGlzIGEgdmFsaWQgdmFsdWUuXG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgb2xkQ2hpbGRyZW5MZW5ndGg7IGorKykge1xuXHRcdFx0XHRvbGRWTm9kZSA9IG9sZENoaWxkcmVuW2pdO1xuXHRcdFx0XHQvLyBJZiBjaGlsZFZOb2RlIGlzIHVua2V5ZWQsIHdlIG9ubHkgbWF0Y2ggc2ltaWxhcmx5IHVua2V5ZWQgbm9kZXMsIG90aGVyd2lzZSB3ZSBtYXRjaCBieSBrZXkuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBtYXRjaCBieSB0eXBlIChpbiBlaXRoZXIgY2FzZSkuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRvbGRWTm9kZSAmJlxuXHRcdFx0XHRcdGNoaWxkVk5vZGUua2V5ID09IG9sZFZOb2RlLmtleSAmJlxuXHRcdFx0XHRcdGNoaWxkVk5vZGUudHlwZSA9PT0gb2xkVk5vZGUudHlwZVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRvbGRDaGlsZHJlbltqXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRvbGRWTm9kZSA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0b2xkVk5vZGUgPSBvbGRWTm9kZSB8fCBFTVBUWV9PQko7XG5cblx0XHQvLyBNb3JwaCB0aGUgb2xkIGVsZW1lbnQgaW50byB0aGUgbmV3IG9uZSwgYnV0IGRvbid0IGFwcGVuZCBpdCB0byB0aGUgZG9tIHlldFxuXHRcdGRpZmYoXG5cdFx0XHRwYXJlbnREb20sXG5cdFx0XHRjaGlsZFZOb2RlLFxuXHRcdFx0b2xkVk5vZGUsXG5cdFx0XHRnbG9iYWxDb250ZXh0LFxuXHRcdFx0aXNTdmcsXG5cdFx0XHRleGNlc3NEb21DaGlsZHJlbixcblx0XHRcdGNvbW1pdFF1ZXVlLFxuXHRcdFx0b2xkRG9tLFxuXHRcdFx0aXNIeWRyYXRpbmdcblx0XHQpO1xuXG5cdFx0bmV3RG9tID0gY2hpbGRWTm9kZS5fZG9tO1xuXG5cdFx0aWYgKChqID0gY2hpbGRWTm9kZS5yZWYpICYmIG9sZFZOb2RlLnJlZiAhPSBqKSB7XG5cdFx0XHRpZiAoIXJlZnMpIHJlZnMgPSBbXTtcblx0XHRcdGlmIChvbGRWTm9kZS5yZWYpIHJlZnMucHVzaChvbGRWTm9kZS5yZWYsIG51bGwsIGNoaWxkVk5vZGUpO1xuXHRcdFx0cmVmcy5wdXNoKGosIGNoaWxkVk5vZGUuX2NvbXBvbmVudCB8fCBuZXdEb20sIGNoaWxkVk5vZGUpO1xuXHRcdH1cblxuXHRcdGlmIChuZXdEb20gIT0gbnVsbCkge1xuXHRcdFx0aWYgKGZpcnN0Q2hpbGREb20gPT0gbnVsbCkge1xuXHRcdFx0XHRmaXJzdENoaWxkRG9tID0gbmV3RG9tO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoXG5cdFx0XHRcdHR5cGVvZiBjaGlsZFZOb2RlLnR5cGUgPT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdFx0XHRjaGlsZFZOb2RlLl9jaGlsZHJlbiA9PT0gb2xkVk5vZGUuX2NoaWxkcmVuXG5cdFx0XHQpIHtcblx0XHRcdFx0Y2hpbGRWTm9kZS5fbmV4dERvbSA9IG9sZERvbSA9IHJlb3JkZXJDaGlsZHJlbihcblx0XHRcdFx0XHRjaGlsZFZOb2RlLFxuXHRcdFx0XHRcdG9sZERvbSxcblx0XHRcdFx0XHRwYXJlbnREb21cblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9sZERvbSA9IHBsYWNlQ2hpbGQoXG5cdFx0XHRcdFx0cGFyZW50RG9tLFxuXHRcdFx0XHRcdGNoaWxkVk5vZGUsXG5cdFx0XHRcdFx0b2xkVk5vZGUsXG5cdFx0XHRcdFx0b2xkQ2hpbGRyZW4sXG5cdFx0XHRcdFx0bmV3RG9tLFxuXHRcdFx0XHRcdG9sZERvbVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mIG5ld1BhcmVudFZOb2RlLnR5cGUgPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHQvLyBCZWNhdXNlIHRoZSBuZXdQYXJlbnRWTm9kZSBpcyBGcmFnbWVudC1saWtlLCB3ZSBuZWVkIHRvIHNldCBpdCdzXG5cdFx0XHRcdC8vIF9uZXh0RG9tIHByb3BlcnR5IHRvIHRoZSBuZXh0U2libGluZyBvZiBpdHMgbGFzdCBjaGlsZCBET00gbm9kZS5cblx0XHRcdFx0Ly9cblx0XHRcdFx0Ly8gYG9sZERvbWAgY29udGFpbnMgdGhlIGNvcnJlY3QgdmFsdWUgaGVyZSBiZWNhdXNlIGlmIHRoZSBsYXN0IGNoaWxkXG5cdFx0XHRcdC8vIGlzIGEgRnJhZ21lbnQtbGlrZSwgdGhlbiBvbGREb20gaGFzIGFscmVhZHkgYmVlbiBzZXQgdG8gdGhhdCBjaGlsZCdzIF9uZXh0RG9tLlxuXHRcdFx0XHQvLyBJZiB0aGUgbGFzdCBjaGlsZCBpcyBhIERPTSBWTm9kZSwgdGhlbiBvbGREb20gd2lsbCBiZSBzZXQgdG8gdGhhdCBET01cblx0XHRcdFx0Ly8gbm9kZSdzIG5leHRTaWJsaW5nLlxuXHRcdFx0XHRuZXdQYXJlbnRWTm9kZS5fbmV4dERvbSA9IG9sZERvbTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0b2xkRG9tICYmXG5cdFx0XHRvbGRWTm9kZS5fZG9tID09IG9sZERvbSAmJlxuXHRcdFx0b2xkRG9tLnBhcmVudE5vZGUgIT0gcGFyZW50RG9tXG5cdFx0KSB7XG5cdFx0XHQvLyBUaGUgYWJvdmUgY29uZGl0aW9uIGlzIHRvIGhhbmRsZSBudWxsIHBsYWNlaG9sZGVycy4gU2VlIHRlc3QgaW4gcGxhY2Vob2xkZXIudGVzdC5qczpcblx0XHRcdC8vIGBlZmZpY2llbnRseSByZXBsYWNlIG51bGwgcGxhY2Vob2xkZXJzIGluIHBhcmVudCByZXJlbmRlcnNgXG5cdFx0XHRvbGREb20gPSBnZXREb21TaWJsaW5nKG9sZFZOb2RlKTtcblx0XHR9XG5cdH1cblxuXHRuZXdQYXJlbnRWTm9kZS5fZG9tID0gZmlyc3RDaGlsZERvbTtcblxuXHQvLyBSZW1vdmUgcmVtYWluaW5nIG9sZENoaWxkcmVuIGlmIHRoZXJlIGFyZSBhbnkuXG5cdGZvciAoaSA9IG9sZENoaWxkcmVuTGVuZ3RoOyBpLS07ICkge1xuXHRcdGlmIChvbGRDaGlsZHJlbltpXSAhPSBudWxsKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdHR5cGVvZiBuZXdQYXJlbnRWTm9kZS50eXBlID09ICdmdW5jdGlvbicgJiZcblx0XHRcdFx0b2xkQ2hpbGRyZW5baV0uX2RvbSAhPSBudWxsICYmXG5cdFx0XHRcdG9sZENoaWxkcmVuW2ldLl9kb20gPT0gbmV3UGFyZW50Vk5vZGUuX25leHREb21cblx0XHRcdCkge1xuXHRcdFx0XHQvLyBJZiB0aGUgbmV3UGFyZW50Vk5vZGUuX19uZXh0RG9tIHBvaW50cyB0byBhIGRvbSBub2RlIHRoYXQgaXMgYWJvdXQgdG9cblx0XHRcdFx0Ly8gYmUgdW5tb3VudGVkLCB0aGVuIGdldCB0aGUgbmV4dCBzaWJsaW5nIG9mIHRoYXQgdm5vZGUgYW5kIHNldFxuXHRcdFx0XHQvLyBfbmV4dERvbSB0byBpdFxuXHRcdFx0XHRuZXdQYXJlbnRWTm9kZS5fbmV4dERvbSA9IGdldERvbVNpYmxpbmcob2xkUGFyZW50Vk5vZGUsIGkgKyAxKTtcblx0XHRcdH1cblxuXHRcdFx0dW5tb3VudChvbGRDaGlsZHJlbltpXSwgb2xkQ2hpbGRyZW5baV0pO1xuXHRcdH1cblx0fVxuXG5cdC8vIFNldCByZWZzIG9ubHkgYWZ0ZXIgdW5tb3VudFxuXHRpZiAocmVmcykge1xuXHRcdGZvciAoaSA9IDA7IGkgPCByZWZzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRhcHBseVJlZihyZWZzW2ldLCByZWZzWysraV0sIHJlZnNbKytpXSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHJlb3JkZXJDaGlsZHJlbihjaGlsZFZOb2RlLCBvbGREb20sIHBhcmVudERvbSkge1xuXHQvLyBOb3RlOiBWTm9kZXMgaW4gbmVzdGVkIHN1c3BlbmRlZCB0cmVlcyBtYXkgYmUgbWlzc2luZyBfY2hpbGRyZW4uXG5cdGxldCBjID0gY2hpbGRWTm9kZS5fY2hpbGRyZW47XG5cdGxldCB0bXAgPSAwO1xuXHRmb3IgKDsgYyAmJiB0bXAgPCBjLmxlbmd0aDsgdG1wKyspIHtcblx0XHRsZXQgdm5vZGUgPSBjW3RtcF07XG5cdFx0aWYgKHZub2RlKSB7XG5cdFx0XHQvLyBXZSB0eXBpY2FsbHkgZW50ZXIgdGhpcyBjb2RlIHBhdGggb24gc0NVIGJhaWxvdXQsIHdoZXJlIHdlIGNvcHlcblx0XHRcdC8vIG9sZFZOb2RlLl9jaGlsZHJlbiB0byBuZXdWTm9kZS5fY2hpbGRyZW4uIElmIHRoYXQgaXMgdGhlIGNhc2UsIHdlIG5lZWRcblx0XHRcdC8vIHRvIHVwZGF0ZSB0aGUgb2xkIGNoaWxkcmVuJ3MgX3BhcmVudCBwb2ludGVyIHRvIHBvaW50IHRvIHRoZSBuZXdWTm9kZVxuXHRcdFx0Ly8gKGNoaWxkVk5vZGUgaGVyZSkuXG5cdFx0XHR2bm9kZS5fcGFyZW50ID0gY2hpbGRWTm9kZTtcblxuXHRcdFx0aWYgKHR5cGVvZiB2bm9kZS50eXBlID09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0b2xkRG9tID0gcmVvcmRlckNoaWxkcmVuKHZub2RlLCBvbGREb20sIHBhcmVudERvbSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvbGREb20gPSBwbGFjZUNoaWxkKFxuXHRcdFx0XHRcdHBhcmVudERvbSxcblx0XHRcdFx0XHR2bm9kZSxcblx0XHRcdFx0XHR2bm9kZSxcblx0XHRcdFx0XHRjLFxuXHRcdFx0XHRcdHZub2RlLl9kb20sXG5cdFx0XHRcdFx0b2xkRG9tXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG9sZERvbTtcbn1cblxuLyoqXG4gKiBGbGF0dGVuIGFuZCBsb29wIHRocm91Z2ggdGhlIGNoaWxkcmVuIG9mIGEgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW5kZXgnKS5Db21wb25lbnRDaGlsZHJlbn0gY2hpbGRyZW4gVGhlIHVuZmxhdHRlbmVkXG4gKiBjaGlsZHJlbiBvZiBhIHZpcnR1YWwgbm9kZVxuICogQHJldHVybnMge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZVtdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9DaGlsZEFycmF5KGNoaWxkcmVuLCBvdXQpIHtcblx0b3V0ID0gb3V0IHx8IFtdO1xuXHRpZiAoY2hpbGRyZW4gPT0gbnVsbCB8fCB0eXBlb2YgY2hpbGRyZW4gPT0gJ2Jvb2xlYW4nKSB7XG5cdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcblx0XHRjaGlsZHJlbi5zb21lKGNoaWxkID0+IHtcblx0XHRcdHRvQ2hpbGRBcnJheShjaGlsZCwgb3V0KTtcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRvdXQucHVzaChjaGlsZHJlbik7XG5cdH1cblx0cmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gcGxhY2VDaGlsZChcblx0cGFyZW50RG9tLFxuXHRjaGlsZFZOb2RlLFxuXHRvbGRWTm9kZSxcblx0b2xkQ2hpbGRyZW4sXG5cdG5ld0RvbSxcblx0b2xkRG9tXG4pIHtcblx0bGV0IG5leHREb207XG5cdGlmIChjaGlsZFZOb2RlLl9uZXh0RG9tICE9PSB1bmRlZmluZWQpIHtcblx0XHQvLyBPbmx5IEZyYWdtZW50cyBvciBjb21wb25lbnRzIHRoYXQgcmV0dXJuIEZyYWdtZW50IGxpa2UgVk5vZGVzIHdpbGxcblx0XHQvLyBoYXZlIGEgbm9uLXVuZGVmaW5lZCBfbmV4dERvbS4gQ29udGludWUgdGhlIGRpZmYgZnJvbSB0aGUgc2libGluZ1xuXHRcdC8vIG9mIGxhc3QgRE9NIGNoaWxkIG9mIHRoaXMgY2hpbGQgVk5vZGVcblx0XHRuZXh0RG9tID0gY2hpbGRWTm9kZS5fbmV4dERvbTtcblxuXHRcdC8vIEVhZ2VybHkgY2xlYW51cCBfbmV4dERvbS4gV2UgZG9uJ3QgbmVlZCB0byBwZXJzaXN0IHRoZSB2YWx1ZSBiZWNhdXNlXG5cdFx0Ly8gaXQgaXMgb25seSB1c2VkIGJ5IGBkaWZmQ2hpbGRyZW5gIHRvIGRldGVybWluZSB3aGVyZSB0byByZXN1bWUgdGhlIGRpZmYgYWZ0ZXJcblx0XHQvLyBkaWZmaW5nIENvbXBvbmVudHMgYW5kIEZyYWdtZW50cy4gT25jZSB3ZSBzdG9yZSBpdCB0aGUgbmV4dERPTSBsb2NhbCB2YXIsIHdlXG5cdFx0Ly8gY2FuIGNsZWFuIHVwIHRoZSBwcm9wZXJ0eVxuXHRcdGNoaWxkVk5vZGUuX25leHREb20gPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoXG5cdFx0b2xkVk5vZGUgPT0gbnVsbCB8fFxuXHRcdG5ld0RvbSAhPSBvbGREb20gfHxcblx0XHRuZXdEb20ucGFyZW50Tm9kZSA9PSBudWxsXG5cdCkge1xuXHRcdG91dGVyOiBpZiAob2xkRG9tID09IG51bGwgfHwgb2xkRG9tLnBhcmVudE5vZGUgIT09IHBhcmVudERvbSkge1xuXHRcdFx0cGFyZW50RG9tLmFwcGVuZENoaWxkKG5ld0RvbSk7XG5cdFx0XHRuZXh0RG9tID0gbnVsbDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gYGo8b2xkQ2hpbGRyZW5MZW5ndGg7IGorPTJgIGlzIGFuIGFsdGVybmF0aXZlIHRvIGBqKys8b2xkQ2hpbGRyZW5MZW5ndGgvMmBcblx0XHRcdGZvciAoXG5cdFx0XHRcdGxldCBzaWJEb20gPSBvbGREb20sIGogPSAwO1xuXHRcdFx0XHQoc2liRG9tID0gc2liRG9tLm5leHRTaWJsaW5nKSAmJiBqIDwgb2xkQ2hpbGRyZW4ubGVuZ3RoO1xuXHRcdFx0XHRqICs9IDJcblx0XHRcdCkge1xuXHRcdFx0XHRpZiAoc2liRG9tID09IG5ld0RvbSkge1xuXHRcdFx0XHRcdGJyZWFrIG91dGVyO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRwYXJlbnREb20uaW5zZXJ0QmVmb3JlKG5ld0RvbSwgb2xkRG9tKTtcblx0XHRcdG5leHREb20gPSBvbGREb207XG5cdFx0fVxuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBwcmUtY2FsY3VsYXRlZCB0aGUgbmV4dERPTSBub2RlLCB1c2UgaXQuIEVsc2UgY2FsY3VsYXRlIGl0IG5vd1xuXHQvLyBTdHJpY3RseSBjaGVjayBmb3IgYHVuZGVmaW5lZGAgaGVyZSBjdXogYG51bGxgIGlzIGEgdmFsaWQgdmFsdWUgb2YgYG5leHREb21gLlxuXHQvLyBTZWUgbW9yZSBkZXRhaWwgaW4gY3JlYXRlLWVsZW1lbnQuanM6Y3JlYXRlVk5vZGVcblx0aWYgKG5leHREb20gIT09IHVuZGVmaW5lZCkge1xuXHRcdG9sZERvbSA9IG5leHREb207XG5cdH0gZWxzZSB7XG5cdFx0b2xkRG9tID0gbmV3RG9tLm5leHRTaWJsaW5nO1xuXHR9XG5cblx0cmV0dXJuIG9sZERvbTtcbn1cbiIsImltcG9ydCB7IElTX05PTl9ESU1FTlNJT05BTCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgb3B0aW9ucyBmcm9tICcuLi9vcHRpb25zJztcblxuLyoqXG4gKiBEaWZmIHRoZSBvbGQgYW5kIG5ldyBwcm9wZXJ0aWVzIG9mIGEgVk5vZGUgYW5kIGFwcGx5IGNoYW5nZXMgdG8gdGhlIERPTSBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fSBkb20gVGhlIERPTSBub2RlIHRvIGFwcGx5XG4gKiBjaGFuZ2VzIHRvXG4gKiBAcGFyYW0ge29iamVjdH0gbmV3UHJvcHMgVGhlIG5ldyBwcm9wc1xuICogQHBhcmFtIHtvYmplY3R9IG9sZFByb3BzIFRoZSBvbGQgcHJvcHNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTdmcgV2hldGhlciBvciBub3QgdGhpcyBub2RlIGlzIGFuIFNWRyBub2RlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGh5ZHJhdGUgV2hldGhlciBvciBub3Qgd2UgYXJlIGluIGh5ZHJhdGlvbiBtb2RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaWZmUHJvcHMoZG9tLCBuZXdQcm9wcywgb2xkUHJvcHMsIGlzU3ZnLCBoeWRyYXRlKSB7XG5cdGxldCBpO1xuXG5cdGZvciAoaSBpbiBvbGRQcm9wcykge1xuXHRcdGlmIChpICE9PSAnY2hpbGRyZW4nICYmIGkgIT09ICdrZXknICYmICEoaSBpbiBuZXdQcm9wcykpIHtcblx0XHRcdHNldFByb3BlcnR5KGRvbSwgaSwgbnVsbCwgb2xkUHJvcHNbaV0sIGlzU3ZnKTtcblx0XHR9XG5cdH1cblxuXHRmb3IgKGkgaW4gbmV3UHJvcHMpIHtcblx0XHRpZiAoXG5cdFx0XHQoIWh5ZHJhdGUgfHwgdHlwZW9mIG5ld1Byb3BzW2ldID09ICdmdW5jdGlvbicpICYmXG5cdFx0XHRpICE9PSAnY2hpbGRyZW4nICYmXG5cdFx0XHRpICE9PSAna2V5JyAmJlxuXHRcdFx0aSAhPT0gJ3ZhbHVlJyAmJlxuXHRcdFx0aSAhPT0gJ2NoZWNrZWQnICYmXG5cdFx0XHRvbGRQcm9wc1tpXSAhPT0gbmV3UHJvcHNbaV1cblx0XHQpIHtcblx0XHRcdHNldFByb3BlcnR5KGRvbSwgaSwgbmV3UHJvcHNbaV0sIG9sZFByb3BzW2ldLCBpc1N2Zyk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlKHN0eWxlLCBrZXksIHZhbHVlKSB7XG5cdGlmIChrZXlbMF0gPT09ICctJykge1xuXHRcdHN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUpO1xuXHR9IGVsc2UgaWYgKHZhbHVlID09IG51bGwpIHtcblx0XHRzdHlsZVtrZXldID0gJyc7XG5cdH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlICE9ICdudW1iZXInIHx8IElTX05PTl9ESU1FTlNJT05BTC50ZXN0KGtleSkpIHtcblx0XHRzdHlsZVtrZXldID0gdmFsdWU7XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGVba2V5XSA9IHZhbHVlICsgJ3B4Jztcblx0fVxufVxuXG4vKipcbiAqIFNldCBhIHByb3BlcnR5IHZhbHVlIG9uIGEgRE9NIG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IGRvbSBUaGUgRE9NIG5vZGUgdG8gbW9kaWZ5XG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gc2V0XG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQgdGhlIHByb3BlcnR5IHRvXG4gKiBAcGFyYW0geyp9IG9sZFZhbHVlIFRoZSBvbGQgdmFsdWUgdGhlIHByb3BlcnR5IGhhZFxuICogQHBhcmFtIHtib29sZWFufSBpc1N2ZyBXaGV0aGVyIG9yIG5vdCB0aGlzIERPTSBub2RlIGlzIGFuIFNWRyBub2RlIG9yIG5vdFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0UHJvcGVydHkoZG9tLCBuYW1lLCB2YWx1ZSwgb2xkVmFsdWUsIGlzU3ZnKSB7XG5cdGxldCB1c2VDYXB0dXJlO1xuXG5cdG86IGlmIChuYW1lID09PSAnc3R5bGUnKSB7XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuXHRcdFx0ZG9tLnN0eWxlLmNzc1RleHQgPSB2YWx1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKHR5cGVvZiBvbGRWYWx1ZSA9PSAnc3RyaW5nJykge1xuXHRcdFx0XHRkb20uc3R5bGUuY3NzVGV4dCA9IG9sZFZhbHVlID0gJyc7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvbGRWYWx1ZSkge1xuXHRcdFx0XHRmb3IgKG5hbWUgaW4gb2xkVmFsdWUpIHtcblx0XHRcdFx0XHRpZiAoISh2YWx1ZSAmJiBuYW1lIGluIHZhbHVlKSkge1xuXHRcdFx0XHRcdFx0c2V0U3R5bGUoZG9tLnN0eWxlLCBuYW1lLCAnJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0XHRmb3IgKG5hbWUgaW4gdmFsdWUpIHtcblx0XHRcdFx0XHRpZiAoIW9sZFZhbHVlIHx8IHZhbHVlW25hbWVdICE9PSBvbGRWYWx1ZVtuYW1lXSkge1xuXHRcdFx0XHRcdFx0c2V0U3R5bGUoZG9tLnN0eWxlLCBuYW1lLCB2YWx1ZVtuYW1lXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdC8vIEJlbmNobWFyayBmb3IgY29tcGFyaXNvbjogaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81NzRjOTU0YmRiOTY1YjlhMDA5NjVhYzZcblx0ZWxzZSBpZiAobmFtZVswXSA9PT0gJ28nICYmIG5hbWVbMV0gPT09ICduJykge1xuXHRcdHVzZUNhcHR1cmUgPSBuYW1lICE9PSAobmFtZSA9IG5hbWUucmVwbGFjZSgvQ2FwdHVyZSQvLCAnJykpO1xuXG5cdFx0Ly8gSW5mZXIgY29ycmVjdCBjYXNpbmcgZm9yIERPTSBidWlsdC1pbiBldmVudHM6XG5cdFx0aWYgKG5hbWUudG9Mb3dlckNhc2UoKSBpbiBkb20pIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCkuc2xpY2UoMik7XG5cdFx0ZWxzZSBuYW1lID0gbmFtZS5zbGljZSgyKTtcblxuXHRcdGlmICghZG9tLl9saXN0ZW5lcnMpIGRvbS5fbGlzdGVuZXJzID0ge307XG5cdFx0ZG9tLl9saXN0ZW5lcnNbbmFtZSArIHVzZUNhcHR1cmVdID0gdmFsdWU7XG5cblx0XHRpZiAodmFsdWUpIHtcblx0XHRcdGlmICghb2xkVmFsdWUpIHtcblx0XHRcdFx0Y29uc3QgaGFuZGxlciA9IHVzZUNhcHR1cmUgPyBldmVudFByb3h5Q2FwdHVyZSA6IGV2ZW50UHJveHk7XG5cdFx0XHRcdGRvbS5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGhhbmRsZXIsIHVzZUNhcHR1cmUpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBoYW5kbGVyID0gdXNlQ2FwdHVyZSA/IGV2ZW50UHJveHlDYXB0dXJlIDogZXZlbnRQcm94eTtcblx0XHRcdGRvbS5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGhhbmRsZXIsIHVzZUNhcHR1cmUpO1xuXHRcdH1cblx0fSBlbHNlIGlmIChuYW1lICE9PSAnZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwnKSB7XG5cdFx0aWYgKGlzU3ZnKSB7XG5cdFx0XHQvLyBOb3JtYWxpemUgaW5jb3JyZWN0IHByb3AgdXNhZ2UgZm9yIFNWRzpcblx0XHRcdC8vIC0geGxpbms6aHJlZiAvIHhsaW5rSHJlZiAtLT4gaHJlZiAoeGxpbms6aHJlZiB3YXMgcmVtb3ZlZCBmcm9tIFNWRyBhbmQgaXNuJ3QgbmVlZGVkKVxuXHRcdFx0Ly8gLSBjbGFzc05hbWUgLS0+IGNsYXNzXG5cdFx0XHRuYW1lID0gbmFtZS5yZXBsYWNlKC94bGluayhIfDpoKS8sICdoJykucmVwbGFjZSgvc05hbWUkLywgJ3MnKTtcblx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0bmFtZSAhPT0gJ2hyZWYnICYmXG5cdFx0XHRuYW1lICE9PSAnbGlzdCcgJiZcblx0XHRcdG5hbWUgIT09ICdmb3JtJyAmJlxuXHRcdFx0Ly8gRGVmYXVsdCB2YWx1ZSBpbiBicm93c2VycyBpcyBgLTFgIGFuZCBhbiBlbXB0eSBzdHJpbmcgaXNcblx0XHRcdC8vIGNhc3QgdG8gYDBgIGluc3RlYWRcblx0XHRcdG5hbWUgIT09ICd0YWJJbmRleCcgJiZcblx0XHRcdG5hbWUgIT09ICdkb3dubG9hZCcgJiZcblx0XHRcdG5hbWUgaW4gZG9tXG5cdFx0KSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkb21bbmFtZV0gPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcblx0XHRcdFx0Ly8gbGFiZWxsZWQgYnJlYWsgaXMgMWIgc21hbGxlciBoZXJlIHRoYW4gYSByZXR1cm4gc3RhdGVtZW50IChzb3JyeSlcblx0XHRcdFx0YnJlYWsgbztcblx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0fVxuXG5cdFx0Ly8gQVJJQS1hdHRyaWJ1dGVzIGhhdmUgYSBkaWZmZXJlbnQgbm90aW9uIG9mIGJvb2xlYW4gdmFsdWVzLlxuXHRcdC8vIFRoZSB2YWx1ZSBgZmFsc2VgIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBhdHRyaWJ1dGUgbm90XG5cdFx0Ly8gZXhpc3Rpbmcgb24gdGhlIERPTSwgc28gd2UgY2FuJ3QgcmVtb3ZlIGl0LiBGb3Igbm9uLWJvb2xlYW5cblx0XHQvLyBBUklBLWF0dHJpYnV0ZXMgd2UgY291bGQgdHJlYXQgZmFsc2UgYXMgYSByZW1vdmFsLCBidXQgdGhlXG5cdFx0Ly8gYW1vdW50IG9mIGV4Y2VwdGlvbnMgd291bGQgY29zdCB1cyB0b28gbWFueSBieXRlcy4gT24gdG9wIG9mXG5cdFx0Ly8gdGhhdCBvdGhlciBWRE9NIGZyYW1ld29ya3MgYWxzbyBhbHdheXMgc3RyaW5naWZ5IGBmYWxzZWAuXG5cblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHQvLyBuZXZlciBzZXJpYWxpemUgZnVuY3Rpb25zIGFzIGF0dHJpYnV0ZSB2YWx1ZXNcblx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0dmFsdWUgIT0gbnVsbCAmJlxuXHRcdFx0KHZhbHVlICE9PSBmYWxzZSB8fCAobmFtZVswXSA9PT0gJ2EnICYmIG5hbWVbMV0gPT09ICdyJykpXG5cdFx0KSB7XG5cdFx0XHRkb20uc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZG9tLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBQcm94eSBhbiBldmVudCB0byBob29rZWQgZXZlbnQgaGFuZGxlcnNcbiAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIGV2ZW50IG9iamVjdCBmcm9tIHRoZSBicm93c2VyXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBldmVudFByb3h5KGUpIHtcblx0dGhpcy5fbGlzdGVuZXJzW2UudHlwZSArIGZhbHNlXShvcHRpb25zLmV2ZW50ID8gb3B0aW9ucy5ldmVudChlKSA6IGUpO1xufVxuXG5mdW5jdGlvbiBldmVudFByb3h5Q2FwdHVyZShlKSB7XG5cdHRoaXMuX2xpc3RlbmVyc1tlLnR5cGUgKyB0cnVlXShvcHRpb25zLmV2ZW50ID8gb3B0aW9ucy5ldmVudChlKSA6IGUpO1xufVxuIiwiaW1wb3J0IHsgRU1QVFlfT0JKIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IENvbXBvbmVudCwgZ2V0RG9tU2libGluZyB9IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJy4uL2NyZWF0ZS1lbGVtZW50JztcbmltcG9ydCB7IGRpZmZDaGlsZHJlbiB9IGZyb20gJy4vY2hpbGRyZW4nO1xuaW1wb3J0IHsgZGlmZlByb3BzLCBzZXRQcm9wZXJ0eSB9IGZyb20gJy4vcHJvcHMnO1xuaW1wb3J0IHsgYXNzaWduLCByZW1vdmVOb2RlLCBzbGljZSB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IG9wdGlvbnMgZnJvbSAnLi4vb3B0aW9ucyc7XG5cbi8qKlxuICogRGlmZiB0d28gdmlydHVhbCBub2RlcyBhbmQgYXBwbHkgcHJvcGVyIGNoYW5nZXMgdG8gdGhlIERPTVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gcGFyZW50RG9tIFRoZSBwYXJlbnQgb2YgdGhlIERPTSBlbGVtZW50XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gbmV3Vk5vZGUgVGhlIG5ldyB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBvbGRWTm9kZSBUaGUgb2xkIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtvYmplY3R9IGdsb2JhbENvbnRleHQgVGhlIGN1cnJlbnQgY29udGV4dCBvYmplY3QuIE1vZGlmaWVkIGJ5IGdldENoaWxkQ29udGV4dFxuICogQHBhcmFtIHtib29sZWFufSBpc1N2ZyBXaGV0aGVyIG9yIG5vdCB0aGlzIGVsZW1lbnQgaXMgYW4gU1ZHIG5vZGVcbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnQ+fSBleGNlc3NEb21DaGlsZHJlblxuICogQHBhcmFtIHtBcnJheTxpbXBvcnQoJy4uL2ludGVybmFsJykuQ29tcG9uZW50Pn0gY29tbWl0UXVldWUgTGlzdCBvZiBjb21wb25lbnRzXG4gKiB3aGljaCBoYXZlIGNhbGxiYWNrcyB0byBpbnZva2UgaW4gY29tbWl0Um9vdFxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gb2xkRG9tIFRoZSBjdXJyZW50IGF0dGFjaGVkIERPTVxuICogZWxlbWVudCBhbnkgbmV3IGRvbSBlbGVtZW50cyBzaG91bGQgYmUgcGxhY2VkIGFyb3VuZC4gTGlrZWx5IGBudWxsYCBvbiBmaXJzdFxuICogcmVuZGVyIChleGNlcHQgd2hlbiBoeWRyYXRpbmcpLiBDYW4gYmUgYSBzaWJsaW5nIERPTSBlbGVtZW50IHdoZW4gZGlmZmluZ1xuICogRnJhZ21lbnRzIHRoYXQgaGF2ZSBzaWJsaW5ncy4gSW4gbW9zdCBjYXNlcywgaXQgc3RhcnRzIG91dCBhcyBgb2xkQ2hpbGRyZW5bMF0uX2RvbWAuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0h5ZHJhdGluZ10gV2hldGhlciBvciBub3Qgd2UgYXJlIGluIGh5ZHJhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZihcblx0cGFyZW50RG9tLFxuXHRuZXdWTm9kZSxcblx0b2xkVk5vZGUsXG5cdGdsb2JhbENvbnRleHQsXG5cdGlzU3ZnLFxuXHRleGNlc3NEb21DaGlsZHJlbixcblx0Y29tbWl0UXVldWUsXG5cdG9sZERvbSxcblx0aXNIeWRyYXRpbmdcbikge1xuXHRsZXQgdG1wLFxuXHRcdG5ld1R5cGUgPSBuZXdWTm9kZS50eXBlO1xuXG5cdC8vIFdoZW4gcGFzc2luZyB0aHJvdWdoIGNyZWF0ZUVsZW1lbnQgaXQgYXNzaWducyB0aGUgb2JqZWN0XG5cdC8vIGNvbnN0cnVjdG9yIGFzIHVuZGVmaW5lZC4gVGhpcyB0byBwcmV2ZW50IEpTT04taW5qZWN0aW9uLlxuXHRpZiAobmV3Vk5vZGUuY29uc3RydWN0b3IgIT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG5cblx0Ly8gSWYgdGhlIHByZXZpb3VzIGRpZmYgYmFpbGVkIG91dCwgcmVzdW1lIGNyZWF0aW5nL2h5ZHJhdGluZy5cblx0aWYgKG9sZFZOb2RlLl9oeWRyYXRpbmcgIT0gbnVsbCkge1xuXHRcdGlzSHlkcmF0aW5nID0gb2xkVk5vZGUuX2h5ZHJhdGluZztcblx0XHRvbGREb20gPSBuZXdWTm9kZS5fZG9tID0gb2xkVk5vZGUuX2RvbTtcblx0XHQvLyBpZiB3ZSByZXN1bWUsIHdlIHdhbnQgdGhlIHRyZWUgdG8gYmUgXCJ1bmxvY2tlZFwiXG5cdFx0bmV3Vk5vZGUuX2h5ZHJhdGluZyA9IG51bGw7XG5cdFx0ZXhjZXNzRG9tQ2hpbGRyZW4gPSBbb2xkRG9tXTtcblx0fVxuXG5cdGlmICgodG1wID0gb3B0aW9ucy5fZGlmZikpIHRtcChuZXdWTm9kZSk7XG5cblx0dHJ5IHtcblx0XHRvdXRlcjogaWYgKHR5cGVvZiBuZXdUeXBlID09ICdmdW5jdGlvbicpIHtcblx0XHRcdGxldCBjLCBpc05ldywgb2xkUHJvcHMsIG9sZFN0YXRlLCBzbmFwc2hvdCwgY2xlYXJQcm9jZXNzaW5nRXhjZXB0aW9uO1xuXHRcdFx0bGV0IG5ld1Byb3BzID0gbmV3Vk5vZGUucHJvcHM7XG5cblx0XHRcdC8vIE5lY2Vzc2FyeSBmb3IgY3JlYXRlQ29udGV4dCBhcGkuIFNldHRpbmcgdGhpcyBwcm9wZXJ0eSB3aWxsIHBhc3Ncblx0XHRcdC8vIHRoZSBjb250ZXh0IHZhbHVlIGFzIGB0aGlzLmNvbnRleHRgIGp1c3QgZm9yIHRoaXMgY29tcG9uZW50LlxuXHRcdFx0dG1wID0gbmV3VHlwZS5jb250ZXh0VHlwZTtcblx0XHRcdGxldCBwcm92aWRlciA9IHRtcCAmJiBnbG9iYWxDb250ZXh0W3RtcC5faWRdO1xuXHRcdFx0bGV0IGNvbXBvbmVudENvbnRleHQgPSB0bXBcblx0XHRcdFx0PyBwcm92aWRlclxuXHRcdFx0XHRcdD8gcHJvdmlkZXIucHJvcHMudmFsdWVcblx0XHRcdFx0XHQ6IHRtcC5fZGVmYXVsdFZhbHVlXG5cdFx0XHRcdDogZ2xvYmFsQ29udGV4dDtcblxuXHRcdFx0Ly8gR2V0IGNvbXBvbmVudCBhbmQgc2V0IGl0IHRvIGBjYFxuXHRcdFx0aWYgKG9sZFZOb2RlLl9jb21wb25lbnQpIHtcblx0XHRcdFx0YyA9IG5ld1ZOb2RlLl9jb21wb25lbnQgPSBvbGRWTm9kZS5fY29tcG9uZW50O1xuXHRcdFx0XHRjbGVhclByb2Nlc3NpbmdFeGNlcHRpb24gPSBjLl9wcm9jZXNzaW5nRXhjZXB0aW9uID0gYy5fcGVuZGluZ0Vycm9yO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gSW5zdGFudGlhdGUgdGhlIG5ldyBjb21wb25lbnRcblx0XHRcdFx0aWYgKCdwcm90b3R5cGUnIGluIG5ld1R5cGUgJiYgbmV3VHlwZS5wcm90b3R5cGUucmVuZGVyKSB7XG5cdFx0XHRcdFx0Ly8gQHRzLWlnbm9yZSBUaGUgY2hlY2sgYWJvdmUgdmVyaWZpZXMgdGhhdCBuZXdUeXBlIGlzIHN1cHBvc2UgdG8gYmUgY29uc3RydWN0ZWRcblx0XHRcdFx0XHRuZXdWTm9kZS5fY29tcG9uZW50ID0gYyA9IG5ldyBuZXdUeXBlKG5ld1Byb3BzLCBjb21wb25lbnRDb250ZXh0KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gQHRzLWlnbm9yZSBUcnVzdCBtZSwgQ29tcG9uZW50IGltcGxlbWVudHMgdGhlIGludGVyZmFjZSB3ZSB3YW50XG5cdFx0XHRcdFx0bmV3Vk5vZGUuX2NvbXBvbmVudCA9IGMgPSBuZXcgQ29tcG9uZW50KG5ld1Byb3BzLCBjb21wb25lbnRDb250ZXh0KTtcblx0XHRcdFx0XHRjLmNvbnN0cnVjdG9yID0gbmV3VHlwZTtcblx0XHRcdFx0XHRjLnJlbmRlciA9IGRvUmVuZGVyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwcm92aWRlcikgcHJvdmlkZXIuc3ViKGMpO1xuXG5cdFx0XHRcdGMucHJvcHMgPSBuZXdQcm9wcztcblx0XHRcdFx0aWYgKCFjLnN0YXRlKSBjLnN0YXRlID0ge307XG5cdFx0XHRcdGMuY29udGV4dCA9IGNvbXBvbmVudENvbnRleHQ7XG5cdFx0XHRcdGMuX2dsb2JhbENvbnRleHQgPSBnbG9iYWxDb250ZXh0O1xuXHRcdFx0XHRpc05ldyA9IGMuX2RpcnR5ID0gdHJ1ZTtcblx0XHRcdFx0Yy5fcmVuZGVyQ2FsbGJhY2tzID0gW107XG5cdFx0XHR9XG5cblx0XHRcdC8vIEludm9rZSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcblx0XHRcdGlmIChjLl9uZXh0U3RhdGUgPT0gbnVsbCkge1xuXHRcdFx0XHRjLl9uZXh0U3RhdGUgPSBjLnN0YXRlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG5ld1R5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzICE9IG51bGwpIHtcblx0XHRcdFx0aWYgKGMuX25leHRTdGF0ZSA9PSBjLnN0YXRlKSB7XG5cdFx0XHRcdFx0Yy5fbmV4dFN0YXRlID0gYXNzaWduKHt9LCBjLl9uZXh0U3RhdGUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YXNzaWduKFxuXHRcdFx0XHRcdGMuX25leHRTdGF0ZSxcblx0XHRcdFx0XHRuZXdUeXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXdQcm9wcywgYy5fbmV4dFN0YXRlKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRvbGRQcm9wcyA9IGMucHJvcHM7XG5cdFx0XHRvbGRTdGF0ZSA9IGMuc3RhdGU7XG5cblx0XHRcdC8vIEludm9rZSBwcmUtcmVuZGVyIGxpZmVjeWNsZSBtZXRob2RzXG5cdFx0XHRpZiAoaXNOZXcpIHtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdG5ld1R5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09IG51bGwgJiZcblx0XHRcdFx0XHRjLmNvbXBvbmVudFdpbGxNb3VudCAhPSBudWxsXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGMuY29tcG9uZW50V2lsbE1vdW50KCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYy5jb21wb25lbnREaWRNb3VudCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Yy5fcmVuZGVyQ2FsbGJhY2tzLnB1c2goYy5jb21wb25lbnREaWRNb3VudCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRuZXdUeXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PSBudWxsICYmXG5cdFx0XHRcdFx0bmV3UHJvcHMgIT09IG9sZFByb3BzICYmXG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICE9IG51bGxcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzLCBjb21wb25lbnRDb250ZXh0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHQoIWMuX2ZvcmNlICYmXG5cdFx0XHRcdFx0XHRjLnNob3VsZENvbXBvbmVudFVwZGF0ZSAhPSBudWxsICYmXG5cdFx0XHRcdFx0XHRjLnNob3VsZENvbXBvbmVudFVwZGF0ZShcblx0XHRcdFx0XHRcdFx0bmV3UHJvcHMsXG5cdFx0XHRcdFx0XHRcdGMuX25leHRTdGF0ZSxcblx0XHRcdFx0XHRcdFx0Y29tcG9uZW50Q29udGV4dFxuXHRcdFx0XHRcdFx0KSA9PT0gZmFsc2UpIHx8XG5cdFx0XHRcdFx0bmV3Vk5vZGUuX29yaWdpbmFsID09PSBvbGRWTm9kZS5fb3JpZ2luYWxcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0Yy5wcm9wcyA9IG5ld1Byb3BzO1xuXHRcdFx0XHRcdGMuc3RhdGUgPSBjLl9uZXh0U3RhdGU7XG5cdFx0XHRcdFx0Ly8gTW9yZSBpbmZvIGFib3V0IHRoaXMgaGVyZTogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vSm92aURlQ3Jvb2NrL2JlYzVmMmNlOTM1NDRkMmU2MDcwZWY4ZTAwMzZlNGU4XG5cdFx0XHRcdFx0aWYgKG5ld1ZOb2RlLl9vcmlnaW5hbCAhPT0gb2xkVk5vZGUuX29yaWdpbmFsKSBjLl9kaXJ0eSA9IGZhbHNlO1xuXHRcdFx0XHRcdGMuX3Zub2RlID0gbmV3Vk5vZGU7XG5cdFx0XHRcdFx0bmV3Vk5vZGUuX2RvbSA9IG9sZFZOb2RlLl9kb207XG5cdFx0XHRcdFx0bmV3Vk5vZGUuX2NoaWxkcmVuID0gb2xkVk5vZGUuX2NoaWxkcmVuO1xuXHRcdFx0XHRcdG5ld1ZOb2RlLl9jaGlsZHJlbi5mb3JFYWNoKHZub2RlID0+IHtcblx0XHRcdFx0XHRcdGlmICh2bm9kZSkgdm5vZGUuX3BhcmVudCA9IG5ld1ZOb2RlO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGlmIChjLl9yZW5kZXJDYWxsYmFja3MubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRjb21taXRRdWV1ZS5wdXNoKGMpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrIG91dGVyO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGMuY29tcG9uZW50V2lsbFVwZGF0ZSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsVXBkYXRlKG5ld1Byb3BzLCBjLl9uZXh0U3RhdGUsIGNvbXBvbmVudENvbnRleHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGMuY29tcG9uZW50RGlkVXBkYXRlICE9IG51bGwpIHtcblx0XHRcdFx0XHRjLl9yZW5kZXJDYWxsYmFja3MucHVzaCgoKSA9PiB7XG5cdFx0XHRcdFx0XHRjLmNvbXBvbmVudERpZFVwZGF0ZShvbGRQcm9wcywgb2xkU3RhdGUsIHNuYXBzaG90KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRjLmNvbnRleHQgPSBjb21wb25lbnRDb250ZXh0O1xuXHRcdFx0Yy5wcm9wcyA9IG5ld1Byb3BzO1xuXHRcdFx0Yy5fdm5vZGUgPSBuZXdWTm9kZTtcblx0XHRcdGMuX3BhcmVudERvbSA9IHBhcmVudERvbTtcblxuXHRcdFx0bGV0IHJlbmRlckhvb2sgPSBvcHRpb25zLl9yZW5kZXIsXG5cdFx0XHRcdGNvdW50ID0gMDtcblx0XHRcdGlmICgncHJvdG90eXBlJyBpbiBuZXdUeXBlICYmIG5ld1R5cGUucHJvdG90eXBlLnJlbmRlcikge1xuXHRcdFx0XHRjLnN0YXRlID0gYy5fbmV4dFN0YXRlO1xuXHRcdFx0XHRjLl9kaXJ0eSA9IGZhbHNlO1xuXG5cdFx0XHRcdGlmIChyZW5kZXJIb29rKSByZW5kZXJIb29rKG5ld1ZOb2RlKTtcblxuXHRcdFx0XHR0bXAgPSBjLnJlbmRlcihjLnByb3BzLCBjLnN0YXRlLCBjLmNvbnRleHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGMuX2RpcnR5ID0gZmFsc2U7XG5cdFx0XHRcdFx0aWYgKHJlbmRlckhvb2spIHJlbmRlckhvb2sobmV3Vk5vZGUpO1xuXG5cdFx0XHRcdFx0dG1wID0gYy5yZW5kZXIoYy5wcm9wcywgYy5zdGF0ZSwgYy5jb250ZXh0KTtcblxuXHRcdFx0XHRcdC8vIEhhbmRsZSBzZXRTdGF0ZSBjYWxsZWQgaW4gcmVuZGVyLCBzZWUgIzI1NTNcblx0XHRcdFx0XHRjLnN0YXRlID0gYy5fbmV4dFN0YXRlO1xuXHRcdFx0XHR9IHdoaWxlIChjLl9kaXJ0eSAmJiArK2NvdW50IDwgMjUpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIYW5kbGUgc2V0U3RhdGUgY2FsbGVkIGluIHJlbmRlciwgc2VlICMyNTUzXG5cdFx0XHRjLnN0YXRlID0gYy5fbmV4dFN0YXRlO1xuXG5cdFx0XHRpZiAoYy5nZXRDaGlsZENvbnRleHQgIT0gbnVsbCkge1xuXHRcdFx0XHRnbG9iYWxDb250ZXh0ID0gYXNzaWduKGFzc2lnbih7fSwgZ2xvYmFsQ29udGV4dCksIGMuZ2V0Q2hpbGRDb250ZXh0KCkpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWlzTmV3ICYmIGMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgIT0gbnVsbCkge1xuXHRcdFx0XHRzbmFwc2hvdCA9IGMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUob2xkUHJvcHMsIG9sZFN0YXRlKTtcblx0XHRcdH1cblxuXHRcdFx0bGV0IGlzVG9wTGV2ZWxGcmFnbWVudCA9XG5cdFx0XHRcdHRtcCAhPSBudWxsICYmIHRtcC50eXBlID09PSBGcmFnbWVudCAmJiB0bXAua2V5ID09IG51bGw7XG5cdFx0XHRsZXQgcmVuZGVyUmVzdWx0ID0gaXNUb3BMZXZlbEZyYWdtZW50ID8gdG1wLnByb3BzLmNoaWxkcmVuIDogdG1wO1xuXG5cdFx0XHRkaWZmQ2hpbGRyZW4oXG5cdFx0XHRcdHBhcmVudERvbSxcblx0XHRcdFx0QXJyYXkuaXNBcnJheShyZW5kZXJSZXN1bHQpID8gcmVuZGVyUmVzdWx0IDogW3JlbmRlclJlc3VsdF0sXG5cdFx0XHRcdG5ld1ZOb2RlLFxuXHRcdFx0XHRvbGRWTm9kZSxcblx0XHRcdFx0Z2xvYmFsQ29udGV4dCxcblx0XHRcdFx0aXNTdmcsXG5cdFx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRcdFx0XHRjb21taXRRdWV1ZSxcblx0XHRcdFx0b2xkRG9tLFxuXHRcdFx0XHRpc0h5ZHJhdGluZ1xuXHRcdFx0KTtcblxuXHRcdFx0Yy5iYXNlID0gbmV3Vk5vZGUuX2RvbTtcblxuXHRcdFx0Ly8gV2Ugc3VjY2Vzc2Z1bGx5IHJlbmRlcmVkIHRoaXMgVk5vZGUsIHVuc2V0IGFueSBzdG9yZWQgaHlkcmF0aW9uL2JhaWxvdXQgc3RhdGU6XG5cdFx0XHRuZXdWTm9kZS5faHlkcmF0aW5nID0gbnVsbDtcblxuXHRcdFx0aWYgKGMuX3JlbmRlckNhbGxiYWNrcy5sZW5ndGgpIHtcblx0XHRcdFx0Y29tbWl0UXVldWUucHVzaChjKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGNsZWFyUHJvY2Vzc2luZ0V4Y2VwdGlvbikge1xuXHRcdFx0XHRjLl9wZW5kaW5nRXJyb3IgPSBjLl9wcm9jZXNzaW5nRXhjZXB0aW9uID0gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Yy5fZm9yY2UgPSBmYWxzZTtcblx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW4gPT0gbnVsbCAmJlxuXHRcdFx0bmV3Vk5vZGUuX29yaWdpbmFsID09PSBvbGRWTm9kZS5fb3JpZ2luYWxcblx0XHQpIHtcblx0XHRcdG5ld1ZOb2RlLl9jaGlsZHJlbiA9IG9sZFZOb2RlLl9jaGlsZHJlbjtcblx0XHRcdG5ld1ZOb2RlLl9kb20gPSBvbGRWTm9kZS5fZG9tO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRuZXdWTm9kZS5fZG9tID0gZGlmZkVsZW1lbnROb2Rlcyhcblx0XHRcdFx0b2xkVk5vZGUuX2RvbSxcblx0XHRcdFx0bmV3Vk5vZGUsXG5cdFx0XHRcdG9sZFZOb2RlLFxuXHRcdFx0XHRnbG9iYWxDb250ZXh0LFxuXHRcdFx0XHRpc1N2Zyxcblx0XHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW4sXG5cdFx0XHRcdGNvbW1pdFF1ZXVlLFxuXHRcdFx0XHRpc0h5ZHJhdGluZ1xuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRpZiAoKHRtcCA9IG9wdGlvbnMuZGlmZmVkKSkgdG1wKG5ld1ZOb2RlKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdG5ld1ZOb2RlLl9vcmlnaW5hbCA9IG51bGw7XG5cdFx0Ly8gaWYgaHlkcmF0aW5nIG9yIGNyZWF0aW5nIGluaXRpYWwgdHJlZSwgYmFpbG91dCBwcmVzZXJ2ZXMgRE9NOlxuXHRcdGlmIChpc0h5ZHJhdGluZyB8fCBleGNlc3NEb21DaGlsZHJlbiAhPSBudWxsKSB7XG5cdFx0XHRuZXdWTm9kZS5fZG9tID0gb2xkRG9tO1xuXHRcdFx0bmV3Vk5vZGUuX2h5ZHJhdGluZyA9ICEhaXNIeWRyYXRpbmc7XG5cdFx0XHRleGNlc3NEb21DaGlsZHJlbltleGNlc3NEb21DaGlsZHJlbi5pbmRleE9mKG9sZERvbSldID0gbnVsbDtcblx0XHRcdC8vIF4gY291bGQgcG9zc2libHkgYmUgc2ltcGxpZmllZCB0bzpcblx0XHRcdC8vIGV4Y2Vzc0RvbUNoaWxkcmVuLmxlbmd0aCA9IDA7XG5cdFx0fVxuXHRcdG9wdGlvbnMuX2NhdGNoRXJyb3IoZSwgbmV3Vk5vZGUsIG9sZFZOb2RlKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuLi9pbnRlcm5hbCcpLkNvbXBvbmVudD59IGNvbW1pdFF1ZXVlIExpc3Qgb2YgY29tcG9uZW50c1xuICogd2hpY2ggaGF2ZSBjYWxsYmFja3MgdG8gaW52b2tlIGluIGNvbW1pdFJvb3RcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSByb290XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21taXRSb290KGNvbW1pdFF1ZXVlLCByb290KSB7XG5cdGlmIChvcHRpb25zLl9jb21taXQpIG9wdGlvbnMuX2NvbW1pdChyb290LCBjb21taXRRdWV1ZSk7XG5cblx0Y29tbWl0UXVldWUuc29tZShjID0+IHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gQHRzLWlnbm9yZSBSZXVzZSB0aGUgY29tbWl0UXVldWUgdmFyaWFibGUgaGVyZSBzbyB0aGUgdHlwZSBjaGFuZ2VzXG5cdFx0XHRjb21taXRRdWV1ZSA9IGMuX3JlbmRlckNhbGxiYWNrcztcblx0XHRcdGMuX3JlbmRlckNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0Y29tbWl0UXVldWUuc29tZShjYiA9PiB7XG5cdFx0XHRcdC8vIEB0cy1pZ25vcmUgU2VlIGFib3ZlIHRzLWlnbm9yZSBvbiBjb21taXRRdWV1ZVxuXHRcdFx0XHRjYi5jYWxsKGMpO1xuXHRcdFx0fSk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0b3B0aW9ucy5fY2F0Y2hFcnJvcihlLCBjLl92bm9kZSk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLyoqXG4gKiBEaWZmIHR3byB2aXJ0dWFsIG5vZGVzIHJlcHJlc2VudGluZyBET00gZWxlbWVudFxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gZG9tIFRoZSBET00gZWxlbWVudCByZXByZXNlbnRpbmdcbiAqIHRoZSB2aXJ0dWFsIG5vZGVzIGJlaW5nIGRpZmZlZFxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IG5ld1ZOb2RlIFRoZSBuZXcgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gb2xkVk5vZGUgVGhlIG9sZCB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBnbG9iYWxDb250ZXh0IFRoZSBjdXJyZW50IGNvbnRleHQgb2JqZWN0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzU3ZnIFdoZXRoZXIgb3Igbm90IHRoaXMgRE9NIG5vZGUgaXMgYW4gU1ZHIG5vZGVcbiAqIEBwYXJhbSB7Kn0gZXhjZXNzRG9tQ2hpbGRyZW5cbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuLi9pbnRlcm5hbCcpLkNvbXBvbmVudD59IGNvbW1pdFF1ZXVlIExpc3Qgb2YgY29tcG9uZW50c1xuICogd2hpY2ggaGF2ZSBjYWxsYmFja3MgdG8gaW52b2tlIGluIGNvbW1pdFJvb3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNIeWRyYXRpbmcgV2hldGhlciBvciBub3Qgd2UgYXJlIGluIGh5ZHJhdGlvblxuICogQHJldHVybnMge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fVxuICovXG5mdW5jdGlvbiBkaWZmRWxlbWVudE5vZGVzKFxuXHRkb20sXG5cdG5ld1ZOb2RlLFxuXHRvbGRWTm9kZSxcblx0Z2xvYmFsQ29udGV4dCxcblx0aXNTdmcsXG5cdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRjb21taXRRdWV1ZSxcblx0aXNIeWRyYXRpbmdcbikge1xuXHRsZXQgb2xkUHJvcHMgPSBvbGRWTm9kZS5wcm9wcztcblx0bGV0IG5ld1Byb3BzID0gbmV3Vk5vZGUucHJvcHM7XG5cdGxldCBub2RlVHlwZSA9IG5ld1ZOb2RlLnR5cGU7XG5cdGxldCBpID0gMDtcblxuXHQvLyBUcmFja3MgZW50ZXJpbmcgYW5kIGV4aXRpbmcgU1ZHIG5hbWVzcGFjZSB3aGVuIGRlc2NlbmRpbmcgdGhyb3VnaCB0aGUgdHJlZS5cblx0aWYgKG5vZGVUeXBlID09PSAnc3ZnJykgaXNTdmcgPSB0cnVlO1xuXG5cdGlmIChleGNlc3NEb21DaGlsZHJlbiAhPSBudWxsKSB7XG5cdFx0Zm9yICg7IGkgPCBleGNlc3NEb21DaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgY2hpbGQgPSBleGNlc3NEb21DaGlsZHJlbltpXTtcblxuXHRcdFx0Ly8gaWYgbmV3Vk5vZGUgbWF0Y2hlcyBhbiBlbGVtZW50IGluIGV4Y2Vzc0RvbUNoaWxkcmVuIG9yIHRoZSBgZG9tYFxuXHRcdFx0Ly8gYXJndW1lbnQgbWF0Y2hlcyBhbiBlbGVtZW50IGluIGV4Y2Vzc0RvbUNoaWxkcmVuLCByZW1vdmUgaXQgZnJvbVxuXHRcdFx0Ly8gZXhjZXNzRG9tQ2hpbGRyZW4gc28gaXQgaXNuJ3QgbGF0ZXIgcmVtb3ZlZCBpbiBkaWZmQ2hpbGRyZW5cblx0XHRcdGlmIChcblx0XHRcdFx0Y2hpbGQgJiZcblx0XHRcdFx0J3NldEF0dHJpYnV0ZScgaW4gY2hpbGQgPT09ICEhbm9kZVR5cGUgJiZcblx0XHRcdFx0KG5vZGVUeXBlID8gY2hpbGQubG9jYWxOYW1lID09PSBub2RlVHlwZSA6IGNoaWxkLm5vZGVUeXBlID09PSAzKVxuXHRcdFx0KSB7XG5cdFx0XHRcdGRvbSA9IGNoaWxkO1xuXHRcdFx0XHRleGNlc3NEb21DaGlsZHJlbltpXSA9IG51bGw7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmIChkb20gPT0gbnVsbCkge1xuXHRcdGlmIChub2RlVHlwZSA9PT0gbnVsbCkge1xuXHRcdFx0Ly8gQHRzLWlnbm9yZSBjcmVhdGVUZXh0Tm9kZSByZXR1cm5zIFRleHQsIHdlIGV4cGVjdCBQcmVhY3RFbGVtZW50XG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobmV3UHJvcHMpO1xuXHRcdH1cblxuXHRcdGlmIChpc1N2Zykge1xuXHRcdFx0ZG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFxuXHRcdFx0XHQnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuXHRcdFx0XHQvLyBAdHMtaWdub3JlIFdlIGtub3cgYG5ld1ZOb2RlLnR5cGVgIGlzIGEgc3RyaW5nXG5cdFx0XHRcdG5vZGVUeXBlXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkb20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQvLyBAdHMtaWdub3JlIFdlIGtub3cgYG5ld1ZOb2RlLnR5cGVgIGlzIGEgc3RyaW5nXG5cdFx0XHRcdG5vZGVUeXBlLFxuXHRcdFx0XHRuZXdQcm9wcy5pcyAmJiBuZXdQcm9wc1xuXHRcdFx0KTtcblx0XHR9XG5cblx0XHQvLyB3ZSBjcmVhdGVkIGEgbmV3IHBhcmVudCwgc28gbm9uZSBvZiB0aGUgcHJldmlvdXNseSBhdHRhY2hlZCBjaGlsZHJlbiBjYW4gYmUgcmV1c2VkOlxuXHRcdGV4Y2Vzc0RvbUNoaWxkcmVuID0gbnVsbDtcblx0XHQvLyB3ZSBhcmUgY3JlYXRpbmcgYSBuZXcgbm9kZSwgc28gd2UgY2FuIGFzc3VtZSB0aGlzIGlzIGEgbmV3IHN1YnRyZWUgKGluIGNhc2Ugd2UgYXJlIGh5ZHJhdGluZyksIHRoaXMgZGVvcHRzIHRoZSBoeWRyYXRlXG5cdFx0aXNIeWRyYXRpbmcgPSBmYWxzZTtcblx0fVxuXG5cdGlmIChub2RlVHlwZSA9PT0gbnVsbCkge1xuXHRcdC8vIER1cmluZyBoeWRyYXRpb24sIHdlIHN0aWxsIGhhdmUgdG8gc3BsaXQgbWVyZ2VkIHRleHQgZnJvbSBTU1InZCBIVE1MLlxuXHRcdGlmIChvbGRQcm9wcyAhPT0gbmV3UHJvcHMgJiYgKCFpc0h5ZHJhdGluZyB8fCBkb20uZGF0YSAhPT0gbmV3UHJvcHMpKSB7XG5cdFx0XHRkb20uZGF0YSA9IG5ld1Byb3BzO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHQvLyBJZiBleGNlc3NEb21DaGlsZHJlbiB3YXMgbm90IG51bGwsIHJlcG9wdWxhdGUgaXQgd2l0aCB0aGUgY3VycmVudCBlbGVtZW50J3MgY2hpbGRyZW46XG5cdFx0ZXhjZXNzRG9tQ2hpbGRyZW4gPSBleGNlc3NEb21DaGlsZHJlbiAmJiBzbGljZS5jYWxsKGRvbS5jaGlsZE5vZGVzKTtcblxuXHRcdG9sZFByb3BzID0gb2xkVk5vZGUucHJvcHMgfHwgRU1QVFlfT0JKO1xuXG5cdFx0bGV0IG9sZEh0bWwgPSBvbGRQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTDtcblx0XHRsZXQgbmV3SHRtbCA9IG5ld1Byb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MO1xuXG5cdFx0Ly8gRHVyaW5nIGh5ZHJhdGlvbiwgcHJvcHMgYXJlIG5vdCBkaWZmZWQgYXQgYWxsIChpbmNsdWRpbmcgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpXG5cdFx0Ly8gQFRPRE8gd2Ugc2hvdWxkIHdhcm4gaW4gZGVidWcgbW9kZSB3aGVuIHByb3BzIGRvbid0IG1hdGNoIGhlcmUuXG5cdFx0aWYgKCFpc0h5ZHJhdGluZykge1xuXHRcdFx0Ly8gQnV0LCBpZiB3ZSBhcmUgaW4gYSBzaXR1YXRpb24gd2hlcmUgd2UgYXJlIHVzaW5nIGV4aXN0aW5nIERPTSAoZS5nLiByZXBsYWNlTm9kZSlcblx0XHRcdC8vIHdlIHNob3VsZCByZWFkIHRoZSBleGlzdGluZyBET00gYXR0cmlidXRlcyB0byBkaWZmIHRoZW1cblx0XHRcdGlmIChleGNlc3NEb21DaGlsZHJlbiAhPSBudWxsKSB7XG5cdFx0XHRcdG9sZFByb3BzID0ge307XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBkb20uYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdG9sZFByb3BzW2RvbS5hdHRyaWJ1dGVzW2ldLm5hbWVdID0gZG9tLmF0dHJpYnV0ZXNbaV0udmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKG5ld0h0bWwgfHwgb2xkSHRtbCkge1xuXHRcdFx0XHQvLyBBdm9pZCByZS1hcHBseWluZyB0aGUgc2FtZSAnX19odG1sJyBpZiBpdCBkaWQgbm90IGNoYW5nZWQgYmV0d2VlbiByZS1yZW5kZXJcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdCFuZXdIdG1sIHx8XG5cdFx0XHRcdFx0KCghb2xkSHRtbCB8fCBuZXdIdG1sLl9faHRtbCAhPSBvbGRIdG1sLl9faHRtbCkgJiZcblx0XHRcdFx0XHRcdG5ld0h0bWwuX19odG1sICE9PSBkb20uaW5uZXJIVE1MKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRkb20uaW5uZXJIVE1MID0gKG5ld0h0bWwgJiYgbmV3SHRtbC5fX2h0bWwpIHx8ICcnO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZGlmZlByb3BzKGRvbSwgbmV3UHJvcHMsIG9sZFByb3BzLCBpc1N2ZywgaXNIeWRyYXRpbmcpO1xuXG5cdFx0Ly8gSWYgdGhlIG5ldyB2bm9kZSBkaWRuJ3QgaGF2ZSBkYW5nZXJvdXNseVNldElubmVySFRNTCwgZGlmZiBpdHMgY2hpbGRyZW5cblx0XHRpZiAobmV3SHRtbCkge1xuXHRcdFx0bmV3Vk5vZGUuX2NoaWxkcmVuID0gW107XG5cdFx0fSBlbHNlIHtcblx0XHRcdGkgPSBuZXdWTm9kZS5wcm9wcy5jaGlsZHJlbjtcblx0XHRcdGRpZmZDaGlsZHJlbihcblx0XHRcdFx0ZG9tLFxuXHRcdFx0XHRBcnJheS5pc0FycmF5KGkpID8gaSA6IFtpXSxcblx0XHRcdFx0bmV3Vk5vZGUsXG5cdFx0XHRcdG9sZFZOb2RlLFxuXHRcdFx0XHRnbG9iYWxDb250ZXh0LFxuXHRcdFx0XHRpc1N2ZyAmJiBub2RlVHlwZSAhPT0gJ2ZvcmVpZ25PYmplY3QnLFxuXHRcdFx0XHRleGNlc3NEb21DaGlsZHJlbixcblx0XHRcdFx0Y29tbWl0UXVldWUsXG5cdFx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuXG5cdFx0XHRcdFx0PyBleGNlc3NEb21DaGlsZHJlblswXVxuXHRcdFx0XHRcdDogb2xkVk5vZGUuX2NoaWxkcmVuICYmIGdldERvbVNpYmxpbmcob2xkVk5vZGUsIDApLFxuXHRcdFx0XHRpc0h5ZHJhdGluZ1xuXHRcdFx0KTtcblxuXHRcdFx0Ly8gUmVtb3ZlIGNoaWxkcmVuIHRoYXQgYXJlIG5vdCBwYXJ0IG9mIGFueSB2bm9kZS5cblx0XHRcdGlmIChleGNlc3NEb21DaGlsZHJlbiAhPSBudWxsKSB7XG5cdFx0XHRcdGZvciAoaSA9IGV4Y2Vzc0RvbUNoaWxkcmVuLmxlbmd0aDsgaS0tOyApIHtcblx0XHRcdFx0XHRpZiAoZXhjZXNzRG9tQ2hpbGRyZW5baV0gIT0gbnVsbCkgcmVtb3ZlTm9kZShleGNlc3NEb21DaGlsZHJlbltpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyAoYXMgYWJvdmUsIGRvbid0IGRpZmYgcHJvcHMgZHVyaW5nIGh5ZHJhdGlvbilcblx0XHRpZiAoIWlzSHlkcmF0aW5nKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdCd2YWx1ZScgaW4gbmV3UHJvcHMgJiZcblx0XHRcdFx0KGkgPSBuZXdQcm9wcy52YWx1ZSkgIT09IHVuZGVmaW5lZCAmJlxuXHRcdFx0XHQvLyAjMjc1NiBGb3IgdGhlIDxwcm9ncmVzcz4tZWxlbWVudCB0aGUgaW5pdGlhbCB2YWx1ZSBpcyAwLFxuXHRcdFx0XHQvLyBkZXNwaXRlIHRoZSBhdHRyaWJ1dGUgbm90IGJlaW5nIHByZXNlbnQuIFdoZW4gdGhlIGF0dHJpYnV0ZVxuXHRcdFx0XHQvLyBpcyBtaXNzaW5nIHRoZSBwcm9ncmVzcyBiYXIgaXMgdHJlYXRlZCBhcyBpbmRldGVybWluYXRlLlxuXHRcdFx0XHQvLyBUbyBmaXggdGhhdCB3ZSdsbCBhbHdheXMgdXBkYXRlIGl0IHdoZW4gaXQgaXMgMCBmb3IgcHJvZ3Jlc3MgZWxlbWVudHNcblx0XHRcdFx0KGkgIT09IGRvbS52YWx1ZSB8fFxuXHRcdFx0XHRcdChub2RlVHlwZSA9PT0gJ3Byb2dyZXNzJyAmJiAhaSkgfHxcblx0XHRcdFx0XHQvLyBUaGlzIGlzIG9ubHkgZm9yIElFIDExIHRvIGZpeCA8c2VsZWN0PiB2YWx1ZSBub3QgYmVpbmcgdXBkYXRlZC5cblx0XHRcdFx0XHQvLyBUbyBhdm9pZCBhIHN0YWxlIHNlbGVjdCB2YWx1ZSB3ZSBuZWVkIHRvIHNldCB0aGUgb3B0aW9uLnZhbHVlXG5cdFx0XHRcdFx0Ly8gYWdhaW4sIHdoaWNoIHRyaWdnZXJzIElFMTEgdG8gcmUtZXZhbHVhdGUgdGhlIHNlbGVjdCB2YWx1ZVxuXHRcdFx0XHRcdChub2RlVHlwZSA9PT0gJ29wdGlvbicgJiYgaSAhPT0gb2xkUHJvcHMudmFsdWUpKVxuXHRcdFx0KSB7XG5cdFx0XHRcdHNldFByb3BlcnR5KGRvbSwgJ3ZhbHVlJywgaSwgb2xkUHJvcHMudmFsdWUsIGZhbHNlKTtcblx0XHRcdH1cblx0XHRcdGlmIChcblx0XHRcdFx0J2NoZWNrZWQnIGluIG5ld1Byb3BzICYmXG5cdFx0XHRcdChpID0gbmV3UHJvcHMuY2hlY2tlZCkgIT09IHVuZGVmaW5lZCAmJlxuXHRcdFx0XHRpICE9PSBkb20uY2hlY2tlZFxuXHRcdFx0KSB7XG5cdFx0XHRcdHNldFByb3BlcnR5KGRvbSwgJ2NoZWNrZWQnLCBpLCBvbGRQcm9wcy5jaGVja2VkLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGRvbTtcbn1cblxuLyoqXG4gKiBJbnZva2Ugb3IgdXBkYXRlIGEgcmVmLCBkZXBlbmRpbmcgb24gd2hldGhlciBpdCBpcyBhIGZ1bmN0aW9uIG9yIG9iamVjdCByZWYuXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gcmVmXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlSZWYocmVmLCB2YWx1ZSwgdm5vZGUpIHtcblx0dHJ5IHtcblx0XHRpZiAodHlwZW9mIHJlZiA9PSAnZnVuY3Rpb24nKSByZWYodmFsdWUpO1xuXHRcdGVsc2UgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdG9wdGlvbnMuX2NhdGNoRXJyb3IoZSwgdm5vZGUpO1xuXHR9XG59XG5cbi8qKlxuICogVW5tb3VudCBhIHZpcnR1YWwgbm9kZSBmcm9tIHRoZSB0cmVlIGFuZCBhcHBseSBET00gY2hhbmdlc1xuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IHZub2RlIFRoZSB2aXJ0dWFsIG5vZGUgdG8gdW5tb3VudFxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IHBhcmVudFZOb2RlIFRoZSBwYXJlbnQgb2YgdGhlIFZOb2RlIHRoYXRcbiAqIGluaXRpYXRlZCB0aGUgdW5tb3VudFxuICogQHBhcmFtIHtib29sZWFufSBbc2tpcFJlbW92ZV0gRmxhZyB0aGF0IGluZGljYXRlcyB0aGF0IGEgcGFyZW50IG5vZGUgb2YgdGhlXG4gKiBjdXJyZW50IGVsZW1lbnQgaXMgYWxyZWFkeSBkZXRhY2hlZCBmcm9tIHRoZSBET00uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bm1vdW50KHZub2RlLCBwYXJlbnRWTm9kZSwgc2tpcFJlbW92ZSkge1xuXHRsZXQgcjtcblx0aWYgKG9wdGlvbnMudW5tb3VudCkgb3B0aW9ucy51bm1vdW50KHZub2RlKTtcblxuXHRpZiAoKHIgPSB2bm9kZS5yZWYpKSB7XG5cdFx0aWYgKCFyLmN1cnJlbnQgfHwgci5jdXJyZW50ID09PSB2bm9kZS5fZG9tKSBhcHBseVJlZihyLCBudWxsLCBwYXJlbnRWTm9kZSk7XG5cdH1cblxuXHRpZiAoKHIgPSB2bm9kZS5fY29tcG9uZW50KSAhPSBudWxsKSB7XG5cdFx0aWYgKHIuY29tcG9uZW50V2lsbFVubW91bnQpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHIuY29tcG9uZW50V2lsbFVubW91bnQoKTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0b3B0aW9ucy5fY2F0Y2hFcnJvcihlLCBwYXJlbnRWTm9kZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ci5iYXNlID0gci5fcGFyZW50RG9tID0gbnVsbDtcblx0fVxuXG5cdGlmICgociA9IHZub2RlLl9jaGlsZHJlbikpIHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHIubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChyW2ldKSB7XG5cdFx0XHRcdHVubW91bnQocltpXSwgcGFyZW50Vk5vZGUsIHR5cGVvZiB2bm9kZS50eXBlICE9ICdmdW5jdGlvbicpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICghc2tpcFJlbW92ZSAmJiB2bm9kZS5fZG9tICE9IG51bGwpIHJlbW92ZU5vZGUodm5vZGUuX2RvbSk7XG5cblx0Ly8gTXVzdCBiZSBzZXQgdG8gYHVuZGVmaW5lZGAgdG8gcHJvcGVybHkgY2xlYW4gdXAgYF9uZXh0RG9tYFxuXHQvLyBmb3Igd2hpY2ggYG51bGxgIGlzIGEgdmFsaWQgdmFsdWUuIFNlZSBjb21tZW50IGluIGBjcmVhdGUtZWxlbWVudC5qc2Bcblx0dm5vZGUuX2RvbSA9IHZub2RlLl9uZXh0RG9tID0gdW5kZWZpbmVkO1xufVxuXG4vKiogVGhlIGAucmVuZGVyKClgIG1ldGhvZCBmb3IgYSBQRkMgYmFja2luZyBpbnN0YW5jZS4gKi9cbmZ1bmN0aW9uIGRvUmVuZGVyKHByb3BzLCBzdGF0ZSwgY29udGV4dCkge1xuXHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvcihwcm9wcywgY29udGV4dCk7XG59XG4iLCJpbXBvcnQgeyBFTVBUWV9PQkogfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBjb21taXRSb290LCBkaWZmIH0gZnJvbSAnLi9kaWZmL2luZGV4JztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIEZyYWdtZW50IH0gZnJvbSAnLi9jcmVhdGUtZWxlbWVudCc7XG5pbXBvcnQgb3B0aW9ucyBmcm9tICcuL29wdGlvbnMnO1xuaW1wb3J0IHsgc2xpY2UgfSBmcm9tICcuL3V0aWwnO1xuXG4vKipcbiAqIFJlbmRlciBhIFByZWFjdCB2aXJ0dWFsIG5vZGUgaW50byBhIERPTSBlbGVtZW50XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkNvbXBvbmVudENoaWxkfSB2bm9kZSBUaGUgdmlydHVhbCBub2RlIHRvIHJlbmRlclxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fSBwYXJlbnREb20gVGhlIERPTSBlbGVtZW50IHRvXG4gKiByZW5kZXIgaW50b1xuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50IHwgb2JqZWN0fSBbcmVwbGFjZU5vZGVdIE9wdGlvbmFsOiBBdHRlbXB0IHRvIHJlLXVzZSBhblxuICogZXhpc3RpbmcgRE9NIHRyZWUgcm9vdGVkIGF0IGByZXBsYWNlTm9kZWBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcih2bm9kZSwgcGFyZW50RG9tLCByZXBsYWNlTm9kZSkge1xuXHRpZiAob3B0aW9ucy5fcm9vdCkgb3B0aW9ucy5fcm9vdCh2bm9kZSwgcGFyZW50RG9tKTtcblxuXHQvLyBXZSBhYnVzZSB0aGUgYHJlcGxhY2VOb2RlYCBwYXJhbWV0ZXIgaW4gYGh5ZHJhdGUoKWAgdG8gc2lnbmFsIGlmIHdlIGFyZSBpblxuXHQvLyBoeWRyYXRpb24gbW9kZSBvciBub3QgYnkgcGFzc2luZyB0aGUgYGh5ZHJhdGVgIGZ1bmN0aW9uIGluc3RlYWQgb2YgYSBET01cblx0Ly8gZWxlbWVudC4uXG5cdGxldCBpc0h5ZHJhdGluZyA9IHR5cGVvZiByZXBsYWNlTm9kZSA9PT0gJ2Z1bmN0aW9uJztcblxuXHQvLyBUbyBiZSBhYmxlIHRvIHN1cHBvcnQgY2FsbGluZyBgcmVuZGVyKClgIG11bHRpcGxlIHRpbWVzIG9uIHRoZSBzYW1lXG5cdC8vIERPTSBub2RlLCB3ZSBuZWVkIHRvIG9idGFpbiBhIHJlZmVyZW5jZSB0byB0aGUgcHJldmlvdXMgdHJlZS4gV2UgZG9cblx0Ly8gdGhpcyBieSBhc3NpZ25pbmcgYSBuZXcgYF9jaGlsZHJlbmAgcHJvcGVydHkgdG8gRE9NIG5vZGVzIHdoaWNoIHBvaW50c1xuXHQvLyB0byB0aGUgbGFzdCByZW5kZXJlZCB0cmVlLiBCeSBkZWZhdWx0IHRoaXMgcHJvcGVydHkgaXMgbm90IHByZXNlbnQsIHdoaWNoXG5cdC8vIG1lYW5zIHRoYXQgd2UgYXJlIG1vdW50aW5nIGEgbmV3IHRyZWUgZm9yIHRoZSBmaXJzdCB0aW1lLlxuXHRsZXQgb2xkVk5vZGUgPSBpc0h5ZHJhdGluZ1xuXHRcdD8gbnVsbFxuXHRcdDogKHJlcGxhY2VOb2RlICYmIHJlcGxhY2VOb2RlLl9jaGlsZHJlbikgfHwgcGFyZW50RG9tLl9jaGlsZHJlbjtcblxuXHR2bm9kZSA9IChcblx0XHQoIWlzSHlkcmF0aW5nICYmIHJlcGxhY2VOb2RlKSB8fFxuXHRcdHBhcmVudERvbVxuXHQpLl9jaGlsZHJlbiA9IGNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIFt2bm9kZV0pO1xuXG5cdC8vIExpc3Qgb2YgZWZmZWN0cyB0aGF0IG5lZWQgdG8gYmUgY2FsbGVkIGFmdGVyIGRpZmZpbmcuXG5cdGxldCBjb21taXRRdWV1ZSA9IFtdO1xuXHRkaWZmKFxuXHRcdHBhcmVudERvbSxcblx0XHQvLyBEZXRlcm1pbmUgdGhlIG5ldyB2bm9kZSB0cmVlIGFuZCBzdG9yZSBpdCBvbiB0aGUgRE9NIGVsZW1lbnQgb25cblx0XHQvLyBvdXIgY3VzdG9tIGBfY2hpbGRyZW5gIHByb3BlcnR5LlxuXHRcdHZub2RlLFxuXHRcdG9sZFZOb2RlIHx8IEVNUFRZX09CSixcblx0XHRFTVBUWV9PQkosXG5cdFx0cGFyZW50RG9tLm93bmVyU1ZHRWxlbWVudCAhPT0gdW5kZWZpbmVkLFxuXHRcdCFpc0h5ZHJhdGluZyAmJiByZXBsYWNlTm9kZVxuXHRcdFx0PyBbcmVwbGFjZU5vZGVdXG5cdFx0XHQ6IG9sZFZOb2RlXG5cdFx0XHQ/IG51bGxcblx0XHRcdDogcGFyZW50RG9tLmZpcnN0Q2hpbGRcblx0XHRcdD8gc2xpY2UuY2FsbChwYXJlbnREb20uY2hpbGROb2Rlcylcblx0XHRcdDogbnVsbCxcblx0XHRjb21taXRRdWV1ZSxcblx0XHQhaXNIeWRyYXRpbmcgJiYgcmVwbGFjZU5vZGVcblx0XHRcdD8gcmVwbGFjZU5vZGVcblx0XHRcdDogb2xkVk5vZGVcblx0XHRcdD8gb2xkVk5vZGUuX2RvbVxuXHRcdFx0OiBwYXJlbnREb20uZmlyc3RDaGlsZCxcblx0XHRpc0h5ZHJhdGluZ1xuXHQpO1xuXG5cdC8vIEZsdXNoIGFsbCBxdWV1ZWQgZWZmZWN0c1xuXHRjb21taXRSb290KGNvbW1pdFF1ZXVlLCB2bm9kZSk7XG59XG5cbi8qKlxuICogVXBkYXRlIGFuIGV4aXN0aW5nIERPTSBlbGVtZW50IHdpdGggZGF0YSBmcm9tIGEgUHJlYWN0IHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnRDaGlsZH0gdm5vZGUgVGhlIHZpcnR1YWwgbm9kZSB0byByZW5kZXJcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gcGFyZW50RG9tIFRoZSBET00gZWxlbWVudCB0b1xuICogdXBkYXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoeWRyYXRlKHZub2RlLCBwYXJlbnREb20pIHtcblx0cmVuZGVyKHZub2RlLCBwYXJlbnREb20sIGh5ZHJhdGUpO1xufVxuIiwiaW1wb3J0IHsgYXNzaWduLCBzbGljZSB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBjcmVhdGVWTm9kZSB9IGZyb20gJy4vY3JlYXRlLWVsZW1lbnQnO1xuXG4vKipcbiAqIENsb25lcyB0aGUgZ2l2ZW4gVk5vZGUsIG9wdGlvbmFsbHkgYWRkaW5nIGF0dHJpYnV0ZXMvcHJvcHMgYW5kIHJlcGxhY2luZyBpdHMgY2hpbGRyZW4uXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZSBUaGUgdmlydHVhbCBET00gZWxlbWVudCB0byBjbG9uZVxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzIEF0dHJpYnV0ZXMvcHJvcHMgdG8gYWRkIHdoZW4gY2xvbmluZ1xuICogQHBhcmFtIHtBcnJheTxpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnRDaGlsZHJlbj59IHJlc3QgQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIHdpbGwgYmUgdXNlZCBhcyByZXBsYWNlbWVudCBjaGlsZHJlbi5cbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb25lRWxlbWVudCh2bm9kZSwgcHJvcHMsIGNoaWxkcmVuKSB7XG5cdGxldCBub3JtYWxpemVkUHJvcHMgPSBhc3NpZ24oe30sIHZub2RlLnByb3BzKSxcblx0XHRrZXksXG5cdFx0cmVmLFxuXHRcdGk7XG5cdGZvciAoaSBpbiBwcm9wcykge1xuXHRcdGlmIChpID09ICdrZXknKSBrZXkgPSBwcm9wc1tpXTtcblx0XHRlbHNlIGlmIChpID09ICdyZWYnKSByZWYgPSBwcm9wc1tpXTtcblx0XHRlbHNlIG5vcm1hbGl6ZWRQcm9wc1tpXSA9IHByb3BzW2ldO1xuXHR9XG5cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG5cdFx0bm9ybWFsaXplZFByb3BzLmNoaWxkcmVuID1cblx0XHRcdGFyZ3VtZW50cy5sZW5ndGggPiAzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogY2hpbGRyZW47XG5cdH1cblxuXHRyZXR1cm4gY3JlYXRlVk5vZGUoXG5cdFx0dm5vZGUudHlwZSxcblx0XHRub3JtYWxpemVkUHJvcHMsXG5cdFx0a2V5IHx8IHZub2RlLmtleSxcblx0XHRyZWYgfHwgdm5vZGUucmVmLFxuXHRcdG51bGxcblx0KTtcbn1cbiIsIi8qKlxuICogRmluZCB0aGUgY2xvc2VzdCBlcnJvciBib3VuZGFyeSB0byBhIHRocm93biBlcnJvciBhbmQgY2FsbCBpdFxuICogQHBhcmFtIHtvYmplY3R9IGVycm9yIFRoZSB0aHJvd24gdmFsdWVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZSBUaGUgdm5vZGUgdGhhdCB0aHJld1xuICogdGhlIGVycm9yIHRoYXQgd2FzIGNhdWdodCAoZXhjZXB0IGZvciB1bm1vdW50aW5nIHdoZW4gdGhpcyBwYXJhbWV0ZXJcbiAqIGlzIHRoZSBoaWdoZXN0IHBhcmVudCB0aGF0IHdhcyBiZWluZyB1bm1vdW50ZWQpXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gW29sZFZOb2RlXVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuRXJyb3JJbmZvfSBbZXJyb3JJbmZvXVxuICovXG5leHBvcnQgZnVuY3Rpb24gX2NhdGNoRXJyb3IoZXJyb3IsIHZub2RlLCBvbGRWTm9kZSwgZXJyb3JJbmZvKSB7XG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLkNvbXBvbmVudH0gKi9cblx0bGV0IGNvbXBvbmVudCwgY3RvciwgaGFuZGxlZDtcblxuXHRmb3IgKDsgKHZub2RlID0gdm5vZGUuX3BhcmVudCk7ICkge1xuXHRcdGlmICgoY29tcG9uZW50ID0gdm5vZGUuX2NvbXBvbmVudCkgJiYgIWNvbXBvbmVudC5fcHJvY2Vzc2luZ0V4Y2VwdGlvbikge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y3RvciA9IGNvbXBvbmVudC5jb25zdHJ1Y3RvcjtcblxuXHRcdFx0XHRpZiAoY3RvciAmJiBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Y29tcG9uZW50LnNldFN0YXRlKGN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSk7XG5cdFx0XHRcdFx0aGFuZGxlZCA9IGNvbXBvbmVudC5fZGlydHk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZENhdGNoICE9IG51bGwpIHtcblx0XHRcdFx0XHRjb21wb25lbnQuY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbyB8fCB7fSk7XG5cdFx0XHRcdFx0aGFuZGxlZCA9IGNvbXBvbmVudC5fZGlydHk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUaGlzIGlzIGFuIGVycm9yIGJvdW5kYXJ5LiBNYXJrIGl0IGFzIGhhdmluZyBiYWlsZWQgb3V0LCBhbmQgd2hldGhlciBpdCB3YXMgbWlkLWh5ZHJhdGlvbi5cblx0XHRcdFx0aWYgKGhhbmRsZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gKGNvbXBvbmVudC5fcGVuZGluZ0Vycm9yID0gY29tcG9uZW50KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRlcnJvciA9IGU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0dGhyb3cgZXJyb3I7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgaCwgcmVuZGVyLCBSZWYgfSBmcm9tIFwicHJlYWN0XCJcbmltcG9ydCB7IHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCJcbmltcG9ydCB7IHVzZVBvcHBlciB9IGZyb20gXCJyZWFjdC1wb3BwZXJcIlxuaW1wb3J0IHsgQXJyb3dDb250YWluZXIsIFBvcG92ZXIgfSBmcm9tIFwicmVhY3QtdGlueS1wb3BvdmVyXCJcblxuaW1wb3J0IFwiLi9zdHlsZS5zY3NzXCJcblxuY29uc3QgSW5qZWN0ZWQ6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50ID0gKCkgPT4ge1xuXHRjb25zdCBbaXNQb3BvdmVyT3Blbiwgc2V0SXNQb3BvdmVyT3Blbl0gPSB1c2VTdGF0ZShmYWxzZSlcblx0Y29uc3QgY2xpY2tNZUJ1dHRvblJlZiA9IHVzZVJlZjxIVE1MQnV0dG9uRWxlbWVudCB8IHVuZGVmaW5lZD4oKTtcblxuXHRyZXR1cm4gPHNwYW4gY2xhc3NOYW1lPVwicG9zaXRpb24tcmVsYXRpdmVcIj5cblxuXG5cdFx0PFBvcG92ZXJcblx0XHRcdGlzT3Blbj17aXNQb3BvdmVyT3Blbn1cblx0XHRcdHBvc2l0aW9ucz17W1wiYm90dG9tXCJdfVxuXHRcdFx0cGFkZGluZz17MTB9XG5cdFx0XHRvbkNsaWNrT3V0c2lkZT17KCkgPT4gc2V0SXNQb3BvdmVyT3BlbihmYWxzZSl9XG5cdFx0XHRyZWY9e2NsaWNrTWVCdXR0b25SZWYgYXMgUmVmPEhUTUxFbGVtZW50Pn0gLy8gaWYgeW91J2QgbGlrZSBhIHJlZiB0byB5b3VyIHBvcG92ZXIncyBjaGlsZCwgeW91IGNhbiBncmFiIG9uZSBoZXJlXG5cdFx0XHRjb250ZW50PXsoeyBwb3NpdGlvbiwgY2hpbGRSZWN0LCBwb3BvdmVyUmVjdCB9KSA9PiAoXG5cdFx0XHRcdDxBcnJvd0NvbnRhaW5lciAvLyBpZiB5b3UnZCBsaWtlIGFuIGFycm93LCB5b3UgY2FuIGltcG9ydCB0aGUgQXJyb3dDb250YWluZXIhXG5cdFx0XHRcdFx0cG9zaXRpb249e3Bvc2l0aW9ufVxuXHRcdFx0XHRcdGNoaWxkUmVjdD17Y2hpbGRSZWN0fVxuXHRcdFx0XHRcdHBvcG92ZXJSZWN0PXtwb3BvdmVyUmVjdH1cblx0XHRcdFx0XHRhcnJvd0NvbG9yPXsnYmx1ZSd9XG5cdFx0XHRcdFx0YXJyb3dTaXplPXsxMH1cblx0XHRcdFx0XHRhcnJvd1N0eWxlPXt7IG9wYWNpdHk6IDEgfX1cblx0XHRcdFx0XHRjbGFzc05hbWU9J3BvcG92ZXItYXJyb3ctY29udGFpbmVyJ1xuXHRcdFx0XHRcdGFycm93Q2xhc3NOYW1lPSdwb3BvdmVyLWFycm93J1xuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0PGRpdlxuXHRcdFx0XHRcdFx0c3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLCBvcGFjaXR5OiAwLjcgfX1cblx0XHRcdFx0XHRcdG9uQ2xpY2s9eygpID0+IHNldElzUG9wb3Zlck9wZW4oIWlzUG9wb3Zlck9wZW4pfVxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPVwicWduLXBvcG92ZXJcIlxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdEhpISBJJ20gcG9wb3ZlciBjb250ZW50LiBIZXJlJ3MgbXkgcG9zaXRpb246IHtwb3NpdGlvbn0uXG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvQXJyb3dDb250YWluZXI+XG5cdFx0XHQpfVxuXHRcdD5cblx0XHRcdDxidXR0b24gdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9eygpID0+IHtcblx0XHRcdFx0c2V0SXNQb3BvdmVyT3Blbih0cnVlKVxuXHRcdFx0fX0+dGVzdGVyaW5vPC9idXR0b24+XG5cdFx0PC9Qb3BvdmVyPlxuXHQ8L3NwYW4+XG59XG5cbmV4cG9ydCBkZWZhdWx0IEluamVjdGVkXG4iLG51bGwsImltcG9ydHtvcHRpb25zIGFzIG59ZnJvbVwicHJlYWN0XCI7dmFyIHQsdSxyLG8saT0wLGM9W10sZj1bXSxlPW4uX19iLGE9bi5fX3Isdj1uLmRpZmZlZCxsPW4uX19jLG09bi51bm1vdW50O2Z1bmN0aW9uIHAodCxyKXtuLl9faCYmbi5fX2godSx0LGl8fHIpLGk9MDt2YXIgbz11Ll9fSHx8KHUuX19IPXtfXzpbXSxfX2g6W119KTtyZXR1cm4gdD49by5fXy5sZW5ndGgmJm8uX18ucHVzaCh7X19WOmZ9KSxvLl9fW3RdfWZ1bmN0aW9uIHkobil7cmV0dXJuIGk9MSxkKHosbil9ZnVuY3Rpb24gZChuLHIsbyl7dmFyIGk9cCh0KyssMik7cmV0dXJuIGkudD1uLGkuX19jfHwoaS5fXz1bbz9vKHIpOnoodm9pZCAwLHIpLGZ1bmN0aW9uKG4pe3ZhciB0PWkudChpLl9fWzBdLG4pO2kuX19bMF0hPT10JiYoaS5fXz1bdCxpLl9fWzFdXSxpLl9fYy5zZXRTdGF0ZSh7fSkpfV0saS5fX2M9dSksaS5fX31mdW5jdGlvbiBfKHIsbyl7dmFyIGk9cCh0KyssMyk7IW4uX19zJiZ3KGkuX19ILG8pJiYoaS5fXz1yLGkudT1vLHUuX19ILl9faC5wdXNoKGkpKX1mdW5jdGlvbiBoKHIsbyl7dmFyIGk9cCh0KyssNCk7IW4uX19zJiZ3KGkuX19ILG8pJiYoaS5fXz1yLGkudT1vLHUuX19oLnB1c2goaSkpfWZ1bmN0aW9uIHMobil7cmV0dXJuIGk9NSxGKGZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bn19LFtdKX1mdW5jdGlvbiBBKG4sdCx1KXtpPTYsaChmdW5jdGlvbigpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4/KG4odCgpKSxmdW5jdGlvbigpe3JldHVybiBuKG51bGwpfSk6bj8obi5jdXJyZW50PXQoKSxmdW5jdGlvbigpe3JldHVybiBuLmN1cnJlbnQ9bnVsbH0pOnZvaWQgMH0sbnVsbD09dT91OnUuY29uY2F0KG4pKX1mdW5jdGlvbiBGKG4sdSl7dmFyIHI9cCh0KyssNyk7cmV0dXJuIHcoci5fX0gsdSk/KHIuX19WPW4oKSxyLnU9dSxyLl9faD1uLHIuX19WKTpyLl9ffWZ1bmN0aW9uIFQobix0KXtyZXR1cm4gaT04LEYoZnVuY3Rpb24oKXtyZXR1cm4gbn0sdCl9ZnVuY3Rpb24gcShuKXt2YXIgcj11LmNvbnRleHRbbi5fX2NdLG89cCh0KyssOSk7cmV0dXJuIG8uYz1uLHI/KG51bGw9PW8uX18mJihvLl9fPSEwLHIuc3ViKHUpKSxyLnByb3BzLnZhbHVlKTpuLl9ffWZ1bmN0aW9uIHgodCx1KXtuLnVzZURlYnVnVmFsdWUmJm4udXNlRGVidWdWYWx1ZSh1P3UodCk6dCl9ZnVuY3Rpb24gVihuKXt2YXIgcj1wKHQrKywxMCksbz15KCk7cmV0dXJuIHIuX189bix1LmNvbXBvbmVudERpZENhdGNofHwodS5jb21wb25lbnREaWRDYXRjaD1mdW5jdGlvbihuKXtyLl9fJiZyLl9fKG4pLG9bMV0obil9KSxbb1swXSxmdW5jdGlvbigpe29bMV0odm9pZCAwKX1dfWZ1bmN0aW9uIGIoKXtmb3IodmFyIHQ7dD1jLnNoaWZ0KCk7KWlmKHQuX19QKXRyeXt0Ll9fSC5fX2guZm9yRWFjaChqKSx0Ll9fSC5fX2guZm9yRWFjaChrKSx0Ll9fSC5fX2g9W119Y2F0Y2godSl7dC5fX0guX19oPVtdLG4uX19lKHUsdC5fX3YpfX1uLl9fYj1mdW5jdGlvbihuKXt1PW51bGwsZSYmZShuKX0sbi5fX3I9ZnVuY3Rpb24obil7YSYmYShuKSx0PTA7dmFyIG89KHU9bi5fX2MpLl9fSDtvJiYocj09PXU/KG8uX19oPVtdLHUuX19oPVtdLG8uX18uZm9yRWFjaChmdW5jdGlvbihuKXtuLl9fVj1mLG4udT12b2lkIDB9KSk6KG8uX19oLmZvckVhY2goaiksby5fX2guZm9yRWFjaChrKSxvLl9faD1bXSkpLHI9dX0sbi5kaWZmZWQ9ZnVuY3Rpb24odCl7diYmdih0KTt2YXIgaT10Ll9fYztpJiZpLl9fSCYmKGkuX19ILl9faC5sZW5ndGgmJigxIT09Yy5wdXNoKGkpJiZvPT09bi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fCgobz1uLnJlcXVlc3RBbmltYXRpb25GcmFtZSl8fGZ1bmN0aW9uKG4pe3ZhciB0LHU9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQociksZyYmY2FuY2VsQW5pbWF0aW9uRnJhbWUodCksc2V0VGltZW91dChuKX0scj1zZXRUaW1lb3V0KHUsMTAwKTtnJiYodD1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodSkpfSkoYikpLGkuX19ILl9fLmZvckVhY2goZnVuY3Rpb24obil7bi51JiYobi5fX0g9bi51KSxuLl9fViE9PWYmJihuLl9fPW4uX19WKSxuLnU9dm9pZCAwLG4uX19WPWZ9KSkscj11PW51bGx9LG4uX19jPWZ1bmN0aW9uKHQsdSl7dS5zb21lKGZ1bmN0aW9uKHQpe3RyeXt0Ll9faC5mb3JFYWNoKGopLHQuX19oPXQuX19oLmZpbHRlcihmdW5jdGlvbihuKXtyZXR1cm4hbi5fX3x8ayhuKX0pfWNhdGNoKHIpe3Uuc29tZShmdW5jdGlvbihuKXtuLl9faCYmKG4uX19oPVtdKX0pLHU9W10sbi5fX2Uocix0Ll9fdil9fSksbCYmbCh0LHUpfSxuLnVubW91bnQ9ZnVuY3Rpb24odCl7bSYmbSh0KTt2YXIgdSxyPXQuX19jO3ImJnIuX19IJiYoci5fX0guX18uZm9yRWFjaChmdW5jdGlvbihuKXt0cnl7aihuKX1jYXRjaChuKXt1PW59fSksdSYmbi5fX2UodSxyLl9fdikpfTt2YXIgZz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ZnVuY3Rpb24gaihuKXt2YXIgdD11LHI9bi5fX2M7XCJmdW5jdGlvblwiPT10eXBlb2YgciYmKG4uX19jPXZvaWQgMCxyKCkpLHU9dH1mdW5jdGlvbiBrKG4pe3ZhciB0PXU7bi5fX2M9bi5fXygpLHU9dH1mdW5jdGlvbiB3KG4sdCl7cmV0dXJuIW58fG4ubGVuZ3RoIT09dC5sZW5ndGh8fHQuc29tZShmdW5jdGlvbih0LHUpe3JldHVybiB0IT09blt1XX0pfWZ1bmN0aW9uIHoobix0KXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3Qobik6dH1leHBvcnR7eSBhcyB1c2VTdGF0ZSxkIGFzIHVzZVJlZHVjZXIsXyBhcyB1c2VFZmZlY3QsaCBhcyB1c2VMYXlvdXRFZmZlY3QscyBhcyB1c2VSZWYsQSBhcyB1c2VJbXBlcmF0aXZlSGFuZGxlLEYgYXMgdXNlTWVtbyxUIGFzIHVzZUNhbGxiYWNrLHEgYXMgdXNlQ29udGV4dCx4IGFzIHVzZURlYnVnVmFsdWUsViBhcyB1c2VFcnJvckJvdW5kYXJ5fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhvb2tzLm1vZHVsZS5qcy5tYXBcbiIsImltcG9ydCB7IG9wdGlvbnMgfSBmcm9tICdwcmVhY3QnO1xuXG4vKiogQHR5cGUge251bWJlcn0gKi9cbmxldCBjdXJyZW50SW5kZXg7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50fSAqL1xubGV0IGN1cnJlbnRDb21wb25lbnQ7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50fSAqL1xubGV0IHByZXZpb3VzQ29tcG9uZW50O1xuXG4vKiogQHR5cGUge251bWJlcn0gKi9cbmxldCBjdXJyZW50SG9vayA9IDA7XG5cbi8qKiBAdHlwZSB7QXJyYXk8aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50Pn0gKi9cbmxldCBhZnRlclBhaW50RWZmZWN0cyA9IFtdO1xuXG5sZXQgRU1QVFkgPSBbXTtcblxubGV0IG9sZEJlZm9yZURpZmYgPSBvcHRpb25zLl9kaWZmO1xubGV0IG9sZEJlZm9yZVJlbmRlciA9IG9wdGlvbnMuX3JlbmRlcjtcbmxldCBvbGRBZnRlckRpZmYgPSBvcHRpb25zLmRpZmZlZDtcbmxldCBvbGRDb21taXQgPSBvcHRpb25zLl9jb21taXQ7XG5sZXQgb2xkQmVmb3JlVW5tb3VudCA9IG9wdGlvbnMudW5tb3VudDtcblxuY29uc3QgUkFGX1RJTUVPVVQgPSAxMDA7XG5sZXQgcHJldlJhZjtcblxub3B0aW9ucy5fZGlmZiA9IHZub2RlID0+IHtcblx0Y3VycmVudENvbXBvbmVudCA9IG51bGw7XG5cdGlmIChvbGRCZWZvcmVEaWZmKSBvbGRCZWZvcmVEaWZmKHZub2RlKTtcbn07XG5cbm9wdGlvbnMuX3JlbmRlciA9IHZub2RlID0+IHtcblx0aWYgKG9sZEJlZm9yZVJlbmRlcikgb2xkQmVmb3JlUmVuZGVyKHZub2RlKTtcblxuXHRjdXJyZW50Q29tcG9uZW50ID0gdm5vZGUuX2NvbXBvbmVudDtcblx0Y3VycmVudEluZGV4ID0gMDtcblxuXHRjb25zdCBob29rcyA9IGN1cnJlbnRDb21wb25lbnQuX19ob29rcztcblx0aWYgKGhvb2tzKSB7XG5cdFx0aWYgKHByZXZpb3VzQ29tcG9uZW50ID09PSBjdXJyZW50Q29tcG9uZW50KSB7XG5cdFx0XHRob29rcy5fcGVuZGluZ0VmZmVjdHMgPSBbXTtcblx0XHRcdGN1cnJlbnRDb21wb25lbnQuX3JlbmRlckNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0aG9va3MuX2xpc3QuZm9yRWFjaChob29rSXRlbSA9PiB7XG5cdFx0XHRcdGhvb2tJdGVtLl9wZW5kaW5nVmFsdWUgPSBFTVBUWTtcblx0XHRcdFx0aG9va0l0ZW0uX3BlbmRpbmdBcmdzID0gdW5kZWZpbmVkO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGhvb2tzLl9wZW5kaW5nRWZmZWN0cy5mb3JFYWNoKGludm9rZUNsZWFudXApO1xuXHRcdFx0aG9va3MuX3BlbmRpbmdFZmZlY3RzLmZvckVhY2goaW52b2tlRWZmZWN0KTtcblx0XHRcdGhvb2tzLl9wZW5kaW5nRWZmZWN0cyA9IFtdO1xuXHRcdH1cblx0fVxuXHRwcmV2aW91c0NvbXBvbmVudCA9IGN1cnJlbnRDb21wb25lbnQ7XG59O1xuXG5vcHRpb25zLmRpZmZlZCA9IHZub2RlID0+IHtcblx0aWYgKG9sZEFmdGVyRGlmZikgb2xkQWZ0ZXJEaWZmKHZub2RlKTtcblxuXHRjb25zdCBjID0gdm5vZGUuX2NvbXBvbmVudDtcblx0aWYgKGMgJiYgYy5fX2hvb2tzKSB7XG5cdFx0aWYgKGMuX19ob29rcy5fcGVuZGluZ0VmZmVjdHMubGVuZ3RoKSBhZnRlclBhaW50KGFmdGVyUGFpbnRFZmZlY3RzLnB1c2goYykpO1xuXHRcdGMuX19ob29rcy5fbGlzdC5mb3JFYWNoKGhvb2tJdGVtID0+IHtcblx0XHRcdGlmIChob29rSXRlbS5fcGVuZGluZ0FyZ3MpIHtcblx0XHRcdFx0aG9va0l0ZW0uX2FyZ3MgPSBob29rSXRlbS5fcGVuZGluZ0FyZ3M7XG5cdFx0XHR9XG5cdFx0XHRpZiAoaG9va0l0ZW0uX3BlbmRpbmdWYWx1ZSAhPT0gRU1QVFkpIHtcblx0XHRcdFx0aG9va0l0ZW0uX3ZhbHVlID0gaG9va0l0ZW0uX3BlbmRpbmdWYWx1ZTtcblx0XHRcdH1cblx0XHRcdGhvb2tJdGVtLl9wZW5kaW5nQXJncyA9IHVuZGVmaW5lZDtcblx0XHRcdGhvb2tJdGVtLl9wZW5kaW5nVmFsdWUgPSBFTVBUWTtcblx0XHR9KTtcblx0fVxuXHRwcmV2aW91c0NvbXBvbmVudCA9IGN1cnJlbnRDb21wb25lbnQgPSBudWxsO1xufTtcblxub3B0aW9ucy5fY29tbWl0ID0gKHZub2RlLCBjb21taXRRdWV1ZSkgPT4ge1xuXHRjb21taXRRdWV1ZS5zb21lKGNvbXBvbmVudCA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbXBvbmVudC5fcmVuZGVyQ2FsbGJhY2tzLmZvckVhY2goaW52b2tlQ2xlYW51cCk7XG5cdFx0XHRjb21wb25lbnQuX3JlbmRlckNhbGxiYWNrcyA9IGNvbXBvbmVudC5fcmVuZGVyQ2FsbGJhY2tzLmZpbHRlcihjYiA9PlxuXHRcdFx0XHRjYi5fdmFsdWUgPyBpbnZva2VFZmZlY3QoY2IpIDogdHJ1ZVxuXHRcdFx0KTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRjb21taXRRdWV1ZS5zb21lKGMgPT4ge1xuXHRcdFx0XHRpZiAoYy5fcmVuZGVyQ2FsbGJhY2tzKSBjLl9yZW5kZXJDYWxsYmFja3MgPSBbXTtcblx0XHRcdH0pO1xuXHRcdFx0Y29tbWl0UXVldWUgPSBbXTtcblx0XHRcdG9wdGlvbnMuX2NhdGNoRXJyb3IoZSwgY29tcG9uZW50Ll92bm9kZSk7XG5cdFx0fVxuXHR9KTtcblxuXHRpZiAob2xkQ29tbWl0KSBvbGRDb21taXQodm5vZGUsIGNvbW1pdFF1ZXVlKTtcbn07XG5cbm9wdGlvbnMudW5tb3VudCA9IHZub2RlID0+IHtcblx0aWYgKG9sZEJlZm9yZVVubW91bnQpIG9sZEJlZm9yZVVubW91bnQodm5vZGUpO1xuXG5cdGNvbnN0IGMgPSB2bm9kZS5fY29tcG9uZW50O1xuXHRpZiAoYyAmJiBjLl9faG9va3MpIHtcblx0XHRsZXQgaGFzRXJyb3JlZDtcblx0XHRjLl9faG9va3MuX2xpc3QuZm9yRWFjaChzID0+IHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGludm9rZUNsZWFudXAocyk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdGhhc0Vycm9yZWQgPSBlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGlmIChoYXNFcnJvcmVkKSBvcHRpb25zLl9jYXRjaEVycm9yKGhhc0Vycm9yZWQsIGMuX3Zub2RlKTtcblx0fVxufTtcblxuLyoqXG4gKiBHZXQgYSBob29rJ3Mgc3RhdGUgZnJvbSB0aGUgY3VycmVudENvbXBvbmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBpbmRleCBvZiB0aGUgaG9vayB0byBnZXRcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlIFRoZSBpbmRleCBvZiB0aGUgaG9vayB0byBnZXRcbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIGdldEhvb2tTdGF0ZShpbmRleCwgdHlwZSkge1xuXHRpZiAob3B0aW9ucy5faG9vaykge1xuXHRcdG9wdGlvbnMuX2hvb2soY3VycmVudENvbXBvbmVudCwgaW5kZXgsIGN1cnJlbnRIb29rIHx8IHR5cGUpO1xuXHR9XG5cdGN1cnJlbnRIb29rID0gMDtcblxuXHQvLyBMYXJnZWx5IGluc3BpcmVkIGJ5OlxuXHQvLyAqIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNoYWVsLWtsZWluL2Z1bmN5LmpzL2Jsb2IvZjZiZTczNDY4ZTZlYzQ2YjBmZjVhYTNjYzRjOWJhZjcyYTI5MDI1YS9zcmMvaG9va3MvY29yZV9ob29rcy5tanNcblx0Ly8gKiBodHRwczovL2dpdGh1Yi5jb20vbWljaGFlbC1rbGVpbi9mdW5jeS5qcy9ibG9iLzY1MGJlYWE1OGM0M2MzM2E3NDgyMGEzYzk4YjNjNzA3OWNmMmUzMzMvc3JjL3JlbmRlcmVyLm1qc1xuXHQvLyBPdGhlciBpbXBsZW1lbnRhdGlvbnMgdG8gbG9vayBhdDpcblx0Ly8gKiBodHRwczovL2NvZGVzYW5kYm94LmlvL3MvbW5veDA1cXA4XG5cdGNvbnN0IGhvb2tzID1cblx0XHRjdXJyZW50Q29tcG9uZW50Ll9faG9va3MgfHxcblx0XHQoY3VycmVudENvbXBvbmVudC5fX2hvb2tzID0ge1xuXHRcdFx0X2xpc3Q6IFtdLFxuXHRcdFx0X3BlbmRpbmdFZmZlY3RzOiBbXVxuXHRcdH0pO1xuXG5cdGlmIChpbmRleCA+PSBob29rcy5fbGlzdC5sZW5ndGgpIHtcblx0XHRob29rcy5fbGlzdC5wdXNoKHsgX3BlbmRpbmdWYWx1ZTogRU1QVFkgfSk7XG5cdH1cblx0cmV0dXJuIGhvb2tzLl9saXN0W2luZGV4XTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbmRleCcpLlN0YXRlVXBkYXRlcjxhbnk+fSBbaW5pdGlhbFN0YXRlXVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU3RhdGUoaW5pdGlhbFN0YXRlKSB7XG5cdGN1cnJlbnRIb29rID0gMTtcblx0cmV0dXJuIHVzZVJlZHVjZXIoaW52b2tlT3JSZXR1cm4sIGluaXRpYWxTdGF0ZSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW5kZXgnKS5SZWR1Y2VyPGFueSwgYW55Pn0gcmVkdWNlclxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW5kZXgnKS5TdGF0ZVVwZGF0ZXI8YW55Pn0gaW5pdGlhbFN0YXRlXG4gKiBAcGFyYW0geyhpbml0aWFsU3RhdGU6IGFueSkgPT4gdm9pZH0gW2luaXRdXG4gKiBAcmV0dXJucyB7WyBhbnksIChzdGF0ZTogYW55KSA9PiB2b2lkIF19XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZWR1Y2VyKHJlZHVjZXIsIGluaXRpYWxTdGF0ZSwgaW5pdCkge1xuXHQvKiogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlJlZHVjZXJIb29rU3RhdGV9ICovXG5cdGNvbnN0IGhvb2tTdGF0ZSA9IGdldEhvb2tTdGF0ZShjdXJyZW50SW5kZXgrKywgMik7XG5cdGhvb2tTdGF0ZS5fcmVkdWNlciA9IHJlZHVjZXI7XG5cdGlmICghaG9va1N0YXRlLl9jb21wb25lbnQpIHtcblx0XHRob29rU3RhdGUuX3ZhbHVlID0gW1xuXHRcdFx0IWluaXQgPyBpbnZva2VPclJldHVybih1bmRlZmluZWQsIGluaXRpYWxTdGF0ZSkgOiBpbml0KGluaXRpYWxTdGF0ZSksXG5cblx0XHRcdGFjdGlvbiA9PiB7XG5cdFx0XHRcdGNvbnN0IG5leHRWYWx1ZSA9IGhvb2tTdGF0ZS5fcmVkdWNlcihob29rU3RhdGUuX3ZhbHVlWzBdLCBhY3Rpb24pO1xuXHRcdFx0XHRpZiAoaG9va1N0YXRlLl92YWx1ZVswXSAhPT0gbmV4dFZhbHVlKSB7XG5cdFx0XHRcdFx0aG9va1N0YXRlLl92YWx1ZSA9IFtuZXh0VmFsdWUsIGhvb2tTdGF0ZS5fdmFsdWVbMV1dO1xuXHRcdFx0XHRcdGhvb2tTdGF0ZS5fY29tcG9uZW50LnNldFN0YXRlKHt9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdF07XG5cblx0XHRob29rU3RhdGUuX2NvbXBvbmVudCA9IGN1cnJlbnRDb21wb25lbnQ7XG5cdH1cblxuXHRyZXR1cm4gaG9va1N0YXRlLl92YWx1ZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkVmZmVjdH0gY2FsbGJhY2tcbiAqIEBwYXJhbSB7YW55W119IGFyZ3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUVmZmVjdChjYWxsYmFjaywgYXJncykge1xuXHQvKiogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkVmZmVjdEhvb2tTdGF0ZX0gKi9cblx0Y29uc3Qgc3RhdGUgPSBnZXRIb29rU3RhdGUoY3VycmVudEluZGV4KyssIDMpO1xuXHRpZiAoIW9wdGlvbnMuX3NraXBFZmZlY3RzICYmIGFyZ3NDaGFuZ2VkKHN0YXRlLl9hcmdzLCBhcmdzKSkge1xuXHRcdHN0YXRlLl92YWx1ZSA9IGNhbGxiYWNrO1xuXHRcdHN0YXRlLl9wZW5kaW5nQXJncyA9IGFyZ3M7XG5cblx0XHRjdXJyZW50Q29tcG9uZW50Ll9faG9va3MuX3BlbmRpbmdFZmZlY3RzLnB1c2goc3RhdGUpO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5FZmZlY3R9IGNhbGxiYWNrXG4gKiBAcGFyYW0ge2FueVtdfSBhcmdzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VMYXlvdXRFZmZlY3QoY2FsbGJhY2ssIGFyZ3MpIHtcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5FZmZlY3RIb29rU3RhdGV9ICovXG5cdGNvbnN0IHN0YXRlID0gZ2V0SG9va1N0YXRlKGN1cnJlbnRJbmRleCsrLCA0KTtcblx0aWYgKCFvcHRpb25zLl9za2lwRWZmZWN0cyAmJiBhcmdzQ2hhbmdlZChzdGF0ZS5fYXJncywgYXJncykpIHtcblx0XHRzdGF0ZS5fdmFsdWUgPSBjYWxsYmFjaztcblx0XHRzdGF0ZS5fcGVuZGluZ0FyZ3MgPSBhcmdzO1xuXG5cdFx0Y3VycmVudENvbXBvbmVudC5fcmVuZGVyQ2FsbGJhY2tzLnB1c2goc3RhdGUpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZWYoaW5pdGlhbFZhbHVlKSB7XG5cdGN1cnJlbnRIb29rID0gNTtcblx0cmV0dXJuIHVzZU1lbW8oKCkgPT4gKHsgY3VycmVudDogaW5pdGlhbFZhbHVlIH0pLCBbXSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHJlZlxuICogQHBhcmFtIHsoKSA9PiBvYmplY3R9IGNyZWF0ZUhhbmRsZVxuICogQHBhcmFtIHthbnlbXX0gYXJnc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGNyZWF0ZUhhbmRsZSwgYXJncykge1xuXHRjdXJyZW50SG9vayA9IDY7XG5cdHVzZUxheW91dEVmZmVjdChcblx0XHQoKSA9PiB7XG5cdFx0XHRpZiAodHlwZW9mIHJlZiA9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdHJlZihjcmVhdGVIYW5kbGUoKSk7XG5cdFx0XHRcdHJldHVybiAoKSA9PiByZWYobnVsbCk7XG5cdFx0XHR9IGVsc2UgaWYgKHJlZikge1xuXHRcdFx0XHRyZWYuY3VycmVudCA9IGNyZWF0ZUhhbmRsZSgpO1xuXHRcdFx0XHRyZXR1cm4gKCkgPT4gKHJlZi5jdXJyZW50ID0gbnVsbCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhcmdzID09IG51bGwgPyBhcmdzIDogYXJncy5jb25jYXQocmVmKVxuXHQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7KCkgPT4gYW55fSBmYWN0b3J5XG4gKiBAcGFyYW0ge2FueVtdfSBhcmdzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNZW1vKGZhY3RvcnksIGFyZ3MpIHtcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5NZW1vSG9va1N0YXRlfSAqL1xuXHRjb25zdCBzdGF0ZSA9IGdldEhvb2tTdGF0ZShjdXJyZW50SW5kZXgrKywgNyk7XG5cdGlmIChhcmdzQ2hhbmdlZChzdGF0ZS5fYXJncywgYXJncykpIHtcblx0XHRzdGF0ZS5fcGVuZGluZ1ZhbHVlID0gZmFjdG9yeSgpO1xuXHRcdHN0YXRlLl9wZW5kaW5nQXJncyA9IGFyZ3M7XG5cdFx0c3RhdGUuX2ZhY3RvcnkgPSBmYWN0b3J5O1xuXHRcdHJldHVybiBzdGF0ZS5fcGVuZGluZ1ZhbHVlO1xuXHR9XG5cblx0cmV0dXJuIHN0YXRlLl92YWx1ZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geygpID0+IHZvaWR9IGNhbGxiYWNrXG4gKiBAcGFyYW0ge2FueVtdfSBhcmdzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VDYWxsYmFjayhjYWxsYmFjaywgYXJncykge1xuXHRjdXJyZW50SG9vayA9IDg7XG5cdHJldHVybiB1c2VNZW1vKCgpID0+IGNhbGxiYWNrLCBhcmdzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlByZWFjdENvbnRleHR9IGNvbnRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUNvbnRleHQoY29udGV4dCkge1xuXHRjb25zdCBwcm92aWRlciA9IGN1cnJlbnRDb21wb25lbnQuY29udGV4dFtjb250ZXh0Ll9pZF07XG5cdC8vIFdlIGNvdWxkIHNraXAgdGhpcyBjYWxsIGhlcmUsIGJ1dCB0aGFuIHdlJ2Qgbm90IGNhbGxcblx0Ly8gYG9wdGlvbnMuX2hvb2tgLiBXZSBuZWVkIHRvIGRvIHRoYXQgaW4gb3JkZXIgdG8gbWFrZVxuXHQvLyB0aGUgZGV2dG9vbHMgYXdhcmUgb2YgdGhpcyBob29rLlxuXHQvKiogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkNvbnRleHRIb29rU3RhdGV9ICovXG5cdGNvbnN0IHN0YXRlID0gZ2V0SG9va1N0YXRlKGN1cnJlbnRJbmRleCsrLCA5KTtcblx0Ly8gVGhlIGRldnRvb2xzIG5lZWRzIGFjY2VzcyB0byB0aGUgY29udGV4dCBvYmplY3QgdG9cblx0Ly8gYmUgYWJsZSB0byBwdWxsIG9mIHRoZSBkZWZhdWx0IHZhbHVlIHdoZW4gbm8gcHJvdmlkZXJcblx0Ly8gaXMgcHJlc2VudCBpbiB0aGUgdHJlZS5cblx0c3RhdGUuX2NvbnRleHQgPSBjb250ZXh0O1xuXHRpZiAoIXByb3ZpZGVyKSByZXR1cm4gY29udGV4dC5fZGVmYXVsdFZhbHVlO1xuXHQvLyBUaGlzIGlzIHByb2JhYmx5IG5vdCBzYWZlIHRvIGNvbnZlcnQgdG8gXCIhXCJcblx0aWYgKHN0YXRlLl92YWx1ZSA9PSBudWxsKSB7XG5cdFx0c3RhdGUuX3ZhbHVlID0gdHJ1ZTtcblx0XHRwcm92aWRlci5zdWIoY3VycmVudENvbXBvbmVudCk7XG5cdH1cblx0cmV0dXJuIHByb3ZpZGVyLnByb3BzLnZhbHVlO1xufVxuXG4vKipcbiAqIERpc3BsYXkgYSBjdXN0b20gbGFiZWwgZm9yIGEgY3VzdG9tIGhvb2sgZm9yIHRoZSBkZXZ0b29scyBwYW5lbFxuICogQHR5cGUgezxUPih2YWx1ZTogVCwgY2I/OiAodmFsdWU6IFQpID0+IHN0cmluZyB8IG51bWJlcikgPT4gdm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZURlYnVnVmFsdWUodmFsdWUsIGZvcm1hdHRlcikge1xuXHRpZiAob3B0aW9ucy51c2VEZWJ1Z1ZhbHVlKSB7XG5cdFx0b3B0aW9ucy51c2VEZWJ1Z1ZhbHVlKGZvcm1hdHRlciA/IGZvcm1hdHRlcih2YWx1ZSkgOiB2YWx1ZSk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0geyhlcnJvcjogYW55KSA9PiB2b2lkfSBjYlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRXJyb3JCb3VuZGFyeShjYikge1xuXHQvKiogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkVycm9yQm91bmRhcnlIb29rU3RhdGV9ICovXG5cdGNvbnN0IHN0YXRlID0gZ2V0SG9va1N0YXRlKGN1cnJlbnRJbmRleCsrLCAxMCk7XG5cdGNvbnN0IGVyclN0YXRlID0gdXNlU3RhdGUoKTtcblx0c3RhdGUuX3ZhbHVlID0gY2I7XG5cdGlmICghY3VycmVudENvbXBvbmVudC5jb21wb25lbnREaWRDYXRjaCkge1xuXHRcdGN1cnJlbnRDb21wb25lbnQuY29tcG9uZW50RGlkQ2F0Y2ggPSBlcnIgPT4ge1xuXHRcdFx0aWYgKHN0YXRlLl92YWx1ZSkgc3RhdGUuX3ZhbHVlKGVycik7XG5cdFx0XHRlcnJTdGF0ZVsxXShlcnIpO1xuXHRcdH07XG5cdH1cblx0cmV0dXJuIFtcblx0XHRlcnJTdGF0ZVswXSxcblx0XHQoKSA9PiB7XG5cdFx0XHRlcnJTdGF0ZVsxXSh1bmRlZmluZWQpO1xuXHRcdH1cblx0XTtcbn1cblxuLyoqXG4gKiBBZnRlciBwYWludCBlZmZlY3RzIGNvbnN1bWVyLlxuICovXG5mdW5jdGlvbiBmbHVzaEFmdGVyUGFpbnRFZmZlY3RzKCkge1xuXHRsZXQgY29tcG9uZW50O1xuXHR3aGlsZSAoKGNvbXBvbmVudCA9IGFmdGVyUGFpbnRFZmZlY3RzLnNoaWZ0KCkpKSB7XG5cdFx0aWYgKCFjb21wb25lbnQuX3BhcmVudERvbSkgY29udGludWU7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbXBvbmVudC5fX2hvb2tzLl9wZW5kaW5nRWZmZWN0cy5mb3JFYWNoKGludm9rZUNsZWFudXApO1xuXHRcdFx0Y29tcG9uZW50Ll9faG9va3MuX3BlbmRpbmdFZmZlY3RzLmZvckVhY2goaW52b2tlRWZmZWN0KTtcblx0XHRcdGNvbXBvbmVudC5fX2hvb2tzLl9wZW5kaW5nRWZmZWN0cyA9IFtdO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGNvbXBvbmVudC5fX2hvb2tzLl9wZW5kaW5nRWZmZWN0cyA9IFtdO1xuXHRcdFx0b3B0aW9ucy5fY2F0Y2hFcnJvcihlLCBjb21wb25lbnQuX3Zub2RlKTtcblx0XHR9XG5cdH1cbn1cblxubGV0IEhBU19SQUYgPSB0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID09ICdmdW5jdGlvbic7XG5cbi8qKlxuICogU2NoZWR1bGUgYSBjYWxsYmFjayB0byBiZSBpbnZva2VkIGFmdGVyIHRoZSBicm93c2VyIGhhcyBhIGNoYW5jZSB0byBwYWludCBhIG5ldyBmcmFtZS5cbiAqIERvIHRoaXMgYnkgY29tYmluaW5nIHJlcXVlc3RBbmltYXRpb25GcmFtZSAockFGKSArIHNldFRpbWVvdXQgdG8gaW52b2tlIGEgY2FsbGJhY2sgYWZ0ZXJcbiAqIHRoZSBuZXh0IGJyb3dzZXIgZnJhbWUuXG4gKlxuICogQWxzbywgc2NoZWR1bGUgYSB0aW1lb3V0IGluIHBhcmFsbGVsIHRvIHRoZSB0aGUgckFGIHRvIGVuc3VyZSB0aGUgY2FsbGJhY2sgaXMgaW52b2tlZFxuICogZXZlbiBpZiBSQUYgZG9lc24ndCBmaXJlIChmb3IgZXhhbXBsZSBpZiB0aGUgYnJvd3NlciB0YWIgaXMgbm90IHZpc2libGUpXG4gKlxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBjYWxsYmFja1xuICovXG5mdW5jdGlvbiBhZnRlck5leHRGcmFtZShjYWxsYmFjaykge1xuXHRjb25zdCBkb25lID0gKCkgPT4ge1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHRpZiAoSEFTX1JBRikgY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmKTtcblx0XHRzZXRUaW1lb3V0KGNhbGxiYWNrKTtcblx0fTtcblx0Y29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoZG9uZSwgUkFGX1RJTUVPVVQpO1xuXG5cdGxldCByYWY7XG5cdGlmIChIQVNfUkFGKSB7XG5cdFx0cmFmID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRvbmUpO1xuXHR9XG59XG5cbi8vIE5vdGU6IGlmIHNvbWVvbmUgdXNlZCBvcHRpb25zLmRlYm91bmNlUmVuZGVyaW5nID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lLFxuLy8gdGhlbiBlZmZlY3RzIHdpbGwgQUxXQVlTIHJ1biBvbiB0aGUgTkVYVCBmcmFtZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IG9uZSwgaW5jdXJyaW5nIGEgfjE2bXMgZGVsYXkuXG4vLyBQZXJoYXBzIHRoaXMgaXMgbm90IHN1Y2ggYSBiaWcgZGVhbC5cbi8qKlxuICogU2NoZWR1bGUgYWZ0ZXJQYWludEVmZmVjdHMgZmx1c2ggYWZ0ZXIgdGhlIGJyb3dzZXIgcGFpbnRzXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3UXVldWVMZW5ndGhcbiAqL1xuZnVuY3Rpb24gYWZ0ZXJQYWludChuZXdRdWV1ZUxlbmd0aCkge1xuXHRpZiAobmV3UXVldWVMZW5ndGggPT09IDEgfHwgcHJldlJhZiAhPT0gb3B0aW9ucy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcblx0XHRwcmV2UmFmID0gb3B0aW9ucy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cdFx0KHByZXZSYWYgfHwgYWZ0ZXJOZXh0RnJhbWUpKGZsdXNoQWZ0ZXJQYWludEVmZmVjdHMpO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5FZmZlY3RIb29rU3RhdGV9IGhvb2tcbiAqL1xuZnVuY3Rpb24gaW52b2tlQ2xlYW51cChob29rKSB7XG5cdC8vIEEgaG9vayBjbGVhbnVwIGNhbiBpbnRyb2R1Y2UgYSBjYWxsIHRvIHJlbmRlciB3aGljaCBjcmVhdGVzIGEgbmV3IHJvb3QsIHRoaXMgd2lsbCBjYWxsIG9wdGlvbnMudm5vZGVcblx0Ly8gYW5kIG1vdmUgdGhlIGN1cnJlbnRDb21wb25lbnQgYXdheS5cblx0Y29uc3QgY29tcCA9IGN1cnJlbnRDb21wb25lbnQ7XG5cdGxldCBjbGVhbnVwID0gaG9vay5fY2xlYW51cDtcblx0aWYgKHR5cGVvZiBjbGVhbnVwID09ICdmdW5jdGlvbicpIHtcblx0XHRob29rLl9jbGVhbnVwID0gdW5kZWZpbmVkO1xuXHRcdGNsZWFudXAoKTtcblx0fVxuXHRjdXJyZW50Q29tcG9uZW50ID0gY29tcDtcbn1cblxuLyoqXG4gKiBJbnZva2UgYSBIb29rJ3MgZWZmZWN0XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkVmZmVjdEhvb2tTdGF0ZX0gaG9va1xuICovXG5mdW5jdGlvbiBpbnZva2VFZmZlY3QoaG9vaykge1xuXHQvLyBBIGhvb2sgY2FsbCBjYW4gaW50cm9kdWNlIGEgY2FsbCB0byByZW5kZXIgd2hpY2ggY3JlYXRlcyBhIG5ldyByb290LCB0aGlzIHdpbGwgY2FsbCBvcHRpb25zLnZub2RlXG5cdC8vIGFuZCBtb3ZlIHRoZSBjdXJyZW50Q29tcG9uZW50IGF3YXkuXG5cdGNvbnN0IGNvbXAgPSBjdXJyZW50Q29tcG9uZW50O1xuXHRob29rLl9jbGVhbnVwID0gaG9vay5fdmFsdWUoKTtcblx0Y3VycmVudENvbXBvbmVudCA9IGNvbXA7XG59XG5cbi8qKlxuICogQHBhcmFtIHthbnlbXX0gb2xkQXJnc1xuICogQHBhcmFtIHthbnlbXX0gbmV3QXJnc1xuICovXG5mdW5jdGlvbiBhcmdzQ2hhbmdlZChvbGRBcmdzLCBuZXdBcmdzKSB7XG5cdHJldHVybiAoXG5cdFx0IW9sZEFyZ3MgfHxcblx0XHRvbGRBcmdzLmxlbmd0aCAhPT0gbmV3QXJncy5sZW5ndGggfHxcblx0XHRuZXdBcmdzLnNvbWUoKGFyZywgaW5kZXgpID0+IGFyZyAhPT0gb2xkQXJnc1tpbmRleF0pXG5cdCk7XG59XG5cbmZ1bmN0aW9uIGludm9rZU9yUmV0dXJuKGFyZywgZikge1xuXHRyZXR1cm4gdHlwZW9mIGYgPT0gJ2Z1bmN0aW9uJyA/IGYoYXJnKSA6IGY7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBvcG92ZXIgPSBleHBvcnRzLnVzZVBvcG92ZXIgPSBleHBvcnRzLkFycm93Q29udGFpbmVyID0gZXhwb3J0cy51c2VBcnJvd0NvbnRhaW5lciA9IHZvaWQgMDtcbnZhciBqc3hfcnVudGltZV8xID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xudmFyIHJlYWN0XzEgPSByZXF1aXJlKFwicmVhY3RcIik7XG52YXIgUG9wb3ZlclBvcnRhbF8xID0gcmVxdWlyZShcIi4vUG9wb3ZlclBvcnRhbFwiKTtcbnZhciB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xudmFyIHVzZVBvcG92ZXJfMSA9IHJlcXVpcmUoXCIuL3VzZVBvcG92ZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1c2VQb3BvdmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1c2VQb3BvdmVyXzEudXNlUG9wb3ZlcjsgfSB9KTtcbnZhciB1c2VNZW1vaXplZEFycmF5XzEgPSByZXF1aXJlKFwiLi91c2VNZW1vaXplZEFycmF5XCIpO1xudmFyIHVzZUFycm93Q29udGFpbmVyXzEgPSByZXF1aXJlKFwiLi91c2VBcnJvd0NvbnRhaW5lclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZUFycm93Q29udGFpbmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1c2VBcnJvd0NvbnRhaW5lcl8xLnVzZUFycm93Q29udGFpbmVyOyB9IH0pO1xudmFyIEFycm93Q29udGFpbmVyXzEgPSByZXF1aXJlKFwiLi9BcnJvd0NvbnRhaW5lclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFycm93Q29udGFpbmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBcnJvd0NvbnRhaW5lcl8xLkFycm93Q29udGFpbmVyOyB9IH0pO1xudmFyIFBvcG92ZXJJbnRlcm5hbCA9IHJlYWN0XzEuZm9yd2FyZFJlZihmdW5jdGlvbiAoX2EsIGV4dGVybmFsUmVmKSB7XG4gICAgdmFyIGlzT3BlbiA9IF9hLmlzT3BlbiwgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgY29udGVudCA9IF9hLmNvbnRlbnQsIF9iID0gX2EucG9zaXRpb25zLCBleHRlcm5hbFBvc2l0aW9ucyA9IF9iID09PSB2b2lkIDAgPyB1dGlsXzEuQ29uc3RhbnRzLkRFRkFVTFRfUE9TSVRJT05TIDogX2IsIF9jID0gX2EuYWxpZ24sIGFsaWduID0gX2MgPT09IHZvaWQgMCA/IHV0aWxfMS5Db25zdGFudHMuREVGQVVMVF9BTElHTiA6IF9jLCBfZCA9IF9hLnBhZGRpbmcsIHBhZGRpbmcgPSBfZCA9PT0gdm9pZCAwID8gMCA6IF9kLCBfZSA9IF9hLnJlcG9zaXRpb24sIHJlcG9zaXRpb24gPSBfZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9lLCBfZiA9IF9hLnBhcmVudEVsZW1lbnQsIHBhcmVudEVsZW1lbnQgPSBfZiA9PT0gdm9pZCAwID8gd2luZG93LmRvY3VtZW50LmJvZHkgOiBfZiwgX2cgPSBfYS5ib3VuZGFyeUVsZW1lbnQsIGJvdW5kYXJ5RWxlbWVudCA9IF9nID09PSB2b2lkIDAgPyBwYXJlbnRFbGVtZW50IDogX2csIF9oID0gX2EuY29udGFpbmVyQ2xhc3NOYW1lLCBjb250YWluZXJDbGFzc05hbWUgPSBfaCA9PT0gdm9pZCAwID8gJ3JlYWN0LXRpbnktcG9wb3Zlci1jb250YWluZXInIDogX2gsIGNvbnRhaW5lclN0eWxlID0gX2EuY29udGFpbmVyU3R5bGUsIGNvbnRlbnRMb2NhdGlvbiA9IF9hLmNvbnRlbnRMb2NhdGlvbiwgX2ogPSBfYS5ib3VuZGFyeUluc2V0LCBib3VuZGFyeUluc2V0ID0gX2ogPT09IHZvaWQgMCA/IDAgOiBfaiwgb25DbGlja091dHNpZGUgPSBfYS5vbkNsaWNrT3V0c2lkZTtcbiAgICB2YXIgcG9zaXRpb25zID0gdXNlTWVtb2l6ZWRBcnJheV8xLnVzZU1lbW9pemVkQXJyYXkoZXh0ZXJuYWxQb3NpdGlvbnMpO1xuICAgIC8vIFRPRE86IGZhY3RvciBwcmV2cyBvdXQgaW50byBhIGN1c3RvbSBwcmV2cyBob29rXG4gICAgdmFyIHByZXZJc09wZW4gPSByZWFjdF8xLnVzZVJlZihmYWxzZSk7XG4gICAgdmFyIHByZXZQb3NpdGlvbnMgPSByZWFjdF8xLnVzZVJlZigpO1xuICAgIHZhciBwcmV2Q29udGVudExvY2F0aW9uID0gcmVhY3RfMS51c2VSZWYoKTtcbiAgICB2YXIgcHJldlJlcG9zaXRpb24gPSByZWFjdF8xLnVzZVJlZihyZXBvc2l0aW9uKTtcbiAgICB2YXIgY2hpbGRSZWYgPSByZWFjdF8xLnVzZVJlZigpO1xuICAgIHZhciBfayA9IHJlYWN0XzEudXNlU3RhdGUoe1xuICAgICAgICBhbGlnbjogYWxpZ24sXG4gICAgICAgIG51ZGdlZExlZnQ6IDAsXG4gICAgICAgIG51ZGdlZFRvcDogMCxcbiAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uc1swXSxcbiAgICAgICAgcGFkZGluZzogcGFkZGluZyxcbiAgICAgICAgY2hpbGRSZWN0OiB1dGlsXzEuQ29uc3RhbnRzLkVNUFRZX0NMSUVOVF9SRUNULFxuICAgICAgICBwb3BvdmVyUmVjdDogdXRpbF8xLkNvbnN0YW50cy5FTVBUWV9DTElFTlRfUkVDVCxcbiAgICAgICAgcGFyZW50UmVjdDogdXRpbF8xLkNvbnN0YW50cy5FTVBUWV9DTElFTlRfUkVDVCxcbiAgICAgICAgYm91bmRhcnlSZWN0OiB1dGlsXzEuQ29uc3RhbnRzLkVNUFRZX0NMSUVOVF9SRUNULFxuICAgICAgICBib3VuZGFyeUluc2V0OiBib3VuZGFyeUluc2V0LFxuICAgICAgICB2aW9sYXRpb25zOiB1dGlsXzEuQ29uc3RhbnRzLkVNUFRZX0NMSUVOVF9SRUNULFxuICAgICAgICBoYXNWaW9sYXRpb25zOiBmYWxzZSxcbiAgICB9KSwgcG9wb3ZlclN0YXRlID0gX2tbMF0sIHNldFBvcG92ZXJTdGF0ZSA9IF9rWzFdO1xuICAgIHZhciBvblBvc2l0aW9uUG9wb3ZlciA9IHJlYWN0XzEudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHBvcG92ZXJTdGF0ZSkgeyByZXR1cm4gc2V0UG9wb3ZlclN0YXRlKHBvcG92ZXJTdGF0ZSk7IH0sIFtdKTtcbiAgICB2YXIgX2wgPSB1c2VQb3BvdmVyXzEudXNlUG9wb3Zlcih7XG4gICAgICAgIGlzT3BlbjogaXNPcGVuLFxuICAgICAgICBjaGlsZFJlZjogY2hpbGRSZWYsXG4gICAgICAgIGNvbnRhaW5lckNsYXNzTmFtZTogY29udGFpbmVyQ2xhc3NOYW1lLFxuICAgICAgICBwYXJlbnRFbGVtZW50OiBwYXJlbnRFbGVtZW50LFxuICAgICAgICBib3VuZGFyeUVsZW1lbnQ6IGJvdW5kYXJ5RWxlbWVudCxcbiAgICAgICAgY29udGVudExvY2F0aW9uOiBjb250ZW50TG9jYXRpb24sXG4gICAgICAgIHBvc2l0aW9uczogcG9zaXRpb25zLFxuICAgICAgICBhbGlnbjogYWxpZ24sXG4gICAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgICAgIGJvdW5kYXJ5SW5zZXQ6IGJvdW5kYXJ5SW5zZXQsXG4gICAgICAgIHJlcG9zaXRpb246IHJlcG9zaXRpb24sXG4gICAgICAgIG9uUG9zaXRpb25Qb3BvdmVyOiBvblBvc2l0aW9uUG9wb3ZlcixcbiAgICB9KSwgcG9zaXRpb25Qb3BvdmVyID0gX2wucG9zaXRpb25Qb3BvdmVyLCBwb3BvdmVyUmVmID0gX2wucG9wb3ZlclJlZiwgc2NvdXRSZWYgPSBfbC5zY291dFJlZjtcbiAgICByZWFjdF8xLnVzZUxheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzaG91bGRVcGRhdGUgPSB0cnVlO1xuICAgICAgICB2YXIgdXBkYXRlUG9wb3ZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICBpZiAoaXNPcGVuICYmIHNob3VsZFVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZFJlY3QgPSAoX2EgPSBjaGlsZFJlZiA9PT0gbnVsbCB8fCBjaGlsZFJlZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2hpbGRSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIHZhciBwb3BvdmVyUmVjdCA9IChfYiA9IHBvcG92ZXJSZWYgPT09IG51bGwgfHwgcG9wb3ZlclJlZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcG9wb3ZlclJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkUmVjdCAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgIHBvcG92ZXJSZWN0ICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgKCF1dGlsXzEucmVjdHNBcmVFcXVhbChjaGlsZFJlY3QsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogcG9wb3ZlclN0YXRlLmNoaWxkUmVjdC50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBwb3BvdmVyU3RhdGUuY2hpbGRSZWN0LmxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogcG9wb3ZlclN0YXRlLmNoaWxkUmVjdC53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogcG9wb3ZlclN0YXRlLmNoaWxkUmVjdC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3R0b206IHBvcG92ZXJTdGF0ZS5jaGlsZFJlY3QudG9wICsgcG9wb3ZlclN0YXRlLmNoaWxkUmVjdC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogcG9wb3ZlclN0YXRlLmNoaWxkUmVjdC5sZWZ0ICsgcG9wb3ZlclN0YXRlLmNoaWxkUmVjdC53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgfSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcG92ZXJSZWN0LndpZHRoICE9PSBwb3BvdmVyU3RhdGUucG9wb3ZlclJlY3Qud2lkdGggfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcG92ZXJSZWN0LmhlaWdodCAhPT0gcG9wb3ZlclN0YXRlLnBvcG92ZXJSZWN0LmhlaWdodCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wb3ZlclN0YXRlLnBhZGRpbmcgIT09IHBhZGRpbmcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcG92ZXJTdGF0ZS5hbGlnbiAhPT0gYWxpZ24gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9ucyAhPT0gcHJldlBvc2l0aW9ucy5jdXJyZW50IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50TG9jYXRpb24gIT09IHByZXZDb250ZW50TG9jYXRpb24uY3VycmVudCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3NpdGlvbiAhPT0gcHJldlJlcG9zaXRpb24uY3VycmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25Qb3BvdmVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGZhY3RvciBwcmV2IGNoZWNrcyBvdXQgaW50byB0aGUgY3VzdG9tIHByZXZzIGhvb2tcbiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb25zICE9PSBwcmV2UG9zaXRpb25zLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJldlBvc2l0aW9ucy5jdXJyZW50ID0gcG9zaXRpb25zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY29udGVudExvY2F0aW9uICE9PSBwcmV2Q29udGVudExvY2F0aW9uLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJldkNvbnRlbnRMb2NhdGlvbi5jdXJyZW50ID0gY29udGVudExvY2F0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVwb3NpdGlvbiAhPT0gcHJldlJlcG9zaXRpb24uY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICBwcmV2UmVwb3NpdGlvbi5jdXJyZW50ID0gcmVwb3NpdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZVBvcG92ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZJc09wZW4uY3VycmVudCA9IGlzT3BlbjtcbiAgICAgICAgfTtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGVQb3BvdmVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgIH0sIFtcbiAgICAgICAgYWxpZ24sXG4gICAgICAgIGNvbnRlbnRMb2NhdGlvbixcbiAgICAgICAgaXNPcGVuLFxuICAgICAgICBwYWRkaW5nLFxuICAgICAgICBwb3BvdmVyUmVmLFxuICAgICAgICBwb3BvdmVyU3RhdGUuYWxpZ24sXG4gICAgICAgIHBvcG92ZXJTdGF0ZS5jaGlsZFJlY3QuaGVpZ2h0LFxuICAgICAgICBwb3BvdmVyU3RhdGUuY2hpbGRSZWN0LmxlZnQsXG4gICAgICAgIHBvcG92ZXJTdGF0ZS5jaGlsZFJlY3QudG9wLFxuICAgICAgICBwb3BvdmVyU3RhdGUuY2hpbGRSZWN0LndpZHRoLFxuICAgICAgICBwb3BvdmVyU3RhdGUucGFkZGluZyxcbiAgICAgICAgcG9wb3ZlclN0YXRlLnBvcG92ZXJSZWN0LmhlaWdodCxcbiAgICAgICAgcG9wb3ZlclN0YXRlLnBvcG92ZXJSZWN0LndpZHRoLFxuICAgICAgICBwb3NpdGlvblBvcG92ZXIsXG4gICAgICAgIHBvc2l0aW9ucyxcbiAgICAgICAgcmVwb3NpdGlvbixcbiAgICBdKTtcbiAgICByZWFjdF8xLnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwb3BvdmVyRWxlbWVudCA9IHBvcG92ZXJSZWYuY3VycmVudDtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihwb3BvdmVyRWxlbWVudC5zdHlsZSwgY29udGFpbmVyU3R5bGUpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoY29udGFpbmVyU3R5bGUgIT09IG51bGwgJiYgY29udGFpbmVyU3R5bGUgIT09IHZvaWQgMCA/IGNvbnRhaW5lclN0eWxlIDoge30pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWxldGUgcG9wb3ZlckVsZW1lbnQuc3R5bGVba2V5XTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH0sIFtjb250YWluZXJTdHlsZSwgaXNPcGVuLCBwb3BvdmVyUmVmXSk7XG4gICAgdmFyIGhhbmRsZU9uQ2xpY2tPdXRzaWRlID0gcmVhY3RfMS51c2VDYWxsYmFjayhmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAoaXNPcGVuICYmXG4gICAgICAgICAgICAhKChfYSA9IHBvcG92ZXJSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbnRhaW5zKGUudGFyZ2V0KSkgJiZcbiAgICAgICAgICAgICEoKF9iID0gY2hpbGRSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNvbnRhaW5zKGUudGFyZ2V0KSkpIHtcbiAgICAgICAgICAgIG9uQ2xpY2tPdXRzaWRlID09PSBudWxsIHx8IG9uQ2xpY2tPdXRzaWRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkNsaWNrT3V0c2lkZShlKTtcbiAgICAgICAgfVxuICAgIH0sIFtpc09wZW4sIG9uQ2xpY2tPdXRzaWRlLCBwb3BvdmVyUmVmXSk7XG4gICAgdmFyIGhhbmRsZVdpbmRvd1Jlc2l6ZSA9IHJlYWN0XzEudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2hpbGRSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7IHJldHVybiBwb3NpdGlvblBvcG92ZXIoKTsgfSk7XG4gICAgICAgIH1cbiAgICB9LCBbcG9zaXRpb25Qb3BvdmVyXSk7XG4gICAgcmVhY3RfMS51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVPbkNsaWNrT3V0c2lkZSwgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVXaW5kb3dSZXNpemUpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlT25DbGlja091dHNpZGUsIHRydWUpO1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVdpbmRvd1Jlc2l6ZSk7XG4gICAgICAgIH07XG4gICAgfSwgW2hhbmRsZU9uQ2xpY2tPdXRzaWRlLCBoYW5kbGVXaW5kb3dSZXNpemVdKTtcbiAgICB2YXIgaGFuZGxlUmVmID0gcmVhY3RfMS51c2VDYWxsYmFjayhmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBjaGlsZFJlZi5jdXJyZW50ID0gbm9kZTtcbiAgICAgICAgaWYgKGV4dGVybmFsUmVmICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXh0ZXJuYWxSZWYgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxSZWYuY3VycmVudCA9IG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZXh0ZXJuYWxSZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBleHRlcm5hbFJlZihub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFtleHRlcm5hbFJlZl0pO1xuICAgIHZhciByZW5kZXJDaGlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlYWN0XzEuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgICAgICAgICByZWY6IGhhbmRsZVJlZixcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgcmVuZGVyUG9wb3ZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc09wZW4pXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIChqc3hfcnVudGltZV8xLmpzeChQb3BvdmVyUG9ydGFsXzEuUG9wb3ZlclBvcnRhbCwgX19hc3NpZ24oeyBlbGVtZW50OiBwb3BvdmVyUmVmLmN1cnJlbnQsIHNjb3V0RWxlbWVudDogc2NvdXRSZWYuY3VycmVudCwgY29udGFpbmVyOiBwYXJlbnRFbGVtZW50IH0sIHsgY2hpbGRyZW46IHR5cGVvZiBjb250ZW50ID09PSAnZnVuY3Rpb24nID8gY29udGVudChwb3BvdmVyU3RhdGUpIDogY29udGVudCB9KSwgdm9pZCAwKSk7XG4gICAgfTtcbiAgICByZXR1cm4gKGpzeF9ydW50aW1lXzEuanN4cyhqc3hfcnVudGltZV8xLkZyYWdtZW50LCB7IGNoaWxkcmVuOiBbcmVuZGVyQ2hpbGQoKSwgcmVuZGVyUG9wb3ZlcigpXSB9LCB2b2lkIDApKTtcbn0pO1xuZXhwb3J0cy5Qb3BvdmVyID0gcmVhY3RfMS5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKVxuICAgICAgICByZXR1cm4gcHJvcHMuY2hpbGRyZW47XG4gICAgcmV0dXJuIGpzeF9ydW50aW1lXzEuanN4KFBvcG92ZXJJbnRlcm5hbCwgX19hc3NpZ24oe30sIHByb3BzLCB7IHJlZjogcmVmIH0pLCB2b2lkIDApO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qb3BvdmVyLmpzLm1hcCIsImltcG9ydCB7XG4gIHVzZVJlZixcbiAgdXNlTGF5b3V0RWZmZWN0LFxuICB1c2VTdGF0ZSxcbiAgdXNlQ2FsbGJhY2ssXG4gIHVzZUVmZmVjdCxcbiAgZm9yd2FyZFJlZixcbiAgY2xvbmVFbGVtZW50LFxufSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQb3BvdmVyUG9ydGFsIH0gZnJvbSAnLi9Qb3BvdmVyUG9ydGFsJztcbmltcG9ydCB7XG4gIENvbnRlbnRMb2NhdGlvbixcbiAgQ29udGVudExvY2F0aW9uR2V0dGVyLFxuICBQb3BvdmVyUG9zaXRpb24sXG4gIFBvcG92ZXJQcm9wcyxcbiAgUG9wb3ZlclN0YXRlLFxufSBmcm9tICcuJztcbmltcG9ydCB7IENvbnN0YW50cywgcmVjdHNBcmVFcXVhbCB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyB1c2VQb3BvdmVyIH0gZnJvbSAnLi91c2VQb3BvdmVyJztcbmltcG9ydCB7IHVzZU1lbW9pemVkQXJyYXkgfSBmcm9tICcuL3VzZU1lbW9pemVkQXJyYXknO1xuXG5leHBvcnQgeyB1c2VBcnJvd0NvbnRhaW5lciB9IGZyb20gJy4vdXNlQXJyb3dDb250YWluZXInO1xuZXhwb3J0IHsgQXJyb3dDb250YWluZXIgfSBmcm9tICcuL0Fycm93Q29udGFpbmVyJztcbmV4cG9ydCB7IHVzZVBvcG92ZXIgfTtcblxuY29uc3QgUG9wb3ZlckludGVybmFsID0gZm9yd2FyZFJlZjxIVE1MRWxlbWVudCwgUG9wb3ZlclByb3BzPihcbiAgKFxuICAgIHtcbiAgICAgIGlzT3BlbixcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY29udGVudCxcbiAgICAgIHBvc2l0aW9uczogZXh0ZXJuYWxQb3NpdGlvbnMgPSBDb25zdGFudHMuREVGQVVMVF9QT1NJVElPTlMsXG4gICAgICBhbGlnbiA9IENvbnN0YW50cy5ERUZBVUxUX0FMSUdOLFxuICAgICAgcGFkZGluZyA9IDAsXG4gICAgICByZXBvc2l0aW9uID0gdHJ1ZSxcbiAgICAgIHBhcmVudEVsZW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQuYm9keSxcbiAgICAgIGJvdW5kYXJ5RWxlbWVudCA9IHBhcmVudEVsZW1lbnQsXG4gICAgICBjb250YWluZXJDbGFzc05hbWUgPSAncmVhY3QtdGlueS1wb3BvdmVyLWNvbnRhaW5lcicsXG4gICAgICBjb250YWluZXJTdHlsZSxcbiAgICAgIGNvbnRlbnRMb2NhdGlvbixcbiAgICAgIGJvdW5kYXJ5SW5zZXQgPSAwLFxuICAgICAgb25DbGlja091dHNpZGUsXG4gICAgfSxcbiAgICBleHRlcm5hbFJlZixcbiAgKSA9PiB7XG4gICAgY29uc3QgcG9zaXRpb25zID0gdXNlTWVtb2l6ZWRBcnJheShleHRlcm5hbFBvc2l0aW9ucyk7XG5cbiAgICAvLyBUT0RPOiBmYWN0b3IgcHJldnMgb3V0IGludG8gYSBjdXN0b20gcHJldnMgaG9va1xuICAgIGNvbnN0IHByZXZJc09wZW4gPSB1c2VSZWYoZmFsc2UpO1xuICAgIGNvbnN0IHByZXZQb3NpdGlvbnMgPSB1c2VSZWY8UG9wb3ZlclBvc2l0aW9uW10gfCB1bmRlZmluZWQ+KCk7XG4gICAgY29uc3QgcHJldkNvbnRlbnRMb2NhdGlvbiA9IHVzZVJlZjxDb250ZW50TG9jYXRpb24gfCBDb250ZW50TG9jYXRpb25HZXR0ZXIgfCB1bmRlZmluZWQ+KCk7XG4gICAgY29uc3QgcHJldlJlcG9zaXRpb24gPSB1c2VSZWYocmVwb3NpdGlvbik7XG5cbiAgICBjb25zdCBjaGlsZFJlZiA9IHVzZVJlZjxIVE1MRWxlbWVudCB8IHVuZGVmaW5lZD4oKTtcblxuICAgIGNvbnN0IFtwb3BvdmVyU3RhdGUsIHNldFBvcG92ZXJTdGF0ZV0gPSB1c2VTdGF0ZTxQb3BvdmVyU3RhdGU+KHtcbiAgICAgIGFsaWduLFxuICAgICAgbnVkZ2VkTGVmdDogMCxcbiAgICAgIG51ZGdlZFRvcDogMCxcbiAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbnNbMF0sXG4gICAgICBwYWRkaW5nLFxuICAgICAgY2hpbGRSZWN0OiBDb25zdGFudHMuRU1QVFlfQ0xJRU5UX1JFQ1QsXG4gICAgICBwb3BvdmVyUmVjdDogQ29uc3RhbnRzLkVNUFRZX0NMSUVOVF9SRUNULFxuICAgICAgcGFyZW50UmVjdDogQ29uc3RhbnRzLkVNUFRZX0NMSUVOVF9SRUNULFxuICAgICAgYm91bmRhcnlSZWN0OiBDb25zdGFudHMuRU1QVFlfQ0xJRU5UX1JFQ1QsXG4gICAgICBib3VuZGFyeUluc2V0LFxuICAgICAgdmlvbGF0aW9uczogQ29uc3RhbnRzLkVNUFRZX0NMSUVOVF9SRUNULFxuICAgICAgaGFzVmlvbGF0aW9uczogZmFsc2UsXG4gICAgfSk7XG5cbiAgICBjb25zdCBvblBvc2l0aW9uUG9wb3ZlciA9IHVzZUNhbGxiYWNrKFxuICAgICAgKHBvcG92ZXJTdGF0ZTogUG9wb3ZlclN0YXRlKSA9PiBzZXRQb3BvdmVyU3RhdGUocG9wb3ZlclN0YXRlKSxcbiAgICAgIFtdLFxuICAgICk7XG5cbiAgICBjb25zdCB7IHBvc2l0aW9uUG9wb3ZlciwgcG9wb3ZlclJlZiwgc2NvdXRSZWYgfSA9IHVzZVBvcG92ZXIoe1xuICAgICAgaXNPcGVuLFxuICAgICAgY2hpbGRSZWYsXG4gICAgICBjb250YWluZXJDbGFzc05hbWUsXG4gICAgICBwYXJlbnRFbGVtZW50LFxuICAgICAgYm91bmRhcnlFbGVtZW50LFxuICAgICAgY29udGVudExvY2F0aW9uLFxuICAgICAgcG9zaXRpb25zLFxuICAgICAgYWxpZ24sXG4gICAgICBwYWRkaW5nLFxuICAgICAgYm91bmRhcnlJbnNldCxcbiAgICAgIHJlcG9zaXRpb24sXG4gICAgICBvblBvc2l0aW9uUG9wb3ZlcixcbiAgICB9KTtcblxuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICBsZXQgc2hvdWxkVXBkYXRlID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHVwZGF0ZVBvcG92ZXIgPSAoKSA9PiB7XG4gICAgICAgIGlmIChpc09wZW4gJiYgc2hvdWxkVXBkYXRlKSB7XG4gICAgICAgICAgY29uc3QgY2hpbGRSZWN0ID0gY2hpbGRSZWY/LmN1cnJlbnQ/LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgIGNvbnN0IHBvcG92ZXJSZWN0ID0gcG9wb3ZlclJlZj8uY3VycmVudD8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY2hpbGRSZWN0ICE9IG51bGwgJiZcbiAgICAgICAgICAgIHBvcG92ZXJSZWN0ICE9IG51bGwgJiZcbiAgICAgICAgICAgICghcmVjdHNBcmVFcXVhbChjaGlsZFJlY3QsIHtcbiAgICAgICAgICAgICAgdG9wOiBwb3BvdmVyU3RhdGUuY2hpbGRSZWN0LnRvcCxcbiAgICAgICAgICAgICAgbGVmdDogcG9wb3ZlclN0YXRlLmNoaWxkUmVjdC5sZWZ0LFxuICAgICAgICAgICAgICB3aWR0aDogcG9wb3ZlclN0YXRlLmNoaWxkUmVjdC53aWR0aCxcbiAgICAgICAgICAgICAgaGVpZ2h0OiBwb3BvdmVyU3RhdGUuY2hpbGRSZWN0LmhlaWdodCxcbiAgICAgICAgICAgICAgYm90dG9tOiBwb3BvdmVyU3RhdGUuY2hpbGRSZWN0LnRvcCArIHBvcG92ZXJTdGF0ZS5jaGlsZFJlY3QuaGVpZ2h0LFxuICAgICAgICAgICAgICByaWdodDogcG9wb3ZlclN0YXRlLmNoaWxkUmVjdC5sZWZ0ICsgcG9wb3ZlclN0YXRlLmNoaWxkUmVjdC53aWR0aCxcbiAgICAgICAgICAgIH0pIHx8XG4gICAgICAgICAgICAgIHBvcG92ZXJSZWN0LndpZHRoICE9PSBwb3BvdmVyU3RhdGUucG9wb3ZlclJlY3Qud2lkdGggfHxcbiAgICAgICAgICAgICAgcG9wb3ZlclJlY3QuaGVpZ2h0ICE9PSBwb3BvdmVyU3RhdGUucG9wb3ZlclJlY3QuaGVpZ2h0IHx8XG4gICAgICAgICAgICAgIHBvcG92ZXJTdGF0ZS5wYWRkaW5nICE9PSBwYWRkaW5nIHx8XG4gICAgICAgICAgICAgIHBvcG92ZXJTdGF0ZS5hbGlnbiAhPT0gYWxpZ24gfHxcbiAgICAgICAgICAgICAgcG9zaXRpb25zICE9PSBwcmV2UG9zaXRpb25zLmN1cnJlbnQgfHxcbiAgICAgICAgICAgICAgY29udGVudExvY2F0aW9uICE9PSBwcmV2Q29udGVudExvY2F0aW9uLmN1cnJlbnQgfHxcbiAgICAgICAgICAgICAgcmVwb3NpdGlvbiAhPT0gcHJldlJlcG9zaXRpb24uY3VycmVudClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHBvc2l0aW9uUG9wb3ZlcigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRPRE86IGZhY3RvciBwcmV2IGNoZWNrcyBvdXQgaW50byB0aGUgY3VzdG9tIHByZXZzIGhvb2tcbiAgICAgICAgICBpZiAocG9zaXRpb25zICE9PSBwcmV2UG9zaXRpb25zLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHByZXZQb3NpdGlvbnMuY3VycmVudCA9IHBvc2l0aW9ucztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvbnRlbnRMb2NhdGlvbiAhPT0gcHJldkNvbnRlbnRMb2NhdGlvbi5jdXJyZW50KSB7XG4gICAgICAgICAgICBwcmV2Q29udGVudExvY2F0aW9uLmN1cnJlbnQgPSBjb250ZW50TG9jYXRpb247XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXBvc2l0aW9uICE9PSBwcmV2UmVwb3NpdGlvbi5jdXJyZW50KSB7XG4gICAgICAgICAgICBwcmV2UmVwb3NpdGlvbi5jdXJyZW50ID0gcmVwb3NpdGlvbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZVBvcG92ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJc09wZW4uY3VycmVudCA9IGlzT3BlbjtcbiAgICAgIH07XG5cbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlUG9wb3Zlcik7XG5cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHNob3VsZFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgfTtcbiAgICB9LCBbXG4gICAgICBhbGlnbixcbiAgICAgIGNvbnRlbnRMb2NhdGlvbixcbiAgICAgIGlzT3BlbixcbiAgICAgIHBhZGRpbmcsXG4gICAgICBwb3BvdmVyUmVmLFxuICAgICAgcG9wb3ZlclN0YXRlLmFsaWduLFxuICAgICAgcG9wb3ZlclN0YXRlLmNoaWxkUmVjdC5oZWlnaHQsXG4gICAgICBwb3BvdmVyU3RhdGUuY2hpbGRSZWN0LmxlZnQsXG4gICAgICBwb3BvdmVyU3RhdGUuY2hpbGRSZWN0LnRvcCxcbiAgICAgIHBvcG92ZXJTdGF0ZS5jaGlsZFJlY3Qud2lkdGgsXG4gICAgICBwb3BvdmVyU3RhdGUucGFkZGluZyxcbiAgICAgIHBvcG92ZXJTdGF0ZS5wb3BvdmVyUmVjdC5oZWlnaHQsXG4gICAgICBwb3BvdmVyU3RhdGUucG9wb3ZlclJlY3Qud2lkdGgsXG4gICAgICBwb3NpdGlvblBvcG92ZXIsXG4gICAgICBwb3NpdGlvbnMsXG4gICAgICByZXBvc2l0aW9uLFxuICAgIF0pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGNvbnN0IHBvcG92ZXJFbGVtZW50ID0gcG9wb3ZlclJlZi5jdXJyZW50O1xuXG4gICAgICBPYmplY3QuYXNzaWduKHBvcG92ZXJFbGVtZW50LnN0eWxlLCBjb250YWluZXJTdHlsZSk7XG5cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIE9iamVjdC5rZXlzKGNvbnRhaW5lclN0eWxlID8/IHt9KS5mb3JFYWNoKFxuICAgICAgICAgIChrZXkpID0+XG4gICAgICAgICAgICBkZWxldGUgcG9wb3ZlckVsZW1lbnQuc3R5bGVbXG4gICAgICAgICAgICAgIGtleSBhcyBrZXlvZiBPbWl0PHR5cGVvZiBjb250YWluZXJTdHlsZSwgJ2xlbmd0aCcgfCAncGFyZW50UnVsZSc+XG4gICAgICAgICAgICBdLFxuICAgICAgICApO1xuICAgICAgfTtcbiAgICB9LCBbY29udGFpbmVyU3R5bGUsIGlzT3BlbiwgcG9wb3ZlclJlZl0pO1xuXG4gICAgY29uc3QgaGFuZGxlT25DbGlja091dHNpZGUgPSB1c2VDYWxsYmFjayhcbiAgICAgIChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBpc09wZW4gJiZcbiAgICAgICAgICAhcG9wb3ZlclJlZi5jdXJyZW50Py5jb250YWlucyhlLnRhcmdldCBhcyBOb2RlKSAmJlxuICAgICAgICAgICFjaGlsZFJlZi5jdXJyZW50Py5jb250YWlucyhlLnRhcmdldCBhcyBOb2RlKVxuICAgICAgICApIHtcbiAgICAgICAgICBvbkNsaWNrT3V0c2lkZT8uKGUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW2lzT3Blbiwgb25DbGlja091dHNpZGUsIHBvcG92ZXJSZWZdLFxuICAgICk7XG5cbiAgICBjb25zdCBoYW5kbGVXaW5kb3dSZXNpemUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICBpZiAoY2hpbGRSZWYuY3VycmVudCkge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHBvc2l0aW9uUG9wb3ZlcigpKTtcbiAgICAgIH1cbiAgICB9LCBbcG9zaXRpb25Qb3BvdmVyXSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlT25DbGlja091dHNpZGUsIHRydWUpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVdpbmRvd1Jlc2l6ZSk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVPbkNsaWNrT3V0c2lkZSwgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVXaW5kb3dSZXNpemUpO1xuICAgICAgfTtcbiAgICB9LCBbaGFuZGxlT25DbGlja091dHNpZGUsIGhhbmRsZVdpbmRvd1Jlc2l6ZV0pO1xuXG4gICAgY29uc3QgaGFuZGxlUmVmID0gdXNlQ2FsbGJhY2soXG4gICAgICAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgY2hpbGRSZWYuY3VycmVudCA9IG5vZGU7XG4gICAgICAgIGlmIChleHRlcm5hbFJlZiAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBleHRlcm5hbFJlZiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIChleHRlcm5hbFJlZiBhcyBSZWFjdC5NdXRhYmxlUmVmT2JqZWN0PEhUTUxFbGVtZW50PikuY3VycmVudCA9IG5vZGU7XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZXh0ZXJuYWxSZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIChleHRlcm5hbFJlZiBhcyAoaW5zdGFuY2U6IEhUTUxFbGVtZW50KSA9PiB2b2lkKShub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBbZXh0ZXJuYWxSZWZdLFxuICAgICk7XG5cbiAgICBjb25zdCByZW5kZXJDaGlsZCA9ICgpID0+XG4gICAgICBjbG9uZUVsZW1lbnQoY2hpbGRyZW4gYXMgSlNYLkVsZW1lbnQsIHtcbiAgICAgICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgICB9KTtcblxuICAgIGNvbnN0IHJlbmRlclBvcG92ZXIgPSAoKSA9PiB7XG4gICAgICBpZiAoIWlzT3BlbikgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8UG9wb3ZlclBvcnRhbFxuICAgICAgICAgIGVsZW1lbnQ9e3BvcG92ZXJSZWYuY3VycmVudH1cbiAgICAgICAgICBzY291dEVsZW1lbnQ9e3Njb3V0UmVmLmN1cnJlbnR9XG4gICAgICAgICAgY29udGFpbmVyPXtwYXJlbnRFbGVtZW50fVxuICAgICAgICA+XG4gICAgICAgICAge3R5cGVvZiBjb250ZW50ID09PSAnZnVuY3Rpb24nID8gY29udGVudChwb3BvdmVyU3RhdGUpIDogY29udGVudH1cbiAgICAgICAgPC9Qb3BvdmVyUG9ydGFsPlxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIHtyZW5kZXJDaGlsZCgpfVxuICAgICAgICB7cmVuZGVyUG9wb3ZlcigpfVxuICAgICAgPC8+XG4gICAgKTtcbiAgfSxcbik7XG5cbmV4cG9ydCBjb25zdCBQb3BvdmVyID0gZm9yd2FyZFJlZjxIVE1MRWxlbWVudCwgUG9wb3ZlclByb3BzPigocHJvcHMsIHJlZikgPT4ge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBwcm9wcy5jaGlsZHJlbjtcbiAgcmV0dXJuIDxQb3BvdmVySW50ZXJuYWwgey4uLnByb3BzfSByZWY9e3JlZn0gLz47XG59KTtcbiIsImltcG9ydHtvcHRpb25zIGFzIHIsRnJhZ21lbnQgYXMgX31mcm9tXCJwcmVhY3RcIjtleHBvcnR7RnJhZ21lbnR9ZnJvbVwicHJlYWN0XCI7dmFyIG89MDtmdW5jdGlvbiBlKF8sZSxuLHQsZil7dmFyIGwscyx1PXt9O2ZvcihzIGluIGUpXCJyZWZcIj09cz9sPWVbc106dVtzXT1lW3NdO3ZhciBhPXt0eXBlOl8scHJvcHM6dSxrZXk6bixyZWY6bCxfX2s6bnVsbCxfXzpudWxsLF9fYjowLF9fZTpudWxsLF9fZDp2b2lkIDAsX19jOm51bGwsX19oOm51bGwsY29uc3RydWN0b3I6dm9pZCAwLF9fdjotLW8sX19zb3VyY2U6ZixfX3NlbGY6dH07aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgXyYmKGw9Xy5kZWZhdWx0UHJvcHMpKWZvcihzIGluIGwpdm9pZCAwPT09dVtzXSYmKHVbc109bFtzXSk7cmV0dXJuIHIudm5vZGUmJnIudm5vZGUoYSksYX1leHBvcnR7ZSBhcyBqc3gsZSBhcyBqc3hzLGUgYXMganN4REVWfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpzeFJ1bnRpbWUubW9kdWxlLmpzLm1hcFxuIiwiaW1wb3J0IHsgb3B0aW9ucywgRnJhZ21lbnQgfSBmcm9tICdwcmVhY3QnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgncHJlYWN0JykuVk5vZGV9IFZOb2RlICovXG5cbmxldCB2bm9kZUlkID0gMDtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKiBUaGlzIGZpbGUgZXhwb3J0cyB2YXJpb3VzIG1ldGhvZHMgdGhhdCBpbXBsZW1lbnQgQmFiZWwncyBcImF1dG9tYXRpY1wiIEpTWCBydW50aW1lIEFQSTpcbiAqIC0ganN4KHR5cGUsIHByb3BzLCBrZXkpXG4gKiAtIGpzeHModHlwZSwgcHJvcHMsIGtleSlcbiAqIC0ganN4REVWKHR5cGUsIHByb3BzLCBrZXksIF9fc291cmNlLCBfX3NlbGYpXG4gKlxuICogVGhlIGltcGxlbWVudGF0aW9uIG9mIGNyZWF0ZVZOb2RlIGhlcmUgaXMgb3B0aW1pemVkIGZvciBwZXJmb3JtYW5jZS5cbiAqIEJlbmNobWFya3M6IGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWY2YjU0YTBiNDYzMjEwMGE3ZGNkMmIzXG4gKi9cblxuLyoqXG4gKiBKU1guRWxlbWVudCBmYWN0b3J5IHVzZWQgYnkgQmFiZWwncyB7cnVudGltZTpcImF1dG9tYXRpY1wifSBKU1ggdHJhbnNmb3JtXG4gKiBAcGFyYW0ge1ZOb2RlWyd0eXBlJ119IHR5cGVcbiAqIEBwYXJhbSB7Vk5vZGVbJ3Byb3BzJ119IHByb3BzXG4gKiBAcGFyYW0ge1ZOb2RlWydrZXknXX0gW2tleV1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbX19zZWxmXVxuICogQHBhcmFtIHtzdHJpbmd9IFtfX3NvdXJjZV1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlVk5vZGUodHlwZSwgcHJvcHMsIGtleSwgX19zZWxmLCBfX3NvdXJjZSkge1xuXHQvLyBXZSdsbCB3YW50IHRvIHByZXNlcnZlIGByZWZgIGluIHByb3BzIHRvIGdldCByaWQgb2YgdGhlIG5lZWQgZm9yXG5cdC8vIGZvcndhcmRSZWYgY29tcG9uZW50cyBpbiB0aGUgZnV0dXJlLCBidXQgdGhhdCBzaG91bGQgaGFwcGVuIHZpYVxuXHQvLyBhIHNlcGFyYXRlIFBSLlxuXHRsZXQgbm9ybWFsaXplZFByb3BzID0ge30sXG5cdFx0cmVmLFxuXHRcdGk7XG5cdGZvciAoaSBpbiBwcm9wcykge1xuXHRcdGlmIChpID09ICdyZWYnKSB7XG5cdFx0XHRyZWYgPSBwcm9wc1tpXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bm9ybWFsaXplZFByb3BzW2ldID0gcHJvcHNbaV07XG5cdFx0fVxuXHR9XG5cblx0Y29uc3Qgdm5vZGUgPSB7XG5cdFx0dHlwZSxcblx0XHRwcm9wczogbm9ybWFsaXplZFByb3BzLFxuXHRcdGtleSxcblx0XHRyZWYsXG5cdFx0X2NoaWxkcmVuOiBudWxsLFxuXHRcdF9wYXJlbnQ6IG51bGwsXG5cdFx0X2RlcHRoOiAwLFxuXHRcdF9kb206IG51bGwsXG5cdFx0X25leHREb206IHVuZGVmaW5lZCxcblx0XHRfY29tcG9uZW50OiBudWxsLFxuXHRcdF9oeWRyYXRpbmc6IG51bGwsXG5cdFx0Y29uc3RydWN0b3I6IHVuZGVmaW5lZCxcblx0XHRfb3JpZ2luYWw6IC0tdm5vZGVJZCxcblx0XHRfX3NvdXJjZSxcblx0XHRfX3NlbGZcblx0fTtcblxuXHQvLyBJZiBhIENvbXBvbmVudCBWTm9kZSwgY2hlY2sgZm9yIGFuZCBhcHBseSBkZWZhdWx0UHJvcHMuXG5cdC8vIE5vdGU6IGB0eXBlYCBpcyBvZnRlbiBhIFN0cmluZywgYW5kIGNhbiBiZSBgdW5kZWZpbmVkYCBpbiBkZXZlbG9wbWVudC5cblx0aWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nICYmIChyZWYgPSB0eXBlLmRlZmF1bHRQcm9wcykpIHtcblx0XHRmb3IgKGkgaW4gcmVmKVxuXHRcdFx0aWYgKHR5cGVvZiBub3JtYWxpemVkUHJvcHNbaV0gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdG5vcm1hbGl6ZWRQcm9wc1tpXSA9IHJlZltpXTtcblx0XHRcdH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnZub2RlKSBvcHRpb25zLnZub2RlKHZub2RlKTtcblx0cmV0dXJuIHZub2RlO1xufVxuXG5leHBvcnQge1xuXHRjcmVhdGVWTm9kZSBhcyBqc3gsXG5cdGNyZWF0ZVZOb2RlIGFzIGpzeHMsXG5cdGNyZWF0ZVZOb2RlIGFzIGpzeERFVixcblx0RnJhZ21lbnRcbn07XG4iLCJpbXBvcnR7dXNlU3RhdGUgYXMgbix1c2VSZWR1Y2VyIGFzIHQsdXNlRWZmZWN0IGFzIGUsdXNlTGF5b3V0RWZmZWN0IGFzIHIsdXNlUmVmIGFzIHUsdXNlSW1wZXJhdGl2ZUhhbmRsZSBhcyBvLHVzZU1lbW8gYXMgaSx1c2VDYWxsYmFjayBhcyBsLHVzZUNvbnRleHQgYXMgZix1c2VEZWJ1Z1ZhbHVlIGFzIGN9ZnJvbVwicHJlYWN0L2hvb2tzXCI7ZXhwb3J0KmZyb21cInByZWFjdC9ob29rc1wiO2ltcG9ydHtDb21wb25lbnQgYXMgYSxjcmVhdGVFbGVtZW50IGFzIHMsb3B0aW9ucyBhcyBoLHRvQ2hpbGRBcnJheSBhcyB2LEZyYWdtZW50IGFzIGQscmVuZGVyIGFzIHAsaHlkcmF0ZSBhcyBtLGNsb25lRWxlbWVudCBhcyB5LGNyZWF0ZVJlZiBhcyBiLGNyZWF0ZUNvbnRleHQgYXMgX31mcm9tXCJwcmVhY3RcIjtleHBvcnR7Y3JlYXRlRWxlbWVudCxjcmVhdGVDb250ZXh0LGNyZWF0ZVJlZixGcmFnbWVudCxDb21wb25lbnR9ZnJvbVwicHJlYWN0XCI7ZnVuY3Rpb24gUyhuLHQpe2Zvcih2YXIgZSBpbiB0KW5bZV09dFtlXTtyZXR1cm4gbn1mdW5jdGlvbiBDKG4sdCl7Zm9yKHZhciBlIGluIG4paWYoXCJfX3NvdXJjZVwiIT09ZSYmIShlIGluIHQpKXJldHVybiEwO2Zvcih2YXIgciBpbiB0KWlmKFwiX19zb3VyY2VcIiE9PXImJm5bcl0hPT10W3JdKXJldHVybiEwO3JldHVybiExfWZ1bmN0aW9uIEUobil7dGhpcy5wcm9wcz1ufWZ1bmN0aW9uIGcobix0KXtmdW5jdGlvbiBlKG4pe3ZhciBlPXRoaXMucHJvcHMucmVmLHI9ZT09bi5yZWY7cmV0dXJuIXImJmUmJihlLmNhbGw/ZShudWxsKTplLmN1cnJlbnQ9bnVsbCksdD8hdCh0aGlzLnByb3BzLG4pfHwhcjpDKHRoaXMucHJvcHMsbil9ZnVuY3Rpb24gcih0KXtyZXR1cm4gdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGU9ZSxzKG4sdCl9cmV0dXJuIHIuZGlzcGxheU5hbWU9XCJNZW1vKFwiKyhuLmRpc3BsYXlOYW1lfHxuLm5hbWUpK1wiKVwiLHIucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9ITAsci5fX2Y9ITAscn0oRS5wcm90b3R5cGU9bmV3IGEpLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwLEUucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZT1mdW5jdGlvbihuLHQpe3JldHVybiBDKHRoaXMucHJvcHMsbil8fEModGhpcy5zdGF0ZSx0KX07dmFyIHc9aC5fX2I7aC5fX2I9ZnVuY3Rpb24obil7bi50eXBlJiZuLnR5cGUuX19mJiZuLnJlZiYmKG4ucHJvcHMucmVmPW4ucmVmLG4ucmVmPW51bGwpLHcmJncobil9O3ZhciB4PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3ImJlN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKXx8MzkxMTtmdW5jdGlvbiBSKG4pe2Z1bmN0aW9uIHQodCl7dmFyIGU9Uyh7fSx0KTtyZXR1cm4gZGVsZXRlIGUucmVmLG4oZSx0LnJlZnx8bnVsbCl9cmV0dXJuIHQuJCR0eXBlb2Y9eCx0LnJlbmRlcj10LHQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9dC5fX2Y9ITAsdC5kaXNwbGF5TmFtZT1cIkZvcndhcmRSZWYoXCIrKG4uZGlzcGxheU5hbWV8fG4ubmFtZSkrXCIpXCIsdH12YXIgTj1mdW5jdGlvbihuLHQpe3JldHVybiBudWxsPT1uP251bGw6dih2KG4pLm1hcCh0KSl9LGs9e21hcDpOLGZvckVhY2g6Tixjb3VudDpmdW5jdGlvbihuKXtyZXR1cm4gbj92KG4pLmxlbmd0aDowfSxvbmx5OmZ1bmN0aW9uKG4pe3ZhciB0PXYobik7aWYoMSE9PXQubGVuZ3RoKXRocm93XCJDaGlsZHJlbi5vbmx5XCI7cmV0dXJuIHRbMF19LHRvQXJyYXk6dn0sQT1oLl9fZTtoLl9fZT1mdW5jdGlvbihuLHQsZSxyKXtpZihuLnRoZW4pZm9yKHZhciB1LG89dDtvPW8uX187KWlmKCh1PW8uX19jKSYmdS5fX2MpcmV0dXJuIG51bGw9PXQuX19lJiYodC5fX2U9ZS5fX2UsdC5fX2s9ZS5fX2spLHUuX19jKG4sdCk7QShuLHQsZSxyKX07dmFyIE89aC51bm1vdW50O2Z1bmN0aW9uIFQoKXt0aGlzLl9fdT0wLHRoaXMudD1udWxsLHRoaXMuX19iPW51bGx9ZnVuY3Rpb24gTChuKXt2YXIgdD1uLl9fLl9fYztyZXR1cm4gdCYmdC5fX2EmJnQuX19hKG4pfWZ1bmN0aW9uIFUobil7dmFyIHQsZSxyO2Z1bmN0aW9uIHUodSl7aWYodHx8KHQ9bigpKS50aGVuKGZ1bmN0aW9uKG4pe2U9bi5kZWZhdWx0fHxufSxmdW5jdGlvbihuKXtyPW59KSxyKXRocm93IHI7aWYoIWUpdGhyb3cgdDtyZXR1cm4gcyhlLHUpfXJldHVybiB1LmRpc3BsYXlOYW1lPVwiTGF6eVwiLHUuX19mPSEwLHV9ZnVuY3Rpb24gRCgpe3RoaXMudT1udWxsLHRoaXMubz1udWxsfWgudW5tb3VudD1mdW5jdGlvbihuKXt2YXIgdD1uLl9fYzt0JiZ0Ll9fUiYmdC5fX1IoKSx0JiYhMD09PW4uX19oJiYobi50eXBlPW51bGwpLE8mJk8obil9LChULnByb3RvdHlwZT1uZXcgYSkuX19jPWZ1bmN0aW9uKG4sdCl7dmFyIGU9dC5fX2Mscj10aGlzO251bGw9PXIudCYmKHIudD1bXSksci50LnB1c2goZSk7dmFyIHU9TChyLl9fdiksbz0hMSxpPWZ1bmN0aW9uKCl7b3x8KG89ITAsZS5fX1I9bnVsbCx1P3UobCk6bCgpKX07ZS5fX1I9aTt2YXIgbD1mdW5jdGlvbigpe2lmKCEtLXIuX191KXtpZihyLnN0YXRlLl9fYSl7dmFyIG49ci5zdGF0ZS5fX2E7ci5fX3YuX19rWzBdPWZ1bmN0aW9uIG4odCxlLHIpe3JldHVybiB0JiYodC5fX3Y9bnVsbCx0Ll9faz10Ll9fayYmdC5fX2subWFwKGZ1bmN0aW9uKHQpe3JldHVybiBuKHQsZSxyKX0pLHQuX19jJiZ0Ll9fYy5fX1A9PT1lJiYodC5fX2UmJnIuaW5zZXJ0QmVmb3JlKHQuX19lLHQuX19kKSx0Ll9fYy5fX2U9ITAsdC5fX2MuX19QPXIpKSx0fShuLG4uX19jLl9fUCxuLl9fYy5fX08pfXZhciB0O2ZvcihyLnNldFN0YXRlKHtfX2E6ci5fX2I9bnVsbH0pO3Q9ci50LnBvcCgpOyl0LmZvcmNlVXBkYXRlKCl9fSxmPSEwPT09dC5fX2g7ci5fX3UrK3x8Znx8ci5zZXRTdGF0ZSh7X19hOnIuX19iPXIuX192Ll9fa1swXX0pLG4udGhlbihpLGkpfSxULnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudD1mdW5jdGlvbigpe3RoaXMudD1bXX0sVC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKG4sdCl7aWYodGhpcy5fX2Ipe2lmKHRoaXMuX192Ll9fayl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxyPXRoaXMuX192Ll9fa1swXS5fX2M7dGhpcy5fX3YuX19rWzBdPWZ1bmN0aW9uIG4odCxlLHIpe3JldHVybiB0JiYodC5fX2MmJnQuX19jLl9fSCYmKHQuX19jLl9fSC5fXy5mb3JFYWNoKGZ1bmN0aW9uKG4pe1wiZnVuY3Rpb25cIj09dHlwZW9mIG4uX19jJiZuLl9fYygpfSksdC5fX2MuX19IPW51bGwpLG51bGwhPSh0PVMoe30sdCkpLl9fYyYmKHQuX19jLl9fUD09PXImJih0Ll9fYy5fX1A9ZSksdC5fX2M9bnVsbCksdC5fX2s9dC5fX2smJnQuX19rLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gbih0LGUscil9KSksdH0odGhpcy5fX2IsZSxyLl9fTz1yLl9fUCl9dGhpcy5fX2I9bnVsbH12YXIgdT10Ll9fYSYmcyhkLG51bGwsbi5mYWxsYmFjayk7cmV0dXJuIHUmJih1Ll9faD1udWxsKSxbcyhkLG51bGwsdC5fX2E/bnVsbDpuLmNoaWxkcmVuKSx1XX07dmFyIEY9ZnVuY3Rpb24obix0LGUpe2lmKCsrZVsxXT09PWVbMF0mJm4uby5kZWxldGUodCksbi5wcm9wcy5yZXZlYWxPcmRlciYmKFwidFwiIT09bi5wcm9wcy5yZXZlYWxPcmRlclswXXx8IW4uby5zaXplKSlmb3IoZT1uLnU7ZTspe2Zvcig7ZS5sZW5ndGg+MzspZS5wb3AoKSgpO2lmKGVbMV08ZVswXSlicmVhaztuLnU9ZT1lWzJdfX07ZnVuY3Rpb24gSShuKXtyZXR1cm4gdGhpcy5nZXRDaGlsZENvbnRleHQ9ZnVuY3Rpb24oKXtyZXR1cm4gbi5jb250ZXh0fSxuLmNoaWxkcmVufWZ1bmN0aW9uIE0obil7dmFyIHQ9dGhpcyxlPW4uaTt0LmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uKCl7cChudWxsLHQubCksdC5sPW51bGwsdC5pPW51bGx9LHQuaSYmdC5pIT09ZSYmdC5jb21wb25lbnRXaWxsVW5tb3VudCgpLG4uX192Pyh0Lmx8fCh0Lmk9ZSx0Lmw9e25vZGVUeXBlOjEscGFyZW50Tm9kZTplLGNoaWxkTm9kZXM6W10sYXBwZW5kQ2hpbGQ6ZnVuY3Rpb24obil7dGhpcy5jaGlsZE5vZGVzLnB1c2gobiksdC5pLmFwcGVuZENoaWxkKG4pfSxpbnNlcnRCZWZvcmU6ZnVuY3Rpb24obixlKXt0aGlzLmNoaWxkTm9kZXMucHVzaChuKSx0LmkuYXBwZW5kQ2hpbGQobil9LHJlbW92ZUNoaWxkOmZ1bmN0aW9uKG4pe3RoaXMuY2hpbGROb2Rlcy5zcGxpY2UodGhpcy5jaGlsZE5vZGVzLmluZGV4T2Yobik+Pj4xLDEpLHQuaS5yZW1vdmVDaGlsZChuKX19KSxwKHMoSSx7Y29udGV4dDp0LmNvbnRleHR9LG4uX192KSx0LmwpKTp0LmwmJnQuY29tcG9uZW50V2lsbFVubW91bnQoKX1mdW5jdGlvbiBWKG4sdCl7dmFyIGU9cyhNLHtfX3Y6bixpOnR9KTtyZXR1cm4gZS5jb250YWluZXJJbmZvPXQsZX0oRC5wcm90b3R5cGU9bmV3IGEpLl9fYT1mdW5jdGlvbihuKXt2YXIgdD10aGlzLGU9TCh0Ll9fdikscj10Lm8uZ2V0KG4pO3JldHVybiByWzBdKyssZnVuY3Rpb24odSl7dmFyIG89ZnVuY3Rpb24oKXt0LnByb3BzLnJldmVhbE9yZGVyPyhyLnB1c2godSksRih0LG4scikpOnUoKX07ZT9lKG8pOm8oKX19LEQucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihuKXt0aGlzLnU9bnVsbCx0aGlzLm89bmV3IE1hcDt2YXIgdD12KG4uY2hpbGRyZW4pO24ucmV2ZWFsT3JkZXImJlwiYlwiPT09bi5yZXZlYWxPcmRlclswXSYmdC5yZXZlcnNlKCk7Zm9yKHZhciBlPXQubGVuZ3RoO2UtLTspdGhpcy5vLnNldCh0W2VdLHRoaXMudT1bMSwwLHRoaXMudV0pO3JldHVybiBuLmNoaWxkcmVufSxELnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGU9RC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQ9ZnVuY3Rpb24oKXt2YXIgbj10aGlzO3RoaXMuby5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7RihuLGUsdCl9KX07dmFyIFc9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvciYmU3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIil8fDYwMTAzLFA9L14oPzphY2NlbnR8YWxpZ25tZW50fGFyYWJpY3xiYXNlbGluZXxjYXB8Y2xpcCg/IVBhdGhVKXxjb2xvcnxkb21pbmFudHxmaWxsfGZsb29kfGZvbnR8Z2x5cGgoPyFSKXxob3JpenxtYXJrZXIoPyFIfFd8VSl8b3ZlcmxpbmV8cGFpbnR8c2hhcGV8c3RvcHxzdHJpa2V0aHJvdWdofHN0cm9rZXx0ZXh0KD8hTCl8dW5kZXJsaW5lfHVuaWNvZGV8dW5pdHN8dnx2ZWN0b3J8dmVydHx3b3JkfHdyaXRpbmd8eCg/IUMpKVtBLVpdLywkPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudCxqPWZ1bmN0aW9uKG4pe3JldHVybihcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sKCk/L2ZpbHxjaGV8cmFkL2k6L2ZpbHxjaGV8cmEvaSkudGVzdChuKX07ZnVuY3Rpb24geihuLHQsZSl7cmV0dXJuIG51bGw9PXQuX19rJiYodC50ZXh0Q29udGVudD1cIlwiKSxwKG4sdCksXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmZSgpLG4/bi5fX2M6bnVsbH1mdW5jdGlvbiBCKG4sdCxlKXtyZXR1cm4gbShuLHQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUoKSxuP24uX19jOm51bGx9YS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fSxbXCJjb21wb25lbnRXaWxsTW91bnRcIixcImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcIixcImNvbXBvbmVudFdpbGxVcGRhdGVcIl0uZm9yRWFjaChmdW5jdGlvbihuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoYS5wcm90b3R5cGUsbix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzW1wiVU5TQUZFX1wiK25dfSxzZXQ6ZnVuY3Rpb24odCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsbix7Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOnR9KX19KX0pO3ZhciBIPWguZXZlbnQ7ZnVuY3Rpb24gWigpe31mdW5jdGlvbiBZKCl7cmV0dXJuIHRoaXMuY2FuY2VsQnViYmxlfWZ1bmN0aW9uIHEoKXtyZXR1cm4gdGhpcy5kZWZhdWx0UHJldmVudGVkfWguZXZlbnQ9ZnVuY3Rpb24obil7cmV0dXJuIEgmJihuPUgobikpLG4ucGVyc2lzdD1aLG4uaXNQcm9wYWdhdGlvblN0b3BwZWQ9WSxuLmlzRGVmYXVsdFByZXZlbnRlZD1xLG4ubmF0aXZlRXZlbnQ9bn07dmFyIEcsSj17Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNsYXNzfX0sSz1oLnZub2RlO2gudm5vZGU9ZnVuY3Rpb24obil7dmFyIHQ9bi50eXBlLGU9bi5wcm9wcyxyPWU7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe3ZhciB1PS0xPT09dC5pbmRleE9mKFwiLVwiKTtmb3IodmFyIG8gaW4gcj17fSxlKXt2YXIgaT1lW29dOyQmJlwiY2hpbGRyZW5cIj09PW8mJlwibm9zY3JpcHRcIj09PXR8fFwidmFsdWVcIj09PW8mJlwiZGVmYXVsdFZhbHVlXCJpbiBlJiZudWxsPT1pfHwoXCJkZWZhdWx0VmFsdWVcIj09PW8mJlwidmFsdWVcImluIGUmJm51bGw9PWUudmFsdWU/bz1cInZhbHVlXCI6XCJkb3dubG9hZFwiPT09byYmITA9PT1pP2k9XCJcIjovb25kb3VibGVjbGljay9pLnRlc3Qobyk/bz1cIm9uZGJsY2xpY2tcIjovXm9uY2hhbmdlKHRleHRhcmVhfGlucHV0KS9pLnRlc3Qobyt0KSYmIWooZS50eXBlKT9vPVwib25pbnB1dFwiOi9eb25mb2N1cyQvaS50ZXN0KG8pP289XCJvbmZvY3VzaW5cIjovXm9uYmx1ciQvaS50ZXN0KG8pP289XCJvbmZvY3Vzb3V0XCI6L15vbihBbml8VHJhfFRvdXxCZWZvcmVJbnB8Q29tcG8pLy50ZXN0KG8pP289by50b0xvd2VyQ2FzZSgpOnUmJlAudGVzdChvKT9vPW8ucmVwbGFjZSgvW0EtWjAtOV0vLFwiLSQmXCIpLnRvTG93ZXJDYXNlKCk6bnVsbD09PWkmJihpPXZvaWQgMCksL15vbmlucHV0JC9pLnRlc3QobykmJihvPW8udG9Mb3dlckNhc2UoKSxyW29dJiYobz1cIm9uaW5wdXRDYXB0dXJlXCIpKSxyW29dPWkpfVwic2VsZWN0XCI9PXQmJnIubXVsdGlwbGUmJkFycmF5LmlzQXJyYXkoci52YWx1ZSkmJihyLnZhbHVlPXYoZS5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbihuKXtuLnByb3BzLnNlbGVjdGVkPS0xIT1yLnZhbHVlLmluZGV4T2Yobi5wcm9wcy52YWx1ZSl9KSksXCJzZWxlY3RcIj09dCYmbnVsbCE9ci5kZWZhdWx0VmFsdWUmJihyLnZhbHVlPXYoZS5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbihuKXtuLnByb3BzLnNlbGVjdGVkPXIubXVsdGlwbGU/LTEhPXIuZGVmYXVsdFZhbHVlLmluZGV4T2Yobi5wcm9wcy52YWx1ZSk6ci5kZWZhdWx0VmFsdWU9PW4ucHJvcHMudmFsdWV9KSksbi5wcm9wcz1yLGUuY2xhc3MhPWUuY2xhc3NOYW1lJiYoSi5lbnVtZXJhYmxlPVwiY2xhc3NOYW1lXCJpbiBlLG51bGwhPWUuY2xhc3NOYW1lJiYoci5jbGFzcz1lLmNsYXNzTmFtZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJjbGFzc05hbWVcIixKKSl9bi4kJHR5cGVvZj1XLEsmJksobil9O3ZhciBRPWguX19yO2guX19yPWZ1bmN0aW9uKG4pe1EmJlEobiksRz1uLl9fY307dmFyIFg9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6e2N1cnJlbnQ6e3JlYWRDb250ZXh0OmZ1bmN0aW9uKG4pe3JldHVybiBHLl9fbltuLl9fY10ucHJvcHMudmFsdWV9fX19LG5uPVwiMTcuMC4yXCI7ZnVuY3Rpb24gdG4obil7cmV0dXJuIHMuYmluZChudWxsLG4pfWZ1bmN0aW9uIGVuKG4pe3JldHVybiEhbiYmbi4kJHR5cGVvZj09PVd9ZnVuY3Rpb24gcm4obil7cmV0dXJuIGVuKG4pP3kuYXBwbHkobnVsbCxhcmd1bWVudHMpOm59ZnVuY3Rpb24gdW4obil7cmV0dXJuISFuLl9fayYmKHAobnVsbCxuKSwhMCl9ZnVuY3Rpb24gb24obil7cmV0dXJuIG4mJihuLmJhc2V8fDE9PT1uLm5vZGVUeXBlJiZuKXx8bnVsbH12YXIgbG49ZnVuY3Rpb24obix0KXtyZXR1cm4gbih0KX0sZm49ZnVuY3Rpb24obix0KXtyZXR1cm4gbih0KX0sY249ZDtmdW5jdGlvbiBhbihuKXtuKCl9ZnVuY3Rpb24gc24obil7cmV0dXJuIG59ZnVuY3Rpb24gaG4oKXtyZXR1cm5bITEsYW5dfXZhciB2bj1yO2Z1bmN0aW9uIGRuKHQscil7dmFyIHU9bihyKSxvPXVbMF0saT11WzFdO3JldHVybiBlKGZ1bmN0aW9uKCl7cmV0dXJuIHQoZnVuY3Rpb24oKXtpKHIoKSl9KX0sW3Qscl0pLG99ZXhwb3J0IGRlZmF1bHR7dXNlU3RhdGU6bix1c2VSZWR1Y2VyOnQsdXNlRWZmZWN0OmUsdXNlTGF5b3V0RWZmZWN0OnIsdXNlSW5zZXJ0aW9uRWZmZWN0OnIsdXNlVHJhbnNpdGlvbjpobix1c2VEZWZlcnJlZFZhbHVlOnNuLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmRuLHN0YXJ0VHJhbnNpdGlvbjphbix1c2VSZWY6dSx1c2VJbXBlcmF0aXZlSGFuZGxlOm8sdXNlTWVtbzppLHVzZUNhbGxiYWNrOmwsdXNlQ29udGV4dDpmLHVzZURlYnVnVmFsdWU6Yyx2ZXJzaW9uOlwiMTcuMC4yXCIsQ2hpbGRyZW46ayxyZW5kZXI6eixoeWRyYXRlOkIsdW5tb3VudENvbXBvbmVudEF0Tm9kZTp1bixjcmVhdGVQb3J0YWw6VixjcmVhdGVFbGVtZW50OnMsY3JlYXRlQ29udGV4dDpfLGNyZWF0ZUZhY3Rvcnk6dG4sY2xvbmVFbGVtZW50OnJuLGNyZWF0ZVJlZjpiLEZyYWdtZW50OmQsaXNWYWxpZEVsZW1lbnQ6ZW4sZmluZERPTU5vZGU6b24sQ29tcG9uZW50OmEsUHVyZUNvbXBvbmVudDpFLG1lbW86Zyxmb3J3YXJkUmVmOlIsZmx1c2hTeW5jOmZuLHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOmxuLFN0cmljdE1vZGU6ZCxTdXNwZW5zZTpULFN1c3BlbnNlTGlzdDpELGxhenk6VSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDpYfTtleHBvcnR7YW4gYXMgc3RhcnRUcmFuc2l0aW9uLHNuIGFzIHVzZURlZmVycmVkVmFsdWUsaG4gYXMgdXNlVHJhbnNpdGlvbix2biBhcyB1c2VJbnNlcnRpb25FZmZlY3QsZG4gYXMgdXNlU3luY0V4dGVybmFsU3RvcmUsbm4gYXMgdmVyc2lvbixrIGFzIENoaWxkcmVuLHogYXMgcmVuZGVyLEIgYXMgaHlkcmF0ZSx1biBhcyB1bm1vdW50Q29tcG9uZW50QXROb2RlLFYgYXMgY3JlYXRlUG9ydGFsLHRuIGFzIGNyZWF0ZUZhY3Rvcnkscm4gYXMgY2xvbmVFbGVtZW50LGVuIGFzIGlzVmFsaWRFbGVtZW50LG9uIGFzIGZpbmRET01Ob2RlLEUgYXMgUHVyZUNvbXBvbmVudCxnIGFzIG1lbW8sUiBhcyBmb3J3YXJkUmVmLGZuIGFzIGZsdXNoU3luYyxsbiBhcyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyxjbiBhcyBTdHJpY3RNb2RlLFQgYXMgU3VzcGVuc2UsRCBhcyBTdXNwZW5zZUxpc3QsVSBhcyBsYXp5LFggYXMgX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcGF0Lm1vZHVsZS5qcy5tYXBcbiIsIi8qKlxuICogQXNzaWduIHByb3BlcnRpZXMgZnJvbSBgcHJvcHNgIHRvIGBvYmpgXG4gKiBAdGVtcGxhdGUgTywgUCBUaGUgb2JqIGFuZCBwcm9wcyB0eXBlc1xuICogQHBhcmFtIHtPfSBvYmogVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG9cbiAqIEBwYXJhbSB7UH0gcHJvcHMgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHJldHVybnMge08gJiBQfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduKG9iaiwgcHJvcHMpIHtcblx0Zm9yIChsZXQgaSBpbiBwcm9wcykgb2JqW2ldID0gcHJvcHNbaV07XG5cdHJldHVybiAvKiogQHR5cGUge08gJiBQfSAqLyAob2JqKTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0d28gb2JqZWN0cyBoYXZlIGEgZGlmZmVyZW50IHNoYXBlXG4gKiBAcGFyYW0ge29iamVjdH0gYVxuICogQHBhcmFtIHtvYmplY3R9IGJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hhbGxvd0RpZmZlcnMoYSwgYikge1xuXHRmb3IgKGxldCBpIGluIGEpIGlmIChpICE9PSAnX19zb3VyY2UnICYmICEoaSBpbiBiKSkgcmV0dXJuIHRydWU7XG5cdGZvciAobGV0IGkgaW4gYikgaWYgKGkgIT09ICdfX3NvdXJjZScgJiYgYVtpXSAhPT0gYltpXSkgcmV0dXJuIHRydWU7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZU5vZGUobm9kZSkge1xuXHRsZXQgcGFyZW50Tm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcblx0aWYgKHBhcmVudE5vZGUpIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdwcmVhY3QnO1xuaW1wb3J0IHsgc2hhbGxvd0RpZmZlcnMgfSBmcm9tICcuL3V0aWwnO1xuXG4vKipcbiAqIENvbXBvbmVudCBjbGFzcyB3aXRoIGEgcHJlZGVmaW5lZCBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCBpbXBsZW1lbnRhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gUHVyZUNvbXBvbmVudChwKSB7XG5cdHRoaXMucHJvcHMgPSBwO1xufVxuUHVyZUNvbXBvbmVudC5wcm90b3R5cGUgPSBuZXcgQ29tcG9uZW50KCk7XG4vLyBTb21lIHRoaXJkLXBhcnR5IGxpYnJhcmllcyBjaGVjayBpZiB0aGlzIHByb3BlcnR5IGlzIHByZXNlbnRcblB1cmVDb21wb25lbnQucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50ID0gdHJ1ZTtcblB1cmVDb21wb25lbnQucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uKHByb3BzLCBzdGF0ZSkge1xuXHRyZXR1cm4gc2hhbGxvd0RpZmZlcnModGhpcy5wcm9wcywgcHJvcHMpIHx8IHNoYWxsb3dEaWZmZXJzKHRoaXMuc3RhdGUsIHN0YXRlKTtcbn07XG4iLCJpbXBvcnQgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSAncHJlYWN0JztcbmltcG9ydCB7IHNoYWxsb3dEaWZmZXJzIH0gZnJvbSAnLi91dGlsJztcblxuLyoqXG4gKiBNZW1vaXplIGEgY29tcG9uZW50LCBzbyB0aGF0IGl0IG9ubHkgdXBkYXRlcyB3aGVuIHRoZSBwcm9wcyBhY3R1YWxseSBoYXZlXG4gKiBjaGFuZ2VkLiBUaGlzIHdhcyBwcmV2aW91c2x5IGtub3duIGFzIGBSZWFjdC5wdXJlYC5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuRnVuY3Rpb25Db21wb25lbnR9IGMgZnVuY3Rpb25hbCBjb21wb25lbnRcbiAqIEBwYXJhbSB7KHByZXY6IG9iamVjdCwgbmV4dDogb2JqZWN0KSA9PiBib29sZWFufSBbY29tcGFyZXJdIEN1c3RvbSBlcXVhbGl0eSBmdW5jdGlvblxuICogQHJldHVybnMge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkZ1bmN0aW9uQ29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVtbyhjLCBjb21wYXJlcikge1xuXHRmdW5jdGlvbiBzaG91bGRVcGRhdGUobmV4dFByb3BzKSB7XG5cdFx0bGV0IHJlZiA9IHRoaXMucHJvcHMucmVmO1xuXHRcdGxldCB1cGRhdGVSZWYgPSByZWYgPT0gbmV4dFByb3BzLnJlZjtcblx0XHRpZiAoIXVwZGF0ZVJlZiAmJiByZWYpIHtcblx0XHRcdHJlZi5jYWxsID8gcmVmKG51bGwpIDogKHJlZi5jdXJyZW50ID0gbnVsbCk7XG5cdFx0fVxuXG5cdFx0aWYgKCFjb21wYXJlcikge1xuXHRcdFx0cmV0dXJuIHNoYWxsb3dEaWZmZXJzKHRoaXMucHJvcHMsIG5leHRQcm9wcyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICFjb21wYXJlcih0aGlzLnByb3BzLCBuZXh0UHJvcHMpIHx8ICF1cGRhdGVSZWY7XG5cdH1cblxuXHRmdW5jdGlvbiBNZW1vZWQocHJvcHMpIHtcblx0XHR0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHNob3VsZFVwZGF0ZTtcblx0XHRyZXR1cm4gY3JlYXRlRWxlbWVudChjLCBwcm9wcyk7XG5cdH1cblx0TWVtb2VkLmRpc3BsYXlOYW1lID0gJ01lbW8oJyArIChjLmRpc3BsYXlOYW1lIHx8IGMubmFtZSkgKyAnKSc7XG5cdE1lbW9lZC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHRydWU7XG5cdE1lbW9lZC5fZm9yd2FyZGVkID0gdHJ1ZTtcblx0cmV0dXJuIE1lbW9lZDtcbn1cbiIsImltcG9ydCB7IG9wdGlvbnMgfSBmcm9tICdwcmVhY3QnO1xuaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnLi91dGlsJztcblxubGV0IG9sZERpZmZIb29rID0gb3B0aW9ucy5fZGlmZjtcbm9wdGlvbnMuX2RpZmYgPSB2bm9kZSA9PiB7XG5cdGlmICh2bm9kZS50eXBlICYmIHZub2RlLnR5cGUuX2ZvcndhcmRlZCAmJiB2bm9kZS5yZWYpIHtcblx0XHR2bm9kZS5wcm9wcy5yZWYgPSB2bm9kZS5yZWY7XG5cdFx0dm5vZGUucmVmID0gbnVsbDtcblx0fVxuXHRpZiAob2xkRGlmZkhvb2spIG9sZERpZmZIb29rKHZub2RlKTtcbn07XG5cbmV4cG9ydCBjb25zdCBSRUFDVF9GT1JXQVJEX1NZTUJPTCA9XG5cdCh0eXBlb2YgU3ltYm9sICE9ICd1bmRlZmluZWQnICYmXG5cdFx0U3ltYm9sLmZvciAmJlxuXHRcdFN5bWJvbC5mb3IoJ3JlYWN0LmZvcndhcmRfcmVmJykpIHx8XG5cdDB4ZjQ3O1xuXG4vKipcbiAqIFBhc3MgcmVmIGRvd24gdG8gYSBjaGlsZC4gVGhpcyBpcyBtYWlubHkgdXNlZCBpbiBsaWJyYXJpZXMgd2l0aCBIT0NzIHRoYXRcbiAqIHdyYXAgY29tcG9uZW50cy4gVXNpbmcgYGZvcndhcmRSZWZgIHRoZXJlIGlzIGFuIGVhc3kgd2F5IHRvIGdldCBhIHJlZmVyZW5jZVxuICogb2YgdGhlIHdyYXBwZWQgY29tcG9uZW50IGluc3RlYWQgb2Ygb25lIG9mIHRoZSB3cmFwcGVyIGl0c2VsZi5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2luZGV4JykuRm9yd2FyZEZufSBmblxuICogQHJldHVybnMge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkZ1bmN0aW9uQ29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZFJlZihmbikge1xuXHRmdW5jdGlvbiBGb3J3YXJkZWQocHJvcHMpIHtcblx0XHRsZXQgY2xvbmUgPSBhc3NpZ24oe30sIHByb3BzKTtcblx0XHRkZWxldGUgY2xvbmUucmVmO1xuXHRcdHJldHVybiBmbihjbG9uZSwgcHJvcHMucmVmIHx8IG51bGwpO1xuXHR9XG5cblx0Ly8gbW9ieC1yZWFjdCBjaGVja3MgZm9yIHRoaXMgYmVpbmcgcHJlc2VudFxuXHRGb3J3YXJkZWQuJCR0eXBlb2YgPSBSRUFDVF9GT1JXQVJEX1NZTUJPTDtcblx0Ly8gbW9ieC1yZWFjdCBoZWF2aWx5IHJlbGllcyBvbiBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzLlxuXHQvLyBJdCBleHBlY3RzIGFuIG9iamVjdCBoZXJlIHdpdGggYSBgcmVuZGVyYCBwcm9wZXJ0eSxcblx0Ly8gYW5kIHByb3RvdHlwZS5yZW5kZXIgd2lsbCBmYWlsLiBXaXRob3V0IHRoaXNcblx0Ly8gbW9ieC1yZWFjdCB0aHJvd3MuXG5cdEZvcndhcmRlZC5yZW5kZXIgPSBGb3J3YXJkZWQ7XG5cblx0Rm9yd2FyZGVkLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50ID0gRm9yd2FyZGVkLl9mb3J3YXJkZWQgPSB0cnVlO1xuXHRGb3J3YXJkZWQuZGlzcGxheU5hbWUgPSAnRm9yd2FyZFJlZignICsgKGZuLmRpc3BsYXlOYW1lIHx8IGZuLm5hbWUpICsgJyknO1xuXHRyZXR1cm4gRm9yd2FyZGVkO1xufVxuIiwiaW1wb3J0IHsgdG9DaGlsZEFycmF5IH0gZnJvbSAncHJlYWN0JztcblxuY29uc3QgbWFwRm4gPSAoY2hpbGRyZW4sIGZuKSA9PiB7XG5cdGlmIChjaGlsZHJlbiA9PSBudWxsKSByZXR1cm4gbnVsbDtcblx0cmV0dXJuIHRvQ2hpbGRBcnJheSh0b0NoaWxkQXJyYXkoY2hpbGRyZW4pLm1hcChmbikpO1xufTtcblxuLy8gVGhpcyBBUEkgaXMgY29tcGxldGVseSB1bm5lY2Vzc2FyeSBmb3IgUHJlYWN0LCBzbyBpdCdzIGJhc2ljYWxseSBwYXNzdGhyb3VnaC5cbmV4cG9ydCBjb25zdCBDaGlsZHJlbiA9IHtcblx0bWFwOiBtYXBGbixcblx0Zm9yRWFjaDogbWFwRm4sXG5cdGNvdW50KGNoaWxkcmVuKSB7XG5cdFx0cmV0dXJuIGNoaWxkcmVuID8gdG9DaGlsZEFycmF5KGNoaWxkcmVuKS5sZW5ndGggOiAwO1xuXHR9LFxuXHRvbmx5KGNoaWxkcmVuKSB7XG5cdFx0Y29uc3Qgbm9ybWFsaXplZCA9IHRvQ2hpbGRBcnJheShjaGlsZHJlbik7XG5cdFx0aWYgKG5vcm1hbGl6ZWQubGVuZ3RoICE9PSAxKSB0aHJvdyAnQ2hpbGRyZW4ub25seSc7XG5cdFx0cmV0dXJuIG5vcm1hbGl6ZWRbMF07XG5cdH0sXG5cdHRvQXJyYXk6IHRvQ2hpbGRBcnJheVxufTtcbiIsImltcG9ydCB7IENvbXBvbmVudCwgY3JlYXRlRWxlbWVudCwgb3B0aW9ucywgRnJhZ21lbnQgfSBmcm9tICdwcmVhY3QnO1xuaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnLi91dGlsJztcblxuY29uc3Qgb2xkQ2F0Y2hFcnJvciA9IG9wdGlvbnMuX2NhdGNoRXJyb3I7XG5vcHRpb25zLl9jYXRjaEVycm9yID0gZnVuY3Rpb24oZXJyb3IsIG5ld1ZOb2RlLCBvbGRWTm9kZSwgZXJyb3JJbmZvKSB7XG5cdGlmIChlcnJvci50aGVuKSB7XG5cdFx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnR9ICovXG5cdFx0bGV0IGNvbXBvbmVudDtcblx0XHRsZXQgdm5vZGUgPSBuZXdWTm9kZTtcblxuXHRcdGZvciAoOyAodm5vZGUgPSB2bm9kZS5fcGFyZW50KTsgKSB7XG5cdFx0XHRpZiAoKGNvbXBvbmVudCA9IHZub2RlLl9jb21wb25lbnQpICYmIGNvbXBvbmVudC5fY2hpbGREaWRTdXNwZW5kKSB7XG5cdFx0XHRcdGlmIChuZXdWTm9kZS5fZG9tID09IG51bGwpIHtcblx0XHRcdFx0XHRuZXdWTm9kZS5fZG9tID0gb2xkVk5vZGUuX2RvbTtcblx0XHRcdFx0XHRuZXdWTm9kZS5fY2hpbGRyZW4gPSBvbGRWTm9kZS5fY2hpbGRyZW47XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gRG9uJ3QgY2FsbCBvbGRDYXRjaEVycm9yIGlmIHdlIGZvdW5kIGEgU3VzcGVuc2Vcblx0XHRcdFx0cmV0dXJuIGNvbXBvbmVudC5fY2hpbGREaWRTdXNwZW5kKGVycm9yLCBuZXdWTm9kZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdG9sZENhdGNoRXJyb3IoZXJyb3IsIG5ld1ZOb2RlLCBvbGRWTm9kZSwgZXJyb3JJbmZvKTtcbn07XG5cbmNvbnN0IG9sZFVubW91bnQgPSBvcHRpb25zLnVubW91bnQ7XG5vcHRpb25zLnVubW91bnQgPSBmdW5jdGlvbih2bm9kZSkge1xuXHQvKiogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkNvbXBvbmVudH0gKi9cblx0Y29uc3QgY29tcG9uZW50ID0gdm5vZGUuX2NvbXBvbmVudDtcblx0aWYgKGNvbXBvbmVudCAmJiBjb21wb25lbnQuX29uUmVzb2x2ZSkge1xuXHRcdGNvbXBvbmVudC5fb25SZXNvbHZlKCk7XG5cdH1cblxuXHQvLyBpZiB0aGUgY29tcG9uZW50IGlzIHN0aWxsIGh5ZHJhdGluZ1xuXHQvLyBtb3N0IGxpa2VseSBpdCBpcyBiZWNhdXNlIHRoZSBjb21wb25lbnQgaXMgc3VzcGVuZGVkXG5cdC8vIHdlIHNldCB0aGUgdm5vZGUudHlwZSBhcyBgbnVsbGAgc28gdGhhdCBpdCBpcyBub3QgYSB0eXBlb2YgZnVuY3Rpb25cblx0Ly8gc28gdGhlIHVubW91bnQgd2lsbCByZW1vdmUgdGhlIHZub2RlLl9kb21cblx0aWYgKGNvbXBvbmVudCAmJiB2bm9kZS5faHlkcmF0aW5nID09PSB0cnVlKSB7XG5cdFx0dm5vZGUudHlwZSA9IG51bGw7XG5cdH1cblxuXHRpZiAob2xkVW5tb3VudCkgb2xkVW5tb3VudCh2bm9kZSk7XG59O1xuXG5mdW5jdGlvbiBkZXRhY2hlZENsb25lKHZub2RlLCBkZXRhY2hlZFBhcmVudCwgcGFyZW50RG9tKSB7XG5cdGlmICh2bm9kZSkge1xuXHRcdGlmICh2bm9kZS5fY29tcG9uZW50ICYmIHZub2RlLl9jb21wb25lbnQuX19ob29rcykge1xuXHRcdFx0dm5vZGUuX2NvbXBvbmVudC5fX2hvb2tzLl9saXN0LmZvckVhY2goZWZmZWN0ID0+IHtcblx0XHRcdFx0aWYgKHR5cGVvZiBlZmZlY3QuX2NsZWFudXAgPT0gJ2Z1bmN0aW9uJykgZWZmZWN0Ll9jbGVhbnVwKCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0dm5vZGUuX2NvbXBvbmVudC5fX2hvb2tzID0gbnVsbDtcblx0XHR9XG5cblx0XHR2bm9kZSA9IGFzc2lnbih7fSwgdm5vZGUpO1xuXHRcdGlmICh2bm9kZS5fY29tcG9uZW50ICE9IG51bGwpIHtcblx0XHRcdGlmICh2bm9kZS5fY29tcG9uZW50Ll9wYXJlbnREb20gPT09IHBhcmVudERvbSkge1xuXHRcdFx0XHR2bm9kZS5fY29tcG9uZW50Ll9wYXJlbnREb20gPSBkZXRhY2hlZFBhcmVudDtcblx0XHRcdH1cblx0XHRcdHZub2RlLl9jb21wb25lbnQgPSBudWxsO1xuXHRcdH1cblxuXHRcdHZub2RlLl9jaGlsZHJlbiA9XG5cdFx0XHR2bm9kZS5fY2hpbGRyZW4gJiZcblx0XHRcdHZub2RlLl9jaGlsZHJlbi5tYXAoY2hpbGQgPT5cblx0XHRcdFx0ZGV0YWNoZWRDbG9uZShjaGlsZCwgZGV0YWNoZWRQYXJlbnQsIHBhcmVudERvbSlcblx0XHRcdCk7XG5cdH1cblxuXHRyZXR1cm4gdm5vZGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU9yaWdpbmFsKHZub2RlLCBkZXRhY2hlZFBhcmVudCwgb3JpZ2luYWxQYXJlbnQpIHtcblx0aWYgKHZub2RlKSB7XG5cdFx0dm5vZGUuX29yaWdpbmFsID0gbnVsbDtcblx0XHR2bm9kZS5fY2hpbGRyZW4gPVxuXHRcdFx0dm5vZGUuX2NoaWxkcmVuICYmXG5cdFx0XHR2bm9kZS5fY2hpbGRyZW4ubWFwKGNoaWxkID0+XG5cdFx0XHRcdHJlbW92ZU9yaWdpbmFsKGNoaWxkLCBkZXRhY2hlZFBhcmVudCwgb3JpZ2luYWxQYXJlbnQpXG5cdFx0XHQpO1xuXG5cdFx0aWYgKHZub2RlLl9jb21wb25lbnQpIHtcblx0XHRcdGlmICh2bm9kZS5fY29tcG9uZW50Ll9wYXJlbnREb20gPT09IGRldGFjaGVkUGFyZW50KSB7XG5cdFx0XHRcdGlmICh2bm9kZS5fZG9tKSB7XG5cdFx0XHRcdFx0b3JpZ2luYWxQYXJlbnQuaW5zZXJ0QmVmb3JlKHZub2RlLl9kb20sIHZub2RlLl9uZXh0RG9tKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2bm9kZS5fY29tcG9uZW50Ll9mb3JjZSA9IHRydWU7XG5cdFx0XHRcdHZub2RlLl9jb21wb25lbnQuX3BhcmVudERvbSA9IG9yaWdpbmFsUGFyZW50O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2bm9kZTtcbn1cblxuLy8gaGF2aW5nIGN1c3RvbSBpbmhlcml0YW5jZSBpbnN0ZWFkIG9mIGEgY2xhc3MgaGVyZSBzYXZlcyBhIGxvdCBvZiBieXRlc1xuZXhwb3J0IGZ1bmN0aW9uIFN1c3BlbnNlKCkge1xuXHQvLyB3ZSBkbyBub3QgY2FsbCBzdXBlciBoZXJlIHRvIGdvbGYgc29tZSBieXRlcy4uLlxuXHR0aGlzLl9wZW5kaW5nU3VzcGVuc2lvbkNvdW50ID0gMDtcblx0dGhpcy5fc3VzcGVuZGVycyA9IG51bGw7XG5cdHRoaXMuX2RldGFjaE9uTmV4dFJlbmRlciA9IG51bGw7XG59XG5cbi8vIFRoaW5ncyB3ZSBkbyBoZXJlIHRvIHNhdmUgc29tZSBieXRlcyBidXQgYXJlIG5vdCBwcm9wZXIgSlMgaW5oZXJpdGFuY2U6XG4vLyAtIGNhbGwgYG5ldyBDb21wb25lbnQoKWAgYXMgdGhlIHByb3RvdHlwZVxuLy8gLSBkbyBub3Qgc2V0IGBTdXNwZW5zZS5wcm90b3R5cGUuY29uc3RydWN0b3JgIHRvIGBTdXNwZW5zZWBcblN1c3BlbnNlLnByb3RvdHlwZSA9IG5ldyBDb21wb25lbnQoKTtcblxuLyoqXG4gKiBAdGhpcyB7aW1wb3J0KCcuL2ludGVybmFsJykuU3VzcGVuc2VDb21wb25lbnR9XG4gKiBAcGFyYW0ge1Byb21pc2V9IHByb21pc2UgVGhlIHRocm93biBwcm9taXNlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlPGFueSwgYW55Pn0gc3VzcGVuZGluZ1ZOb2RlIFRoZSBzdXNwZW5kaW5nIGNvbXBvbmVudFxuICovXG5TdXNwZW5zZS5wcm90b3R5cGUuX2NoaWxkRGlkU3VzcGVuZCA9IGZ1bmN0aW9uKHByb21pc2UsIHN1c3BlbmRpbmdWTm9kZSkge1xuXHRjb25zdCBzdXNwZW5kaW5nQ29tcG9uZW50ID0gc3VzcGVuZGluZ1ZOb2RlLl9jb21wb25lbnQ7XG5cblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5TdXNwZW5zZUNvbXBvbmVudH0gKi9cblx0Y29uc3QgYyA9IHRoaXM7XG5cblx0aWYgKGMuX3N1c3BlbmRlcnMgPT0gbnVsbCkge1xuXHRcdGMuX3N1c3BlbmRlcnMgPSBbXTtcblx0fVxuXHRjLl9zdXNwZW5kZXJzLnB1c2goc3VzcGVuZGluZ0NvbXBvbmVudCk7XG5cblx0Y29uc3QgcmVzb2x2ZSA9IHN1c3BlbmRlZChjLl92bm9kZSk7XG5cblx0bGV0IHJlc29sdmVkID0gZmFsc2U7XG5cdGNvbnN0IG9uUmVzb2x2ZWQgPSAoKSA9PiB7XG5cdFx0aWYgKHJlc29sdmVkKSByZXR1cm47XG5cblx0XHRyZXNvbHZlZCA9IHRydWU7XG5cdFx0c3VzcGVuZGluZ0NvbXBvbmVudC5fb25SZXNvbHZlID0gbnVsbDtcblxuXHRcdGlmIChyZXNvbHZlKSB7XG5cdFx0XHRyZXNvbHZlKG9uU3VzcGVuc2lvbkNvbXBsZXRlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b25TdXNwZW5zaW9uQ29tcGxldGUoKTtcblx0XHR9XG5cdH07XG5cblx0c3VzcGVuZGluZ0NvbXBvbmVudC5fb25SZXNvbHZlID0gb25SZXNvbHZlZDtcblxuXHRjb25zdCBvblN1c3BlbnNpb25Db21wbGV0ZSA9ICgpID0+IHtcblx0XHRpZiAoIS0tYy5fcGVuZGluZ1N1c3BlbnNpb25Db3VudCkge1xuXHRcdFx0Ly8gSWYgdGhlIHN1c3BlbnNpb24gd2FzIGR1cmluZyBoeWRyYXRpb24gd2UgZG9uJ3QgbmVlZCB0byByZXN0b3JlIHRoZVxuXHRcdFx0Ly8gc3VzcGVuZGVkIGNoaWxkcmVuIGludG8gdGhlIF9jaGlsZHJlbiBhcnJheVxuXHRcdFx0aWYgKGMuc3RhdGUuX3N1c3BlbmRlZCkge1xuXHRcdFx0XHRjb25zdCBzdXNwZW5kZWRWTm9kZSA9IGMuc3RhdGUuX3N1c3BlbmRlZDtcblx0XHRcdFx0Yy5fdm5vZGUuX2NoaWxkcmVuWzBdID0gcmVtb3ZlT3JpZ2luYWwoXG5cdFx0XHRcdFx0c3VzcGVuZGVkVk5vZGUsXG5cdFx0XHRcdFx0c3VzcGVuZGVkVk5vZGUuX2NvbXBvbmVudC5fcGFyZW50RG9tLFxuXHRcdFx0XHRcdHN1c3BlbmRlZFZOb2RlLl9jb21wb25lbnQuX29yaWdpbmFsUGFyZW50RG9tXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdGMuc2V0U3RhdGUoeyBfc3VzcGVuZGVkOiAoYy5fZGV0YWNoT25OZXh0UmVuZGVyID0gbnVsbCkgfSk7XG5cblx0XHRcdGxldCBzdXNwZW5kZWQ7XG5cdFx0XHR3aGlsZSAoKHN1c3BlbmRlZCA9IGMuX3N1c3BlbmRlcnMucG9wKCkpKSB7XG5cdFx0XHRcdHN1c3BlbmRlZC5mb3JjZVVwZGF0ZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogV2UgZG8gbm90IHNldCBgc3VzcGVuZGVkOiB0cnVlYCBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2Ugd2Ugd2FudCB0aGUgYWN0dWFsIG1hcmt1cFxuXHQgKiB0byByZW1haW4gb24gc2NyZWVuIGFuZCBoeWRyYXRlIGl0IHdoZW4gdGhlIHN1c3BlbnNlIGFjdHVhbGx5IGdldHMgcmVzb2x2ZWQuXG5cdCAqIFdoaWxlIGluIG5vbi1oeWRyYXRpb24gY2FzZXMgdGhlIHVzdWFsIGZhbGxiYWNrIC0+IGNvbXBvbmVudCBmbG93IHdvdWxkIG9jY291ci5cblx0ICovXG5cdGNvbnN0IHdhc0h5ZHJhdGluZyA9IHN1c3BlbmRpbmdWTm9kZS5faHlkcmF0aW5nID09PSB0cnVlO1xuXHRpZiAoIWMuX3BlbmRpbmdTdXNwZW5zaW9uQ291bnQrKyAmJiAhd2FzSHlkcmF0aW5nKSB7XG5cdFx0Yy5zZXRTdGF0ZSh7IF9zdXNwZW5kZWQ6IChjLl9kZXRhY2hPbk5leHRSZW5kZXIgPSBjLl92bm9kZS5fY2hpbGRyZW5bMF0pIH0pO1xuXHR9XG5cdHByb21pc2UudGhlbihvblJlc29sdmVkLCBvblJlc29sdmVkKTtcbn07XG5cblN1c3BlbnNlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uKCkge1xuXHR0aGlzLl9zdXNwZW5kZXJzID0gW107XG59O1xuXG4vKipcbiAqIEB0aGlzIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5TdXNwZW5zZUNvbXBvbmVudH1cbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuU3VzcGVuc2VDb21wb25lbnRbXCJwcm9wc1wiXX0gcHJvcHNcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuU3VzcGVuc2VTdGF0ZX0gc3RhdGVcbiAqL1xuU3VzcGVuc2UucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKHByb3BzLCBzdGF0ZSkge1xuXHRpZiAodGhpcy5fZGV0YWNoT25OZXh0UmVuZGVyKSB7XG5cdFx0Ly8gV2hlbiB0aGUgU3VzcGVuc2UncyBfdm5vZGUgd2FzIGNyZWF0ZWQgYnkgYSBjYWxsIHRvIGNyZWF0ZVZOb2RlXG5cdFx0Ly8gKGkuZS4gZHVlIHRvIGEgc2V0U3RhdGUgZnVydGhlciB1cCBpbiB0aGUgdHJlZSlcblx0XHQvLyBpdCdzIF9jaGlsZHJlbiBwcm9wIGlzIG51bGwsIGluIHRoaXMgY2FzZSB3ZSBcImZvcmdldFwiIGFib3V0IHRoZSBwYXJrZWQgdm5vZGVzIHRvIGRldGFjaFxuXHRcdGlmICh0aGlzLl92bm9kZS5fY2hpbGRyZW4pIHtcblx0XHRcdGNvbnN0IGRldGFjaGVkUGFyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0XHRjb25zdCBkZXRhY2hlZENvbXBvbmVudCA9IHRoaXMuX3Zub2RlLl9jaGlsZHJlblswXS5fY29tcG9uZW50O1xuXHRcdFx0dGhpcy5fdm5vZGUuX2NoaWxkcmVuWzBdID0gZGV0YWNoZWRDbG9uZShcblx0XHRcdFx0dGhpcy5fZGV0YWNoT25OZXh0UmVuZGVyLFxuXHRcdFx0XHRkZXRhY2hlZFBhcmVudCxcblx0XHRcdFx0KGRldGFjaGVkQ29tcG9uZW50Ll9vcmlnaW5hbFBhcmVudERvbSA9IGRldGFjaGVkQ29tcG9uZW50Ll9wYXJlbnREb20pXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdHRoaXMuX2RldGFjaE9uTmV4dFJlbmRlciA9IG51bGw7XG5cdH1cblxuXHQvLyBXcmFwIGZhbGxiYWNrIHRyZWUgaW4gYSBWTm9kZSB0aGF0IHByZXZlbnRzIGl0c2VsZiBmcm9tIGJlaW5nIG1hcmtlZCBhcyBhYm9ydGluZyBtaWQtaHlkcmF0aW9uOlxuXHQvKiogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlfSAqL1xuXHRjb25zdCBmYWxsYmFjayA9XG5cdFx0c3RhdGUuX3N1c3BlbmRlZCAmJiBjcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCBwcm9wcy5mYWxsYmFjayk7XG5cdGlmIChmYWxsYmFjaykgZmFsbGJhY2suX2h5ZHJhdGluZyA9IG51bGw7XG5cblx0cmV0dXJuIFtcblx0XHRjcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCBzdGF0ZS5fc3VzcGVuZGVkID8gbnVsbCA6IHByb3BzLmNoaWxkcmVuKSxcblx0XHRmYWxsYmFja1xuXHRdO1xufTtcblxuLyoqXG4gKiBDaGVja3MgYW5kIGNhbGxzIHRoZSBwYXJlbnQgY29tcG9uZW50J3MgX3N1c3BlbmRlZCBtZXRob2QsIHBhc3NpbmcgaW4gdGhlXG4gKiBzdXNwZW5kZWQgdm5vZGUuIFRoaXMgaXMgYSB3YXkgZm9yIGEgcGFyZW50IChlLmcuIFN1c3BlbnNlTGlzdCkgdG8gZ2V0IG5vdGlmaWVkXG4gKiB0aGF0IG9uZSBvZiBpdHMgY2hpbGRyZW4vZGVzY2VuZGFudHMgc3VzcGVuZGVkLlxuICpcbiAqIFRoZSBwYXJlbnQgTUFZIHJldHVybiBhIGNhbGxiYWNrLiBUaGUgY2FsbGJhY2sgd2lsbCBnZXQgY2FsbGVkIHdoZW4gdGhlXG4gKiBzdXNwZW5zaW9uIHJlc29sdmVzLCBub3RpZnlpbmcgdGhlIHBhcmVudCBvZiB0aGUgZmFjdC5cbiAqIE1vcmVvdmVyLCB0aGUgY2FsbGJhY2sgZ2V0cyBmdW5jdGlvbiBgdW5zdXNwZW5kYCBhcyBhIHBhcmFtZXRlci4gVGhlIHJlc29sdmVkXG4gKiBjaGlsZCBkZXNjZW5kYW50IHdpbGwgbm90IGFjdHVhbGx5IGdldCB1bnN1c3BlbmRlZCB1bnRpbCBgdW5zdXNwZW5kYCBnZXRzIGNhbGxlZC5cbiAqIFRoaXMgaXMgYSB3YXkgZm9yIHRoZSBwYXJlbnQgdG8gZGVsYXkgdW5zdXNwZW5kaW5nLlxuICpcbiAqIElmIHRoZSBwYXJlbnQgZG9lcyBub3QgcmV0dXJuIGEgY2FsbGJhY2sgdGhlbiB0aGUgcmVzb2x2ZWQgdm5vZGVcbiAqIGdldHMgdW5zdXNwZW5kZWQgaW1tZWRpYXRlbHkgd2hlbiBpdCByZXNvbHZlcy5cbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZVxuICogQHJldHVybnMgeygodW5zdXNwZW5kOiAoKSA9PiB2b2lkKSA9PiB2b2lkKT99XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdXNwZW5kZWQodm5vZGUpIHtcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnR9ICovXG5cdGxldCBjb21wb25lbnQgPSB2bm9kZS5fcGFyZW50Ll9jb21wb25lbnQ7XG5cdHJldHVybiBjb21wb25lbnQgJiYgY29tcG9uZW50Ll9zdXNwZW5kZWQgJiYgY29tcG9uZW50Ll9zdXNwZW5kZWQodm5vZGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGF6eShsb2FkZXIpIHtcblx0bGV0IHByb207XG5cdGxldCBjb21wb25lbnQ7XG5cdGxldCBlcnJvcjtcblxuXHRmdW5jdGlvbiBMYXp5KHByb3BzKSB7XG5cdFx0aWYgKCFwcm9tKSB7XG5cdFx0XHRwcm9tID0gbG9hZGVyKCk7XG5cdFx0XHRwcm9tLnRoZW4oXG5cdFx0XHRcdGV4cG9ydHMgPT4ge1xuXHRcdFx0XHRcdGNvbXBvbmVudCA9IGV4cG9ydHMuZGVmYXVsdCB8fCBleHBvcnRzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRlID0+IHtcblx0XHRcdFx0XHRlcnJvciA9IGU7XG5cdFx0XHRcdH1cblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0aWYgKGVycm9yKSB7XG5cdFx0XHR0aHJvdyBlcnJvcjtcblx0XHR9XG5cblx0XHRpZiAoIWNvbXBvbmVudCkge1xuXHRcdFx0dGhyb3cgcHJvbTtcblx0XHR9XG5cblx0XHRyZXR1cm4gY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKTtcblx0fVxuXG5cdExhenkuZGlzcGxheU5hbWUgPSAnTGF6eSc7XG5cdExhenkuX2ZvcndhcmRlZCA9IHRydWU7XG5cdHJldHVybiBMYXp5O1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCB0b0NoaWxkQXJyYXkgfSBmcm9tICdwcmVhY3QnO1xuaW1wb3J0IHsgc3VzcGVuZGVkIH0gZnJvbSAnLi9zdXNwZW5zZS5qcyc7XG5cbi8vIEluZGV4ZXMgdG8gbGlua2VkIGxpc3Qgbm9kZXMgKG5vZGVzIGFyZSBzdG9yZWQgYXMgYXJyYXlzIHRvIHNhdmUgYnl0ZXMpLlxuY29uc3QgU1VTUEVOREVEX0NPVU5UID0gMDtcbmNvbnN0IFJFU09MVkVEX0NPVU5UID0gMTtcbmNvbnN0IE5FWFRfTk9ERSA9IDI7XG5cbi8vIEhhdmluZyBjdXN0b20gaW5oZXJpdGFuY2UgaW5zdGVhZCBvZiBhIGNsYXNzIGhlcmUgc2F2ZXMgYSBsb3Qgb2YgYnl0ZXMuXG5leHBvcnQgZnVuY3Rpb24gU3VzcGVuc2VMaXN0KCkge1xuXHR0aGlzLl9uZXh0ID0gbnVsbDtcblx0dGhpcy5fbWFwID0gbnVsbDtcbn1cblxuLy8gTWFyayBvbmUgb2YgY2hpbGQncyBlYXJsaWVyIHN1c3BlbnNpb25zIGFzIHJlc29sdmVkLlxuLy8gU29tZSBwZW5kaW5nIGNhbGxiYWNrcyBtYXkgYmVjb21lIGNhbGxhYmxlIGR1ZSB0byB0aGlzXG4vLyAoZS5nLiB0aGUgbGFzdCBzdXNwZW5kZWQgZGVzY2VuZGFudCBnZXRzIHJlc29sdmVkIHdoZW5cbi8vIHJldmVhbE9yZGVyID09PSAndG9nZXRoZXInKS4gUHJvY2VzcyB0aG9zZSBjYWxsYmFja3MgYXMgd2VsbC5cbmNvbnN0IHJlc29sdmUgPSAobGlzdCwgY2hpbGQsIG5vZGUpID0+IHtcblx0aWYgKCsrbm9kZVtSRVNPTFZFRF9DT1VOVF0gPT09IG5vZGVbU1VTUEVOREVEX0NPVU5UXSkge1xuXHRcdC8vIFRoZSBudW1iZXIgYSBjaGlsZCAob3IgYW55IG9mIGl0cyBkZXNjZW5kYW50cykgaGFzIGJlZW4gc3VzcGVuZGVkXG5cdFx0Ly8gbWF0Y2hlcyB0aGUgbnVtYmVyIG9mIHRpbWVzIGl0J3MgYmVlbiByZXNvbHZlZC4gVGhlcmVmb3JlIHdlXG5cdFx0Ly8gbWFyayB0aGUgY2hpbGQgYXMgY29tcGxldGVseSByZXNvbHZlZCBieSBkZWxldGluZyBpdCBmcm9tIC5fbWFwLlxuXHRcdC8vIFRoaXMgaXMgdXNlZCB0byBmaWd1cmUgb3V0IHdoZW4gKmFsbCogY2hpbGRyZW4gaGF2ZSBiZWVuIGNvbXBsZXRlbHlcblx0XHQvLyByZXNvbHZlZCB3aGVuIHJldmVhbE9yZGVyIGlzICd0b2dldGhlcicuXG5cdFx0bGlzdC5fbWFwLmRlbGV0ZShjaGlsZCk7XG5cdH1cblxuXHQvLyBJZiByZXZlYWxPcmRlciBpcyBmYWxzeSB0aGVuIHdlIGNhbiBkbyBhbiBlYXJseSBleGl0LCBhcyB0aGVcblx0Ly8gY2FsbGJhY2tzIHdvbid0IGdldCBxdWV1ZWQgaW4gdGhlIG5vZGUgYW55d2F5LlxuXHQvLyBJZiByZXZlYWxPcmRlciBpcyAndG9nZXRoZXInIHRoZW4gYWxzbyBkbyBhbiBlYXJseSBleGl0XG5cdC8vIGlmIGFsbCBzdXNwZW5kZWQgZGVzY2VuZGFudHMgaGF2ZSBub3QgeWV0IGJlZW4gcmVzb2x2ZWQuXG5cdGlmIChcblx0XHQhbGlzdC5wcm9wcy5yZXZlYWxPcmRlciB8fFxuXHRcdChsaXN0LnByb3BzLnJldmVhbE9yZGVyWzBdID09PSAndCcgJiYgbGlzdC5fbWFwLnNpemUpXG5cdCkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFdhbGsgdGhlIGN1cnJlbnRseSBzdXNwZW5kZWQgY2hpbGRyZW4gaW4gb3JkZXIsIGNhbGxpbmcgdGhlaXJcblx0Ly8gc3RvcmVkIGNhbGxiYWNrcyBvbiB0aGUgd2F5LiBTdG9wIGlmIHdlIGVuY291bnRlciBhIGNoaWxkIHRoYXRcblx0Ly8gaGFzIG5vdCBiZWVuIGNvbXBsZXRlbHkgcmVzb2x2ZWQgeWV0LlxuXHRub2RlID0gbGlzdC5fbmV4dDtcblx0d2hpbGUgKG5vZGUpIHtcblx0XHR3aGlsZSAobm9kZS5sZW5ndGggPiAzKSB7XG5cdFx0XHRub2RlLnBvcCgpKCk7XG5cdFx0fVxuXHRcdGlmIChub2RlW1JFU09MVkVEX0NPVU5UXSA8IG5vZGVbU1VTUEVOREVEX0NPVU5UXSkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGxpc3QuX25leHQgPSBub2RlID0gbm9kZVtORVhUX05PREVdO1xuXHR9XG59O1xuXG4vLyBUaGluZ3Mgd2UgZG8gaGVyZSB0byBzYXZlIHNvbWUgYnl0ZXMgYnV0IGFyZSBub3QgcHJvcGVyIEpTIGluaGVyaXRhbmNlOlxuLy8gLSBjYWxsIGBuZXcgQ29tcG9uZW50KClgIGFzIHRoZSBwcm90b3R5cGVcbi8vIC0gZG8gbm90IHNldCBgU3VzcGVuc2UucHJvdG90eXBlLmNvbnN0cnVjdG9yYCB0byBgU3VzcGVuc2VgXG5TdXNwZW5zZUxpc3QucHJvdG90eXBlID0gbmV3IENvbXBvbmVudCgpO1xuXG5TdXNwZW5zZUxpc3QucHJvdG90eXBlLl9zdXNwZW5kZWQgPSBmdW5jdGlvbihjaGlsZCkge1xuXHRjb25zdCBsaXN0ID0gdGhpcztcblx0Y29uc3QgZGVsZWdhdGVkID0gc3VzcGVuZGVkKGxpc3QuX3Zub2RlKTtcblxuXHRsZXQgbm9kZSA9IGxpc3QuX21hcC5nZXQoY2hpbGQpO1xuXHRub2RlW1NVU1BFTkRFRF9DT1VOVF0rKztcblxuXHRyZXR1cm4gdW5zdXNwZW5kID0+IHtcblx0XHRjb25zdCB3cmFwcGVkVW5zdXNwZW5kID0gKCkgPT4ge1xuXHRcdFx0aWYgKCFsaXN0LnByb3BzLnJldmVhbE9yZGVyKSB7XG5cdFx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0aGUgdW5kZWZpbmVkIChmYWxzeSkgcmV2ZWFsT3JkZXIsIGFzIHRoZXJlXG5cdFx0XHRcdC8vIGlzIG5vIG5lZWQgdG8gY29vcmRpbmF0ZSBhIHNwZWNpZmljIG9yZGVyIG9yIHVuc3VzcGVuZHMuXG5cdFx0XHRcdHVuc3VzcGVuZCgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bm9kZS5wdXNoKHVuc3VzcGVuZCk7XG5cdFx0XHRcdHJlc29sdmUobGlzdCwgY2hpbGQsIG5vZGUpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0aWYgKGRlbGVnYXRlZCkge1xuXHRcdFx0ZGVsZWdhdGVkKHdyYXBwZWRVbnN1c3BlbmQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3cmFwcGVkVW5zdXNwZW5kKCk7XG5cdFx0fVxuXHR9O1xufTtcblxuU3VzcGVuc2VMaXN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbihwcm9wcykge1xuXHR0aGlzLl9uZXh0ID0gbnVsbDtcblx0dGhpcy5fbWFwID0gbmV3IE1hcCgpO1xuXG5cdGNvbnN0IGNoaWxkcmVuID0gdG9DaGlsZEFycmF5KHByb3BzLmNoaWxkcmVuKTtcblx0aWYgKHByb3BzLnJldmVhbE9yZGVyICYmIHByb3BzLnJldmVhbE9yZGVyWzBdID09PSAnYicpIHtcblx0XHQvLyBJZiBvcmRlciA9PT0gJ2JhY2t3YXJkcycgKG9yLCB3ZWxsLCBhbnl0aGluZyBzdGFydGluZyB3aXRoIGEgJ2InKVxuXHRcdC8vIHRoZW4gZmxpcCB0aGUgY2hpbGQgbGlzdCBhcm91bmQgc28gdGhhdCB0aGUgbGFzdCBjaGlsZCB3aWxsIGJlXG5cdFx0Ly8gdGhlIGZpcnN0IGluIHRoZSBsaW5rZWQgbGlzdC5cblx0XHRjaGlsZHJlbi5yZXZlcnNlKCk7XG5cdH1cblx0Ly8gQnVpbGQgdGhlIGxpbmtlZCBsaXN0LiBJdGVyYXRlIHRocm91Z2ggdGhlIGNoaWxkcmVuIGluIHJldmVyc2Ugb3JkZXJcblx0Ly8gc28gdGhhdCBgX25leHRgIHBvaW50cyB0byB0aGUgZmlyc3QgbGlua2VkIGxpc3Qgbm9kZSB0byBiZSByZXNvbHZlZC5cblx0Zm9yIChsZXQgaSA9IGNoaWxkcmVuLmxlbmd0aDsgaS0tOyApIHtcblx0XHQvLyBDcmVhdGUgYSBuZXcgbGlua2VkIGxpc3Qgbm9kZSBhcyBhbiBhcnJheSBvZiBmb3JtOlxuXHRcdC8vIFx0W3N1c3BlbmRlZF9jb3VudCwgcmVzb2x2ZWRfY291bnQsIG5leHRfbm9kZV1cblx0XHQvLyB3aGVyZSBzdXNwZW5kZWRfY291bnQgYW5kIHJlc29sdmVkX2NvdW50IGFyZSBudW1lcmljIGNvdW50ZXJzIGZvclxuXHRcdC8vIGtlZXBpbmcgdHJhY2sgaG93IG1hbnkgdGltZXMgYSBub2RlIGhhcyBiZWVuIHN1c3BlbmRlZCBhbmQgcmVzb2x2ZWQuXG5cdFx0Ly9cblx0XHQvLyBOb3RlIHRoYXQgc3VzcGVuZGVkX2NvdW50IHN0YXJ0cyBmcm9tIDEgaW5zdGVhZCBvZiAwLCBzbyB3ZSBjYW4gYmxvY2tcblx0XHQvLyBwcm9jZXNzaW5nIGNhbGxiYWNrcyB1bnRpbCBjb21wb25lbnREaWRNb3VudCBoYXMgYmVlbiBjYWxsZWQuIEluIGEgc2Vuc2Vcblx0XHQvLyBub2RlIGlzIHN1c3BlbmRlZCBhdCBsZWFzdCB1bnRpbCBjb21wb25lbnREaWRNb3VudCBnZXRzIGNhbGxlZCFcblx0XHQvL1xuXHRcdC8vIFBlbmRpbmcgY2FsbGJhY2tzIGFyZSBhZGRlZCB0byB0aGUgZW5kIG9mIHRoZSBub2RlOlxuXHRcdC8vIFx0W3N1c3BlbmRlZF9jb3VudCwgcmVzb2x2ZWRfY291bnQsIG5leHRfbm9kZSwgY2FsbGJhY2tfMCwgY2FsbGJhY2tfMSwgLi4uXVxuXHRcdHRoaXMuX21hcC5zZXQoY2hpbGRyZW5baV0sICh0aGlzLl9uZXh0ID0gWzEsIDAsIHRoaXMuX25leHRdKSk7XG5cdH1cblx0cmV0dXJuIHByb3BzLmNoaWxkcmVuO1xufTtcblxuU3VzcGVuc2VMaXN0LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBTdXNwZW5zZUxpc3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24oKSB7XG5cdC8vIEl0ZXJhdGUgdGhyb3VnaCBhbGwgY2hpbGRyZW4gYWZ0ZXIgbW91bnRpbmcgZm9yIHR3byByZWFzb25zOlxuXHQvLyAxLiBBcyBlYWNoIG5vZGVbU1VTUEVOREVEX0NPVU5UXSBzdGFydHMgZnJvbSAxLCB0aGlzIGl0ZXJhdGlvbiBpbmNyZWFzZXNcblx0Ly8gICAgZWFjaCBub2RlW1JFTEVBU0VEX0NPVU5UXSBieSAxLCB0aGVyZWZvcmUgYmFsYW5jaW5nIHRoZSBjb3VudGVycy5cblx0Ly8gICAgVGhlIG5vZGVzIGNhbiBub3cgYmUgY29tcGxldGVseSBjb25zdW1lZCBmcm9tIHRoZSBsaW5rZWQgbGlzdC5cblx0Ly8gMi4gSGFuZGxlIG5vZGVzIHRoYXQgbWlnaHQgaGF2ZSBnb3R0ZW4gcmVzb2x2ZWQgYmV0d2VlbiByZW5kZXIgYW5kXG5cdC8vICAgIGNvbXBvbmVudERpZE1vdW50LlxuXHR0aGlzLl9tYXAuZm9yRWFjaCgobm9kZSwgY2hpbGQpID0+IHtcblx0XHRyZXNvbHZlKHRoaXMsIGNoaWxkLCBub2RlKTtcblx0fSk7XG59O1xuIiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgcmVuZGVyIH0gZnJvbSAncHJlYWN0JztcblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vc3JjL2luZGV4JykuUmVuZGVyYWJsZVByb3BzPHsgY29udGV4dDogYW55IH0+fSBwcm9wc1xuICovXG5mdW5jdGlvbiBDb250ZXh0UHJvdmlkZXIocHJvcHMpIHtcblx0dGhpcy5nZXRDaGlsZENvbnRleHQgPSAoKSA9PiBwcm9wcy5jb250ZXh0O1xuXHRyZXR1cm4gcHJvcHMuY2hpbGRyZW47XG59XG5cbi8qKlxuICogUG9ydGFsIGNvbXBvbmVudFxuICogQHRoaXMge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkNvbXBvbmVudH1cbiAqIEBwYXJhbSB7b2JqZWN0IHwgbnVsbCB8IHVuZGVmaW5lZH0gcHJvcHNcbiAqXG4gKiBUT0RPOiB1c2UgY3JlYXRlUm9vdCgpIGluc3RlYWQgb2YgZmFrZSByb290XG4gKi9cbmZ1bmN0aW9uIFBvcnRhbChwcm9wcykge1xuXHRjb25zdCBfdGhpcyA9IHRoaXM7XG5cdGxldCBjb250YWluZXIgPSBwcm9wcy5fY29udGFpbmVyO1xuXG5cdF90aGlzLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmVuZGVyKG51bGwsIF90aGlzLl90ZW1wKTtcblx0XHRfdGhpcy5fdGVtcCA9IG51bGw7XG5cdFx0X3RoaXMuX2NvbnRhaW5lciA9IG51bGw7XG5cdH07XG5cblx0Ly8gV2hlbiB3ZSBjaGFuZ2UgY29udGFpbmVyIHdlIHNob3VsZCBjbGVhciBvdXIgb2xkIGNvbnRhaW5lciBhbmRcblx0Ly8gaW5kaWNhdGUgYSBuZXcgbW91bnQuXG5cdGlmIChfdGhpcy5fY29udGFpbmVyICYmIF90aGlzLl9jb250YWluZXIgIT09IGNvbnRhaW5lcikge1xuXHRcdF90aGlzLmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG5cdH1cblxuXHQvLyBXaGVuIHByb3BzLnZub2RlIGlzIHVuZGVmaW5lZC9mYWxzZS9udWxsIHdlIGFyZSBkZWFsaW5nIHdpdGggc29tZSBraW5kIG9mXG5cdC8vIGNvbmRpdGlvbmFsIHZub2RlLiBUaGlzIHNob3VsZCBub3QgdHJpZ2dlciBhIHJlbmRlci5cblx0aWYgKHByb3BzLl92bm9kZSkge1xuXHRcdGlmICghX3RoaXMuX3RlbXApIHtcblx0XHRcdF90aGlzLl9jb250YWluZXIgPSBjb250YWluZXI7XG5cblx0XHRcdC8vIENyZWF0ZSBhIGZha2UgRE9NIHBhcmVudCBub2RlIHRoYXQgbWFuYWdlcyBhIHN1YnNldCBvZiBgY29udGFpbmVyYCdzIGNoaWxkcmVuOlxuXHRcdFx0X3RoaXMuX3RlbXAgPSB7XG5cdFx0XHRcdG5vZGVUeXBlOiAxLFxuXHRcdFx0XHRwYXJlbnROb2RlOiBjb250YWluZXIsXG5cdFx0XHRcdGNoaWxkTm9kZXM6IFtdLFxuXHRcdFx0XHRhcHBlbmRDaGlsZChjaGlsZCkge1xuXHRcdFx0XHRcdHRoaXMuY2hpbGROb2Rlcy5wdXNoKGNoaWxkKTtcblx0XHRcdFx0XHRfdGhpcy5fY29udGFpbmVyLmFwcGVuZENoaWxkKGNoaWxkKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0aW5zZXJ0QmVmb3JlKGNoaWxkLCBiZWZvcmUpIHtcblx0XHRcdFx0XHR0aGlzLmNoaWxkTm9kZXMucHVzaChjaGlsZCk7XG5cdFx0XHRcdFx0X3RoaXMuX2NvbnRhaW5lci5hcHBlbmRDaGlsZChjaGlsZCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHJlbW92ZUNoaWxkKGNoaWxkKSB7XG5cdFx0XHRcdFx0dGhpcy5jaGlsZE5vZGVzLnNwbGljZSh0aGlzLmNoaWxkTm9kZXMuaW5kZXhPZihjaGlsZCkgPj4+IDEsIDEpO1xuXHRcdFx0XHRcdF90aGlzLl9jb250YWluZXIucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIFJlbmRlciBvdXIgd3JhcHBpbmcgZWxlbWVudCBpbnRvIHRlbXAuXG5cdFx0cmVuZGVyKFxuXHRcdFx0Y3JlYXRlRWxlbWVudChDb250ZXh0UHJvdmlkZXIsIHsgY29udGV4dDogX3RoaXMuY29udGV4dCB9LCBwcm9wcy5fdm5vZGUpLFxuXHRcdFx0X3RoaXMuX3RlbXBcblx0XHQpO1xuXHR9XG5cdC8vIFdoZW4gd2UgY29tZSBmcm9tIGEgY29uZGl0aW9uYWwgcmVuZGVyLCBvbiBhIG1vdW50ZWRcblx0Ly8gcG9ydGFsIHdlIHNob3VsZCBjbGVhciB0aGUgRE9NLlxuXHRlbHNlIGlmIChfdGhpcy5fdGVtcCkge1xuXHRcdF90aGlzLmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG5cdH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBgUG9ydGFsYCB0byBjb250aW51ZSByZW5kZXJpbmcgdGhlIHZub2RlIHRyZWUgYXQgYSBkaWZmZXJlbnQgRE9NIG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9IHZub2RlIFRoZSB2bm9kZSB0byByZW5kZXJcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gY29udGFpbmVyIFRoZSBET00gbm9kZSB0byBjb250aW51ZSByZW5kZXJpbmcgaW4gdG8uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQb3J0YWwodm5vZGUsIGNvbnRhaW5lcikge1xuXHRjb25zdCBlbCA9IGNyZWF0ZUVsZW1lbnQoUG9ydGFsLCB7IF92bm9kZTogdm5vZGUsIF9jb250YWluZXI6IGNvbnRhaW5lciB9KTtcblx0ZWwuY29udGFpbmVySW5mbyA9IGNvbnRhaW5lcjtcblx0cmV0dXJuIGVsO1xufVxuIiwiaW1wb3J0IHtcblx0cmVuZGVyIGFzIHByZWFjdFJlbmRlcixcblx0aHlkcmF0ZSBhcyBwcmVhY3RIeWRyYXRlLFxuXHRvcHRpb25zLFxuXHR0b0NoaWxkQXJyYXksXG5cdENvbXBvbmVudFxufSBmcm9tICdwcmVhY3QnO1xuXG5leHBvcnQgY29uc3QgUkVBQ1RfRUxFTUVOVF9UWVBFID1cblx0KHR5cGVvZiBTeW1ib2wgIT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLmZvciAmJiBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG5cdDB4ZWFjNztcblxuY29uc3QgQ0FNRUxfUFJPUFMgPSAvXig/OmFjY2VudHxhbGlnbm1lbnR8YXJhYmljfGJhc2VsaW5lfGNhcHxjbGlwKD8hUGF0aFUpfGNvbG9yfGRvbWluYW50fGZpbGx8Zmxvb2R8Zm9udHxnbHlwaCg/IVIpfGhvcml6fG1hcmtlcig/IUh8V3xVKXxvdmVybGluZXxwYWludHxzaGFwZXxzdG9wfHN0cmlrZXRocm91Z2h8c3Ryb2tlfHRleHQoPyFMKXx1bmRlcmxpbmV8dW5pY29kZXx1bml0c3x2fHZlY3Rvcnx2ZXJ0fHdvcmR8d3JpdGluZ3x4KD8hQykpW0EtWl0vO1xuXG5jb25zdCBJU19ET00gPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG4vLyBJbnB1dCB0eXBlcyBmb3Igd2hpY2ggb25jaGFuZ2Ugc2hvdWxkIG5vdCBiZSBjb252ZXJ0ZWQgdG8gb25pbnB1dC5cbi8vIHR5cGU9XCJmaWxlfGNoZWNrYm94fHJhZGlvXCIsIHBsdXMgXCJyYW5nZVwiIGluIElFMTEuXG4vLyAoSUUxMSBkb2Vzbid0IHN1cHBvcnQgU3ltYm9sLCB3aGljaCB3ZSB1c2UgaGVyZSB0byB0dXJuIGByYWRgIGludG8gYHJhYCB3aGljaCBtYXRjaGVzIFwicmFuZ2VcIilcbmNvbnN0IG9uQ2hhbmdlSW5wdXRUeXBlID0gdHlwZSA9PlxuXHQodHlwZW9mIFN5bWJvbCAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgU3ltYm9sKCkgPT0gJ3N5bWJvbCdcblx0XHQ/IC9maWx8Y2hlfHJhZC9pXG5cdFx0OiAvZmlsfGNoZXxyYS9pXG5cdCkudGVzdCh0eXBlKTtcblxuLy8gU29tZSBsaWJyYXJpZXMgbGlrZSBgcmVhY3QtdmlydHVhbGl6ZWRgIGV4cGxpY2l0bHkgY2hlY2sgZm9yIHRoaXMuXG5Db21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQgPSB7fTtcblxuLy8gYFVOU0FGRV8qYCBsaWZlY3ljbGUgaG9va3Ncbi8vIFByZWFjdCBvbmx5IGV2ZXIgaW52b2tlcyB0aGUgdW5wcmVmaXhlZCBtZXRob2RzLlxuLy8gSGVyZSB3ZSBwcm92aWRlIGEgYmFzZSBcImZhbGxiYWNrXCIgaW1wbGVtZW50YXRpb24gdGhhdCBjYWxscyBhbnkgZGVmaW5lZCBVTlNBRkVfIHByZWZpeGVkIG1ldGhvZC5cbi8vIC0gSWYgYSBjb21wb25lbnQgZGVmaW5lcyBpdHMgb3duIGBjb21wb25lbnREaWRNb3VudCgpYCAoaW5jbHVkaW5nIHZpYSBkZWZpbmVQcm9wZXJ0eSksIHVzZSB0aGF0LlxuLy8gLSBJZiBhIGNvbXBvbmVudCBkZWZpbmVzIGBVTlNBRkVfY29tcG9uZW50RGlkTW91bnQoKWAsIGBjb21wb25lbnREaWRNb3VudGAgaXMgdGhlIGFsaWFzIGdldHRlci9zZXR0ZXIuXG4vLyAtIElmIGFueXRoaW5nIGFzc2lnbnMgdG8gYW4gYFVOU0FGRV8qYCBwcm9wZXJ0eSwgdGhlIGFzc2lnbm1lbnQgaXMgZm9yd2FyZGVkIHRvIHRoZSB1bnByZWZpeGVkIHByb3BlcnR5LlxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmVhY3Rqcy9wcmVhY3QvaXNzdWVzLzE5NDFcbltcblx0J2NvbXBvbmVudFdpbGxNb3VudCcsXG5cdCdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcblx0J2NvbXBvbmVudFdpbGxVcGRhdGUnXG5dLmZvckVhY2goa2V5ID0+IHtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KENvbXBvbmVudC5wcm90b3R5cGUsIGtleSwge1xuXHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRnZXQoKSB7XG5cdFx0XHRyZXR1cm4gdGhpc1snVU5TQUZFXycgKyBrZXldO1xuXHRcdH0sXG5cdFx0c2V0KHYpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBrZXksIHtcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IHZcblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG59KTtcblxuLyoqXG4gKiBQcm94eSByZW5kZXIoKSBzaW5jZSBSZWFjdCByZXR1cm5zIGEgQ29tcG9uZW50IHJlZmVyZW5jZS5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9IHZub2RlIFZOb2RlIHRyZWUgdG8gcmVuZGVyXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IHBhcmVudCBET00gbm9kZSB0byByZW5kZXIgdm5vZGUgdHJlZSBpbnRvXG4gKiBAcGFyYW0geygpID0+IHZvaWR9IFtjYWxsYmFja10gT3B0aW9uYWwgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGNhbGxlZCBhZnRlciByZW5kZXJpbmdcbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnQgfCBudWxsfSBUaGUgcm9vdCBjb21wb25lbnQgcmVmZXJlbmNlIG9yIG51bGxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcih2bm9kZSwgcGFyZW50LCBjYWxsYmFjaykge1xuXHQvLyBSZWFjdCBkZXN0cm95cyBhbnkgZXhpc3RpbmcgRE9NIG5vZGVzLCBzZWUgIzE3Mjdcblx0Ly8gLi4uYnV0IG9ubHkgb24gdGhlIGZpcnN0IHJlbmRlciwgc2VlICMxODI4XG5cdGlmIChwYXJlbnQuX2NoaWxkcmVuID09IG51bGwpIHtcblx0XHRwYXJlbnQudGV4dENvbnRlbnQgPSAnJztcblx0fVxuXG5cdHByZWFjdFJlbmRlcih2bm9kZSwgcGFyZW50KTtcblx0aWYgKHR5cGVvZiBjYWxsYmFjayA9PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuXG5cdHJldHVybiB2bm9kZSA/IHZub2RlLl9jb21wb25lbnQgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHlkcmF0ZSh2bm9kZSwgcGFyZW50LCBjYWxsYmFjaykge1xuXHRwcmVhY3RIeWRyYXRlKHZub2RlLCBwYXJlbnQpO1xuXHRpZiAodHlwZW9mIGNhbGxiYWNrID09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XG5cblx0cmV0dXJuIHZub2RlID8gdm5vZGUuX2NvbXBvbmVudCA6IG51bGw7XG59XG5cbmxldCBvbGRFdmVudEhvb2sgPSBvcHRpb25zLmV2ZW50O1xub3B0aW9ucy5ldmVudCA9IGUgPT4ge1xuXHRpZiAob2xkRXZlbnRIb29rKSBlID0gb2xkRXZlbnRIb29rKGUpO1xuXHRlLnBlcnNpc3QgPSBlbXB0eTtcblx0ZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGlzUHJvcGFnYXRpb25TdG9wcGVkO1xuXHRlLmlzRGVmYXVsdFByZXZlbnRlZCA9IGlzRGVmYXVsdFByZXZlbnRlZDtcblx0cmV0dXJuIChlLm5hdGl2ZUV2ZW50ID0gZSk7XG59O1xuXG5mdW5jdGlvbiBlbXB0eSgpIHt9XG5cbmZ1bmN0aW9uIGlzUHJvcGFnYXRpb25TdG9wcGVkKCkge1xuXHRyZXR1cm4gdGhpcy5jYW5jZWxCdWJibGU7XG59XG5cbmZ1bmN0aW9uIGlzRGVmYXVsdFByZXZlbnRlZCgpIHtcblx0cmV0dXJuIHRoaXMuZGVmYXVsdFByZXZlbnRlZDtcbn1cblxubGV0IGNsYXNzTmFtZURlc2NyaXB0b3IgPSB7XG5cdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0Z2V0KCkge1xuXHRcdHJldHVybiB0aGlzLmNsYXNzO1xuXHR9XG59O1xuXG5sZXQgb2xkVk5vZGVIb29rID0gb3B0aW9ucy52bm9kZTtcbm9wdGlvbnMudm5vZGUgPSB2bm9kZSA9PiB7XG5cdGxldCB0eXBlID0gdm5vZGUudHlwZTtcblx0bGV0IHByb3BzID0gdm5vZGUucHJvcHM7XG5cdGxldCBub3JtYWxpemVkUHJvcHMgPSBwcm9wcztcblxuXHQvLyBvbmx5IG5vcm1hbGl6ZSBwcm9wcyBvbiBFbGVtZW50IG5vZGVzXG5cdGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcblx0XHRjb25zdCBub25DdXN0b21FbGVtZW50ID0gdHlwZS5pbmRleE9mKCctJykgPT09IC0xO1xuXHRcdG5vcm1hbGl6ZWRQcm9wcyA9IHt9O1xuXG5cdFx0Zm9yIChsZXQgaSBpbiBwcm9wcykge1xuXHRcdFx0bGV0IHZhbHVlID0gcHJvcHNbaV07XG5cblx0XHRcdGlmIChJU19ET00gJiYgaSA9PT0gJ2NoaWxkcmVuJyAmJiB0eXBlID09PSAnbm9zY3JpcHQnKSB7XG5cdFx0XHRcdC8vIEVtdWxhdGUgUmVhY3QncyBiZWhhdmlvciBvZiBub3QgcmVuZGVyaW5nIHRoZSBjb250ZW50cyBvZiBub3NjcmlwdCB0YWdzIG9uIHRoZSBjbGllbnQuXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fSBlbHNlIGlmIChpID09PSAndmFsdWUnICYmICdkZWZhdWx0VmFsdWUnIGluIHByb3BzICYmIHZhbHVlID09IG51bGwpIHtcblx0XHRcdFx0Ly8gU2tpcCBhcHBseWluZyB2YWx1ZSBpZiBpdCBpcyBudWxsL3VuZGVmaW5lZCBhbmQgd2UgYWxyZWFkeSBzZXRcblx0XHRcdFx0Ly8gYSBkZWZhdWx0IHZhbHVlXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fSBlbHNlIGlmIChcblx0XHRcdFx0aSA9PT0gJ2RlZmF1bHRWYWx1ZScgJiZcblx0XHRcdFx0J3ZhbHVlJyBpbiBwcm9wcyAmJlxuXHRcdFx0XHRwcm9wcy52YWx1ZSA9PSBudWxsXG5cdFx0XHQpIHtcblx0XHRcdFx0Ly8gYGRlZmF1bHRWYWx1ZWAgaXMgdHJlYXRlZCBhcyBhIGZhbGxiYWNrIGB2YWx1ZWAgd2hlbiBhIHZhbHVlIHByb3AgaXMgcHJlc2VudCBidXQgbnVsbC91bmRlZmluZWQuXG5cdFx0XHRcdC8vIGBkZWZhdWx0VmFsdWVgIGZvciBFbGVtZW50cyB3aXRoIG5vIHZhbHVlIHByb3AgaXMgdGhlIHNhbWUgYXMgdGhlIERPTSBkZWZhdWx0VmFsdWUgcHJvcGVydHkuXG5cdFx0XHRcdGkgPSAndmFsdWUnO1xuXHRcdFx0fSBlbHNlIGlmIChpID09PSAnZG93bmxvYWQnICYmIHZhbHVlID09PSB0cnVlKSB7XG5cdFx0XHRcdC8vIENhbGxpbmcgYHNldEF0dHJpYnV0ZWAgd2l0aCBhIHRydXRoeSB2YWx1ZSB3aWxsIGxlYWQgdG8gaXQgYmVpbmdcblx0XHRcdFx0Ly8gcGFzc2VkIGFzIGEgc3RyaW5naWZpZWQgdmFsdWUsIGUuZy4gYGRvd25sb2FkPVwidHJ1ZVwiYC4gUmVhY3Rcblx0XHRcdFx0Ly8gY29udmVydHMgaXQgdG8gYW4gZW1wdHkgc3RyaW5nIGluc3RlYWQsIG90aGVyd2lzZSB0aGUgYXR0cmlidXRlXG5cdFx0XHRcdC8vIHZhbHVlIHdpbGwgYmUgdXNlZCBhcyB0aGUgZmlsZSBuYW1lIGFuZCB0aGUgZmlsZSB3aWxsIGJlIGNhbGxlZFxuXHRcdFx0XHQvLyBcInRydWVcIiB1cG9uIGRvd25sb2FkaW5nIGl0LlxuXHRcdFx0XHR2YWx1ZSA9ICcnO1xuXHRcdFx0fSBlbHNlIGlmICgvb25kb3VibGVjbGljay9pLnRlc3QoaSkpIHtcblx0XHRcdFx0aSA9ICdvbmRibGNsaWNrJztcblx0XHRcdH0gZWxzZSBpZiAoXG5cdFx0XHRcdC9eb25jaGFuZ2UodGV4dGFyZWF8aW5wdXQpL2kudGVzdChpICsgdHlwZSkgJiZcblx0XHRcdFx0IW9uQ2hhbmdlSW5wdXRUeXBlKHByb3BzLnR5cGUpXG5cdFx0XHQpIHtcblx0XHRcdFx0aSA9ICdvbmlucHV0Jztcblx0XHRcdH0gZWxzZSBpZiAoL15vbmZvY3VzJC9pLnRlc3QoaSkpIHtcblx0XHRcdFx0aSA9ICdvbmZvY3VzaW4nO1xuXHRcdFx0fSBlbHNlIGlmICgvXm9uYmx1ciQvaS50ZXN0KGkpKSB7XG5cdFx0XHRcdGkgPSAnb25mb2N1c291dCc7XG5cdFx0XHR9IGVsc2UgaWYgKC9eb24oQW5pfFRyYXxUb3V8QmVmb3JlSW5wfENvbXBvKS8udGVzdChpKSkge1xuXHRcdFx0XHRpID0gaS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0fSBlbHNlIGlmIChub25DdXN0b21FbGVtZW50ICYmIENBTUVMX1BST1BTLnRlc3QoaSkpIHtcblx0XHRcdFx0aSA9IGkucmVwbGFjZSgvW0EtWjAtOV0vLCAnLSQmJykudG9Mb3dlckNhc2UoKTtcblx0XHRcdH0gZWxzZSBpZiAodmFsdWUgPT09IG51bGwpIHtcblx0XHRcdFx0dmFsdWUgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBzdXBwb3J0IGZvciBvbklucHV0IGFuZCBvbkNoYW5nZSwgc2VlICMzNTYxXG5cdFx0XHQvLyBpZiB3ZSBoYXZlIGFuIG9uaW5wdXQgcHJvcCBhbHJlYWR5IGNoYW5nZSBpdCB0byBvbmlucHV0Q2FwdHVyZVxuXHRcdFx0aWYgKC9eb25pbnB1dCQvaS50ZXN0KGkpKSB7XG5cdFx0XHRcdGkgPSBpLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdGlmIChub3JtYWxpemVkUHJvcHNbaV0pIHtcblx0XHRcdFx0XHRpID0gJ29uaW5wdXRDYXB0dXJlJztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRub3JtYWxpemVkUHJvcHNbaV0gPSB2YWx1ZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgc3VwcG9ydCBmb3IgYXJyYXkgc2VsZWN0IHZhbHVlczogPHNlbGVjdCBtdWx0aXBsZSB2YWx1ZT17W119IC8+XG5cdFx0aWYgKFxuXHRcdFx0dHlwZSA9PSAnc2VsZWN0JyAmJlxuXHRcdFx0bm9ybWFsaXplZFByb3BzLm11bHRpcGxlICYmXG5cdFx0XHRBcnJheS5pc0FycmF5KG5vcm1hbGl6ZWRQcm9wcy52YWx1ZSlcblx0XHQpIHtcblx0XHRcdC8vIGZvckVhY2goKSBhbHdheXMgcmV0dXJucyB1bmRlZmluZWQsIHdoaWNoIHdlIGFidXNlIGhlcmUgdG8gdW5zZXQgdGhlIHZhbHVlIHByb3AuXG5cdFx0XHRub3JtYWxpemVkUHJvcHMudmFsdWUgPSB0b0NoaWxkQXJyYXkocHJvcHMuY2hpbGRyZW4pLmZvckVhY2goY2hpbGQgPT4ge1xuXHRcdFx0XHRjaGlsZC5wcm9wcy5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0bm9ybWFsaXplZFByb3BzLnZhbHVlLmluZGV4T2YoY2hpbGQucHJvcHMudmFsdWUpICE9IC0xO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkaW5nIHN1cHBvcnQgZm9yIGRlZmF1bHRWYWx1ZSBpbiBzZWxlY3QgdGFnXG5cdFx0aWYgKHR5cGUgPT0gJ3NlbGVjdCcgJiYgbm9ybWFsaXplZFByb3BzLmRlZmF1bHRWYWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRub3JtYWxpemVkUHJvcHMudmFsdWUgPSB0b0NoaWxkQXJyYXkocHJvcHMuY2hpbGRyZW4pLmZvckVhY2goY2hpbGQgPT4ge1xuXHRcdFx0XHRpZiAobm9ybWFsaXplZFByb3BzLm11bHRpcGxlKSB7XG5cdFx0XHRcdFx0Y2hpbGQucHJvcHMuc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0bm9ybWFsaXplZFByb3BzLmRlZmF1bHRWYWx1ZS5pbmRleE9mKGNoaWxkLnByb3BzLnZhbHVlKSAhPSAtMTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjaGlsZC5wcm9wcy5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRub3JtYWxpemVkUHJvcHMuZGVmYXVsdFZhbHVlID09IGNoaWxkLnByb3BzLnZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHR2bm9kZS5wcm9wcyA9IG5vcm1hbGl6ZWRQcm9wcztcblxuXHRcdGlmIChwcm9wcy5jbGFzcyAhPSBwcm9wcy5jbGFzc05hbWUpIHtcblx0XHRcdGNsYXNzTmFtZURlc2NyaXB0b3IuZW51bWVyYWJsZSA9ICdjbGFzc05hbWUnIGluIHByb3BzO1xuXHRcdFx0aWYgKHByb3BzLmNsYXNzTmFtZSAhPSBudWxsKSBub3JtYWxpemVkUHJvcHMuY2xhc3MgPSBwcm9wcy5jbGFzc05hbWU7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsaXplZFByb3BzLCAnY2xhc3NOYW1lJywgY2xhc3NOYW1lRGVzY3JpcHRvcik7XG5cdFx0fVxuXHR9XG5cblx0dm5vZGUuJCR0eXBlb2YgPSBSRUFDVF9FTEVNRU5UX1RZUEU7XG5cblx0aWYgKG9sZFZOb2RlSG9vaykgb2xkVk5vZGVIb29rKHZub2RlKTtcbn07XG5cbi8vIE9ubHkgbmVlZGVkIGZvciByZWFjdC1yZWxheVxubGV0IGN1cnJlbnRDb21wb25lbnQ7XG5jb25zdCBvbGRCZWZvcmVSZW5kZXIgPSBvcHRpb25zLl9yZW5kZXI7XG5vcHRpb25zLl9yZW5kZXIgPSBmdW5jdGlvbih2bm9kZSkge1xuXHRpZiAob2xkQmVmb3JlUmVuZGVyKSB7XG5cdFx0b2xkQmVmb3JlUmVuZGVyKHZub2RlKTtcblx0fVxuXHRjdXJyZW50Q29tcG9uZW50ID0gdm5vZGUuX2NvbXBvbmVudDtcbn07XG5cbi8vIFRoaXMgaXMgYSB2ZXJ5IHZlcnkgcHJpdmF0ZSBpbnRlcm5hbCBmdW5jdGlvbiBmb3IgUmVhY3QgaXRcbi8vIGlzIHVzZWQgdG8gc29ydC1vZiBkbyBydW50aW1lIGRlcGVuZGVuY3kgaW5qZWN0aW9uLiBTbyBmYXJcbi8vIG9ubHkgYHJlYWN0LXJlbGF5YCBtYWtlcyB1c2Ugb2YgaXQuIEl0IHVzZXMgaXQgdG8gcmVhZCB0aGVcbi8vIGNvbnRleHQgdmFsdWUuXG5leHBvcnQgY29uc3QgX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQgPSB7XG5cdFJlYWN0Q3VycmVudERpc3BhdGNoZXI6IHtcblx0XHRjdXJyZW50OiB7XG5cdFx0XHRyZWFkQ29udGV4dChjb250ZXh0KSB7XG5cdFx0XHRcdHJldHVybiBjdXJyZW50Q29tcG9uZW50Ll9nbG9iYWxDb250ZXh0W2NvbnRleHQuX2lkXS5wcm9wcy52YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG4iLCJpbXBvcnQge1xuXHRjcmVhdGVFbGVtZW50LFxuXHRyZW5kZXIgYXMgcHJlYWN0UmVuZGVyLFxuXHRjbG9uZUVsZW1lbnQgYXMgcHJlYWN0Q2xvbmVFbGVtZW50LFxuXHRjcmVhdGVSZWYsXG5cdENvbXBvbmVudCxcblx0Y3JlYXRlQ29udGV4dCxcblx0RnJhZ21lbnRcbn0gZnJvbSAncHJlYWN0JztcbmltcG9ydCB7XG5cdHVzZVN0YXRlLFxuXHR1c2VSZWR1Y2VyLFxuXHR1c2VFZmZlY3QsXG5cdHVzZUxheW91dEVmZmVjdCxcblx0dXNlUmVmLFxuXHR1c2VJbXBlcmF0aXZlSGFuZGxlLFxuXHR1c2VNZW1vLFxuXHR1c2VDYWxsYmFjayxcblx0dXNlQ29udGV4dCxcblx0dXNlRGVidWdWYWx1ZVxufSBmcm9tICdwcmVhY3QvaG9va3MnO1xuaW1wb3J0IHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJy4vUHVyZUNvbXBvbmVudCc7XG5pbXBvcnQgeyBtZW1vIH0gZnJvbSAnLi9tZW1vJztcbmltcG9ydCB7IGZvcndhcmRSZWYgfSBmcm9tICcuL2ZvcndhcmRSZWYnO1xuaW1wb3J0IHsgQ2hpbGRyZW4gfSBmcm9tICcuL0NoaWxkcmVuJztcbmltcG9ydCB7IFN1c3BlbnNlLCBsYXp5IH0gZnJvbSAnLi9zdXNwZW5zZSc7XG5pbXBvcnQgeyBTdXNwZW5zZUxpc3QgfSBmcm9tICcuL3N1c3BlbnNlLWxpc3QnO1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsIH0gZnJvbSAnLi9wb3J0YWxzJztcbmltcG9ydCB7XG5cdGh5ZHJhdGUsXG5cdHJlbmRlcixcblx0UkVBQ1RfRUxFTUVOVF9UWVBFLFxuXHRfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRFxufSBmcm9tICcuL3JlbmRlcic7XG5cbmNvbnN0IHZlcnNpb24gPSAnMTcuMC4yJzsgLy8gdHJpY2sgbGlicmFyaWVzIHRvIHRoaW5rIHdlIGFyZSByZWFjdFxuXG4vKipcbiAqIExlZ2FjeSB2ZXJzaW9uIG9mIGNyZWF0ZUVsZW1lbnQuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlW1widHlwZVwiXX0gdHlwZSBUaGUgbm9kZSBuYW1lIG9yIENvbXBvbmVudCBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBjcmVhdGVGYWN0b3J5KHR5cGUpIHtcblx0cmV0dXJuIGNyZWF0ZUVsZW1lbnQuYmluZChudWxsLCB0eXBlKTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgcGFzc2VkIGVsZW1lbnQgaXMgYSB2YWxpZCAocClyZWFjdCBub2RlLlxuICogQHBhcmFtIHsqfSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkge1xuXHRyZXR1cm4gISFlbGVtZW50ICYmIGVsZW1lbnQuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbn1cblxuLyoqXG4gKiBXcmFwIGBjbG9uZUVsZW1lbnRgIHRvIGFib3J0IGlmIHRoZSBwYXNzZWQgZWxlbWVudCBpcyBub3QgYSB2YWxpZCBlbGVtZW50IGFuZCBhcHBseVxuICogYWxsIHZub2RlIG5vcm1hbGl6YXRpb25zLlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX0gZWxlbWVudCBUaGUgdm5vZGUgdG8gY2xvbmVcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyBQcm9wcyB0byBhZGQgd2hlbiBjbG9uaW5nXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi9pbnRlcm5hbCcpLkNvbXBvbmVudENoaWxkcmVuPn0gcmVzdCBPcHRpb25hbCBjb21wb25lbnQgY2hpbGRyZW5cbiAqL1xuZnVuY3Rpb24gY2xvbmVFbGVtZW50KGVsZW1lbnQpIHtcblx0aWYgKCFpc1ZhbGlkRWxlbWVudChlbGVtZW50KSkgcmV0dXJuIGVsZW1lbnQ7XG5cdHJldHVybiBwcmVhY3RDbG9uZUVsZW1lbnQuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYSBjb21wb25lbnQgdHJlZSBmcm9tIHRoZSBET00sIGluY2x1ZGluZyBzdGF0ZSBhbmQgZXZlbnQgaGFuZGxlcnMuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IGNvbnRhaW5lclxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHVubW91bnRDb21wb25lbnRBdE5vZGUoY29udGFpbmVyKSB7XG5cdGlmIChjb250YWluZXIuX2NoaWxkcmVuKSB7XG5cdFx0cHJlYWN0UmVuZGVyKG51bGwsIGNvbnRhaW5lcik7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEdldCB0aGUgbWF0Y2hpbmcgRE9NIG5vZGUgZm9yIGEgY29tcG9uZW50XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkNvbXBvbmVudH0gY29tcG9uZW50XG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL2ludGVybmFsJykuUHJlYWN0RWxlbWVudCB8IG51bGx9XG4gKi9cbmZ1bmN0aW9uIGZpbmRET01Ob2RlKGNvbXBvbmVudCkge1xuXHRyZXR1cm4gKFxuXHRcdChjb21wb25lbnQgJiZcblx0XHRcdChjb21wb25lbnQuYmFzZSB8fCAoY29tcG9uZW50Lm5vZGVUeXBlID09PSAxICYmIGNvbXBvbmVudCkpKSB8fFxuXHRcdG51bGxcblx0KTtcbn1cblxuLyoqXG4gKiBEZXByZWNhdGVkIHdheSB0byBjb250cm9sIGJhdGNoZWQgcmVuZGVyaW5nIGluc2lkZSB0aGUgcmVjb25jaWxlciwgYnV0IHdlXG4gKiBhbHJlYWR5IHNjaGVkdWxlIGluIGJhdGNoZXMgaW5zaWRlIG91ciByZW5kZXJpbmcgY29kZVxuICogQHRlbXBsYXRlIEFyZ1xuICogQHBhcmFtIHsoYXJnOiBBcmcpID0+IHZvaWR9IGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgdHJpZ2dlcnMgdGhlIHVwZGF0ZWRcbiAqIEBwYXJhbSB7QXJnfSBbYXJnXSBPcHRpb25hbCBhcmd1bWVudCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcbmNvbnN0IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzID0gKGNhbGxiYWNrLCBhcmcpID0+IGNhbGxiYWNrKGFyZyk7XG5cbi8qKlxuICogSW4gUmVhY3QsIGBmbHVzaFN5bmNgIGZsdXNoZXMgdGhlIGVudGlyZSB0cmVlIGFuZCBmb3JjZXMgYSByZXJlbmRlci4gSXQnc1xuICogaW1wbG1lbnRlZCBoZXJlIGFzIGEgbm8tb3AuXG4gKiBAdGVtcGxhdGUgQXJnXG4gKiBAdGVtcGxhdGUgUmVzdWx0XG4gKiBAcGFyYW0geyhhcmc6IEFyZykgPT4gUmVzdWx0fSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHJ1bnMgYmVmb3JlIHRoZSBmbHVzaFxuICogQHBhcmFtIHtBcmd9IFthcmddIE9wdGlvbmFsIGFydWdtZW50IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB0aGUgY2FsbGJhY2tcbiAqIEByZXR1cm5zXG4gKi9cbmNvbnN0IGZsdXNoU3luYyA9IChjYWxsYmFjaywgYXJnKSA9PiBjYWxsYmFjayhhcmcpO1xuXG4vKipcbiAqIFN0cmljdCBNb2RlIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiBQcmVhY3QsIHNvIHdlIHByb3ZpZGUgYSBzdGFuZC1pbiBmb3IgaXRcbiAqIHRoYXQganVzdCByZW5kZXJzIGl0cyBjaGlsZHJlbiB3aXRob3V0IGltcG9zaW5nIGFueSByZXN0cmljdGlvbnMuXG4gKi9cbmNvbnN0IFN0cmljdE1vZGUgPSBGcmFnbWVudDtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0VHJhbnNpdGlvbihjYikge1xuXHRjYigpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlRGVmZXJyZWRWYWx1ZSh2YWwpIHtcblx0cmV0dXJuIHZhbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRyYW5zaXRpb24oKSB7XG5cdHJldHVybiBbZmFsc2UsIHN0YXJ0VHJhbnNpdGlvbl07XG59XG5cbi8vIFRPRE86IGluIHRoZW9yeSB0aGlzIHNob3VsZCBiZSBkb25lIGFmdGVyIGEgVk5vZGUgaXMgZGlmZmVkIGFzIHdlIHdhbnQgdG8gaW5zZXJ0XG4vLyBzdHlsZXMvLi4uIGJlZm9yZSBpdCBhdHRhY2hlc1xuZXhwb3J0IGNvbnN0IHVzZUluc2VydGlvbkVmZmVjdCA9IHVzZUxheW91dEVmZmVjdDtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVN5bmNFeHRlcm5hbFN0b3JlKHN1YnNjcmliZSwgZ2V0U25hcHNob3QpIHtcblx0Y29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZShnZXRTbmFwc2hvdCk7XG5cblx0Ly8gVE9ETzogaW4gc3VzcGVuc2UgZm9yIGRhdGEgd2UgY291bGQgaGF2ZSBhIGRpc2NyZXBhbmN5IGhlcmUgYmVjYXVzZSBQcmVhY3Qgd29uJ3QgcmUtaW5pdCB0aGUgXCJ1c2VTdGF0ZVwiXG5cdC8vIHdoZW4gdGhpcyB1bnN1c3BlbmRzIHdoaWNoIGNvdWxkIGxlYWQgdG8gc3RhbGUgc3RhdGUgYXMgdGhlIHN1YnNjcmlwdGlvbiBpcyB0b3JuIGRvd24uXG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRyZXR1cm4gc3Vic2NyaWJlKCgpID0+IHtcblx0XHRcdHNldFN0YXRlKGdldFNuYXBzaG90KCkpO1xuXHRcdH0pO1xuXHR9LCBbc3Vic2NyaWJlLCBnZXRTbmFwc2hvdF0pO1xuXG5cdHJldHVybiBzdGF0ZTtcbn1cblxuZXhwb3J0ICogZnJvbSAncHJlYWN0L2hvb2tzJztcbmV4cG9ydCB7XG5cdHZlcnNpb24sXG5cdENoaWxkcmVuLFxuXHRyZW5kZXIsXG5cdGh5ZHJhdGUsXG5cdHVubW91bnRDb21wb25lbnRBdE5vZGUsXG5cdGNyZWF0ZVBvcnRhbCxcblx0Y3JlYXRlRWxlbWVudCxcblx0Y3JlYXRlQ29udGV4dCxcblx0Y3JlYXRlRmFjdG9yeSxcblx0Y2xvbmVFbGVtZW50LFxuXHRjcmVhdGVSZWYsXG5cdEZyYWdtZW50LFxuXHRpc1ZhbGlkRWxlbWVudCxcblx0ZmluZERPTU5vZGUsXG5cdENvbXBvbmVudCxcblx0UHVyZUNvbXBvbmVudCxcblx0bWVtbyxcblx0Zm9yd2FyZFJlZixcblx0Zmx1c2hTeW5jLFxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG5cdHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzLFxuXHRTdHJpY3RNb2RlLFxuXHRTdXNwZW5zZSxcblx0U3VzcGVuc2VMaXN0LFxuXHRsYXp5LFxuXHRfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRFxufTtcblxuLy8gUmVhY3QgY29waWVzIHRoZSBuYW1lZCBleHBvcnRzIHRvIHRoZSBkZWZhdWx0IG9uZS5cbmV4cG9ydCBkZWZhdWx0IHtcblx0dXNlU3RhdGUsXG5cdHVzZVJlZHVjZXIsXG5cdHVzZUVmZmVjdCxcblx0dXNlTGF5b3V0RWZmZWN0LFxuXHR1c2VJbnNlcnRpb25FZmZlY3QsXG5cdHVzZVRyYW5zaXRpb24sXG5cdHVzZURlZmVycmVkVmFsdWUsXG5cdHVzZVN5bmNFeHRlcm5hbFN0b3JlLFxuXHRzdGFydFRyYW5zaXRpb24sXG5cdHVzZVJlZixcblx0dXNlSW1wZXJhdGl2ZUhhbmRsZSxcblx0dXNlTWVtbyxcblx0dXNlQ2FsbGJhY2ssXG5cdHVzZUNvbnRleHQsXG5cdHVzZURlYnVnVmFsdWUsXG5cdHZlcnNpb24sXG5cdENoaWxkcmVuLFxuXHRyZW5kZXIsXG5cdGh5ZHJhdGUsXG5cdHVubW91bnRDb21wb25lbnRBdE5vZGUsXG5cdGNyZWF0ZVBvcnRhbCxcblx0Y3JlYXRlRWxlbWVudCxcblx0Y3JlYXRlQ29udGV4dCxcblx0Y3JlYXRlRmFjdG9yeSxcblx0Y2xvbmVFbGVtZW50LFxuXHRjcmVhdGVSZWYsXG5cdEZyYWdtZW50LFxuXHRpc1ZhbGlkRWxlbWVudCxcblx0ZmluZERPTU5vZGUsXG5cdENvbXBvbmVudCxcblx0UHVyZUNvbXBvbmVudCxcblx0bWVtbyxcblx0Zm9yd2FyZFJlZixcblx0Zmx1c2hTeW5jLFxuXHR1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyxcblx0U3RyaWN0TW9kZSxcblx0U3VzcGVuc2UsXG5cdFN1c3BlbnNlTGlzdCxcblx0bGF6eSxcblx0X19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRURcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUG9wb3ZlclBvcnRhbCA9IHZvaWQgMDtcbnZhciByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xudmFyIHJlYWN0X2RvbV8xID0gcmVxdWlyZShcInJlYWN0LWRvbVwiKTtcbnZhciBQb3BvdmVyUG9ydGFsID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIGNvbnRhaW5lciA9IF9hLmNvbnRhaW5lciwgZWxlbWVudCA9IF9hLmVsZW1lbnQsIHNjb3V0RWxlbWVudCA9IF9hLnNjb3V0RWxlbWVudCwgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbjtcbiAgICByZWFjdF8xLnVzZUxheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHNjb3V0RWxlbWVudCk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoc2NvdXRFbGVtZW50KTtcbiAgICAgICAgfTtcbiAgICB9LCBbY29udGFpbmVyLCBlbGVtZW50XSk7XG4gICAgcmV0dXJuIHJlYWN0X2RvbV8xLmNyZWF0ZVBvcnRhbChjaGlsZHJlbiwgZWxlbWVudCk7XG59O1xuZXhwb3J0cy5Qb3BvdmVyUG9ydGFsID0gUG9wb3ZlclBvcnRhbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBvcG92ZXJQb3J0YWwuanMubWFwIiwiaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0LCBGQyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZVBvcnRhbCB9IGZyb20gJ3JlYWN0LWRvbSc7XG5cbmludGVyZmFjZSBQb3BvdmVyUG9ydGFsUHJvcHMge1xuICBjb250YWluZXI6IEVsZW1lbnQ7XG4gIGVsZW1lbnQ6IEVsZW1lbnQ7XG4gIHNjb3V0RWxlbWVudDogRWxlbWVudDtcbn1cblxuY29uc3QgUG9wb3ZlclBvcnRhbDogRkM8UG9wb3ZlclBvcnRhbFByb3BzPiA9ICh7IGNvbnRhaW5lciwgZWxlbWVudCwgc2NvdXRFbGVtZW50LCBjaGlsZHJlbiB9KSA9PiB7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChzY291dEVsZW1lbnQpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoc2NvdXRFbGVtZW50KTtcbiAgICB9O1xuICB9LCBbY29udGFpbmVyLCBlbGVtZW50XSk7XG5cbiAgcmV0dXJuIGNyZWF0ZVBvcnRhbChjaGlsZHJlbiwgZWxlbWVudCk7XG59O1xuXG5leHBvcnQgeyBQb3BvdmVyUG9ydGFsIH07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0TnVkZ2VkUG9wb3ZlclJlY3QgPSBleHBvcnRzLmdldE5ld1BvcG92ZXJSZWN0ID0gZXhwb3J0cy5wb3BvdmVyUmVjdEZvclBvc2l0aW9uID0gZXhwb3J0cy5jcmVhdGVDb250YWluZXIgPSBleHBvcnRzLnJlY3RzQXJlRXF1YWwgPSBleHBvcnRzLkNvbnN0YW50cyA9IHZvaWQgMDtcbmV4cG9ydHMuQ29uc3RhbnRzID0ge1xuICAgIERFRkFVTFRfQUxJR046ICdjZW50ZXInLFxuICAgIERFRkFVTFRfUE9TSVRJT05TOiBbJ3RvcCcsICdsZWZ0JywgJ3JpZ2h0JywgJ2JvdHRvbSddLFxuICAgIEVNUFRZX0NMSUVOVF9SRUNUOiB7XG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICB3aWR0aDogMCxcbiAgICB9LFxufTtcbnZhciByZWN0c0FyZUVxdWFsID0gZnVuY3Rpb24gKHJlY3RBLCByZWN0Qikge1xuICAgIHJldHVybiByZWN0QSA9PT0gcmVjdEIgfHxcbiAgICAgICAgKChyZWN0QSA9PT0gbnVsbCB8fCByZWN0QSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVjdEEuYm90dG9tKSA9PT0gKHJlY3RCID09PSBudWxsIHx8IHJlY3RCID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWN0Qi5ib3R0b20pICYmXG4gICAgICAgICAgICAocmVjdEEgPT09IG51bGwgfHwgcmVjdEEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlY3RBLmhlaWdodCkgPT09IChyZWN0QiA9PT0gbnVsbCB8fCByZWN0QiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVjdEIuaGVpZ2h0KSAmJlxuICAgICAgICAgICAgKHJlY3RBID09PSBudWxsIHx8IHJlY3RBID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWN0QS5sZWZ0KSA9PT0gKHJlY3RCID09PSBudWxsIHx8IHJlY3RCID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWN0Qi5sZWZ0KSAmJlxuICAgICAgICAgICAgKHJlY3RBID09PSBudWxsIHx8IHJlY3RBID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWN0QS5yaWdodCkgPT09IChyZWN0QiA9PT0gbnVsbCB8fCByZWN0QiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVjdEIucmlnaHQpICYmXG4gICAgICAgICAgICAocmVjdEEgPT09IG51bGwgfHwgcmVjdEEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlY3RBLnRvcCkgPT09IChyZWN0QiA9PT0gbnVsbCB8fCByZWN0QiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVjdEIudG9wKSAmJlxuICAgICAgICAgICAgKHJlY3RBID09PSBudWxsIHx8IHJlY3RBID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWN0QS53aWR0aCkgPT09IChyZWN0QiA9PT0gbnVsbCB8fCByZWN0QiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVjdEIud2lkdGgpKTtcbn07XG5leHBvcnRzLnJlY3RzQXJlRXF1YWwgPSByZWN0c0FyZUVxdWFsO1xudmFyIGNyZWF0ZUNvbnRhaW5lciA9IGZ1bmN0aW9uIChjb250YWluZXJTdHlsZSwgY29udGFpbmVyQ2xhc3NOYW1lKSB7XG4gICAgdmFyIGNvbnRhaW5lciA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBpZiAoY29udGFpbmVyQ2xhc3NOYW1lKVxuICAgICAgICBjb250YWluZXIuY2xhc3NOYW1lID0gY29udGFpbmVyQ2xhc3NOYW1lO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGFpbmVyLnN0eWxlLCBjb250YWluZXJTdHlsZSk7XG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcbn07XG5leHBvcnRzLmNyZWF0ZUNvbnRhaW5lciA9IGNyZWF0ZUNvbnRhaW5lcjtcbnZhciBwb3BvdmVyUmVjdEZvclBvc2l0aW9uID0gZnVuY3Rpb24gKHBvc2l0aW9uLCBjaGlsZFJlY3QsIHBvcG92ZXJSZWN0LCBwYWRkaW5nLCBhbGlnbikge1xuICAgIHZhciB0YXJnZXRNaWRYID0gY2hpbGRSZWN0LmxlZnQgKyBjaGlsZFJlY3Qud2lkdGggLyAyO1xuICAgIHZhciB0YXJnZXRNaWRZID0gY2hpbGRSZWN0LnRvcCArIGNoaWxkUmVjdC5oZWlnaHQgLyAyO1xuICAgIHZhciB3aWR0aCA9IHBvcG92ZXJSZWN0LndpZHRoLCBoZWlnaHQgPSBwb3BvdmVyUmVjdC5oZWlnaHQ7XG4gICAgdmFyIHRvcDtcbiAgICB2YXIgbGVmdDtcbiAgICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG4gICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgdG9wID0gdGFyZ2V0TWlkWSAtIGhlaWdodCAvIDI7XG4gICAgICAgICAgICBsZWZ0ID0gY2hpbGRSZWN0LmxlZnQgLSBwYWRkaW5nIC0gd2lkdGg7XG4gICAgICAgICAgICBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgICAgICB0b3AgPSBjaGlsZFJlY3QudG9wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFsaWduID09PSAnZW5kJykge1xuICAgICAgICAgICAgICAgIHRvcCA9IGNoaWxkUmVjdC5ib3R0b20gLSBoZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgIHRvcCA9IGNoaWxkUmVjdC5ib3R0b20gKyBwYWRkaW5nO1xuICAgICAgICAgICAgbGVmdCA9IHRhcmdldE1pZFggLSB3aWR0aCAvIDI7XG4gICAgICAgICAgICBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgICAgICBsZWZ0ID0gY2hpbGRSZWN0LmxlZnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgICAgICAgICAgbGVmdCA9IGNoaWxkUmVjdC5yaWdodCAtIHdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgIHRvcCA9IHRhcmdldE1pZFkgLSBoZWlnaHQgLyAyO1xuICAgICAgICAgICAgbGVmdCA9IGNoaWxkUmVjdC5yaWdodCArIHBhZGRpbmc7XG4gICAgICAgICAgICBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgICAgICB0b3AgPSBjaGlsZFJlY3QudG9wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFsaWduID09PSAnZW5kJykge1xuICAgICAgICAgICAgICAgIHRvcCA9IGNoaWxkUmVjdC5ib3R0b20gLSBoZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRvcCA9IGNoaWxkUmVjdC50b3AgLSBoZWlnaHQgLSBwYWRkaW5nO1xuICAgICAgICAgICAgbGVmdCA9IHRhcmdldE1pZFggLSB3aWR0aCAvIDI7XG4gICAgICAgICAgICBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgICAgICBsZWZ0ID0gY2hpbGRSZWN0LmxlZnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgICAgICAgICAgbGVmdCA9IGNoaWxkUmVjdC5yaWdodCAtIHdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiB7IHRvcDogdG9wLCBsZWZ0OiBsZWZ0LCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0LCByaWdodDogbGVmdCArIHdpZHRoLCBib3R0b206IHRvcCArIGhlaWdodCB9O1xufTtcbmV4cG9ydHMucG9wb3ZlclJlY3RGb3JQb3NpdGlvbiA9IHBvcG92ZXJSZWN0Rm9yUG9zaXRpb247XG52YXIgZ2V0TmV3UG9wb3ZlclJlY3QgPSBmdW5jdGlvbiAoX2EsIGJvdW5kYXJ5SW5zZXQpIHtcbiAgICB2YXIgcG9zaXRpb24gPSBfYS5wb3NpdGlvbiwgYWxpZ24gPSBfYS5hbGlnbiwgY2hpbGRSZWN0ID0gX2EuY2hpbGRSZWN0LCBwb3BvdmVyUmVjdCA9IF9hLnBvcG92ZXJSZWN0LCBib3VuZGFyeVJlY3QgPSBfYS5ib3VuZGFyeVJlY3QsIHBhZGRpbmcgPSBfYS5wYWRkaW5nLCByZXBvc2l0aW9uID0gX2EucmVwb3NpdGlvbjtcbiAgICB2YXIgcmVjdCA9IGV4cG9ydHMucG9wb3ZlclJlY3RGb3JQb3NpdGlvbihwb3NpdGlvbiwgY2hpbGRSZWN0LCBwb3BvdmVyUmVjdCwgcGFkZGluZywgYWxpZ24pO1xuICAgIHZhciBib3VuZGFyeVZpb2xhdGlvbiA9IHJlcG9zaXRpb24gJiZcbiAgICAgICAgKChwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgcmVjdC50b3AgPCBib3VuZGFyeVJlY3QudG9wICsgYm91bmRhcnlJbnNldCkgfHxcbiAgICAgICAgICAgIChwb3NpdGlvbiA9PT0gJ2xlZnQnICYmIHJlY3QubGVmdCA8IGJvdW5kYXJ5UmVjdC5sZWZ0ICsgYm91bmRhcnlJbnNldCkgfHxcbiAgICAgICAgICAgIChwb3NpdGlvbiA9PT0gJ3JpZ2h0JyAmJiByZWN0LnJpZ2h0ID4gYm91bmRhcnlSZWN0LnJpZ2h0IC0gYm91bmRhcnlJbnNldCkgfHxcbiAgICAgICAgICAgIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScgJiYgcmVjdC5ib3R0b20gPiBib3VuZGFyeVJlY3QuYm90dG9tIC0gYm91bmRhcnlJbnNldCkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlY3Q6IHJlY3QsXG4gICAgICAgIGJvdW5kYXJ5VmlvbGF0aW9uOiBib3VuZGFyeVZpb2xhdGlvbixcbiAgICB9O1xufTtcbmV4cG9ydHMuZ2V0TmV3UG9wb3ZlclJlY3QgPSBnZXROZXdQb3BvdmVyUmVjdDtcbnZhciBnZXROdWRnZWRQb3BvdmVyUmVjdCA9IGZ1bmN0aW9uIChwb3BvdmVyUmVjdCwgYm91bmRhcnlSZWN0LCBib3VuZGFyeUluc2V0KSB7XG4gICAgdmFyIHRvcEJvdW5kYXJ5ID0gYm91bmRhcnlSZWN0LnRvcCArIGJvdW5kYXJ5SW5zZXQ7XG4gICAgdmFyIGxlZnRCb3VuZGFyeSA9IGJvdW5kYXJ5UmVjdC5sZWZ0ICsgYm91bmRhcnlJbnNldDtcbiAgICB2YXIgcmlnaHRCb3VuZGFyeSA9IGJvdW5kYXJ5UmVjdC5yaWdodCAtIGJvdW5kYXJ5SW5zZXQ7XG4gICAgdmFyIGJvdHRvbUJvdW5kYXJ5ID0gYm91bmRhcnlSZWN0LmJvdHRvbSAtIGJvdW5kYXJ5SW5zZXQ7XG4gICAgdmFyIHRvcCA9IHBvcG92ZXJSZWN0LnRvcCA8IHRvcEJvdW5kYXJ5ID8gdG9wQm91bmRhcnkgOiBwb3BvdmVyUmVjdC50b3A7XG4gICAgdG9wID0gdG9wICsgcG9wb3ZlclJlY3QuaGVpZ2h0ID4gYm90dG9tQm91bmRhcnkgPyBib3R0b21Cb3VuZGFyeSAtIHBvcG92ZXJSZWN0LmhlaWdodCA6IHRvcDtcbiAgICB2YXIgbGVmdCA9IHBvcG92ZXJSZWN0LmxlZnQgPCBsZWZ0Qm91bmRhcnkgPyBsZWZ0Qm91bmRhcnkgOiBwb3BvdmVyUmVjdC5sZWZ0O1xuICAgIGxlZnQgPSBsZWZ0ICsgcG9wb3ZlclJlY3Qud2lkdGggPiByaWdodEJvdW5kYXJ5ID8gcmlnaHRCb3VuZGFyeSAtIHBvcG92ZXJSZWN0LndpZHRoIDogbGVmdDtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgd2lkdGg6IHBvcG92ZXJSZWN0LndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHBvcG92ZXJSZWN0LmhlaWdodCxcbiAgICAgICAgcmlnaHQ6IGxlZnQgKyBwb3BvdmVyUmVjdC53aWR0aCxcbiAgICAgICAgYm90dG9tOiB0b3AgKyBwb3BvdmVyUmVjdC5oZWlnaHQsXG4gICAgfTtcbn07XG5leHBvcnRzLmdldE51ZGdlZFBvcG92ZXJSZWN0ID0gZ2V0TnVkZ2VkUG9wb3ZlclJlY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCIsImltcG9ydCB7IFBvcG92ZXJQb3NpdGlvbiwgUG9wb3ZlclN0YXRlLCBQb3BvdmVyQWxpZ24gfSBmcm9tICcuL2luZGV4JztcblxuZXhwb3J0IGNvbnN0IENvbnN0YW50cyA9IHtcbiAgREVGQVVMVF9BTElHTjogJ2NlbnRlcicgYXMgUG9wb3ZlckFsaWduLFxuICBERUZBVUxUX1BPU0lUSU9OUzogWyd0b3AnLCAnbGVmdCcsICdyaWdodCcsICdib3R0b20nXSBhcyBQb3BvdmVyUG9zaXRpb25bXSxcbiAgRU1QVFlfQ0xJRU5UX1JFQ1Q6IHtcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICBib3R0b206IDAsXG4gICAgaGVpZ2h0OiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIHdpZHRoOiAwLFxuICB9IGFzIENsaWVudFJlY3QsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgcmVjdHNBcmVFcXVhbCA9IChyZWN0QTogQ2xpZW50UmVjdCwgcmVjdEI6IENsaWVudFJlY3QpID0+XG4gIHJlY3RBID09PSByZWN0QiB8fFxuICAocmVjdEE/LmJvdHRvbSA9PT0gcmVjdEI/LmJvdHRvbSAmJlxuICAgIHJlY3RBPy5oZWlnaHQgPT09IHJlY3RCPy5oZWlnaHQgJiZcbiAgICByZWN0QT8ubGVmdCA9PT0gcmVjdEI/LmxlZnQgJiZcbiAgICByZWN0QT8ucmlnaHQgPT09IHJlY3RCPy5yaWdodCAmJlxuICAgIHJlY3RBPy50b3AgPT09IHJlY3RCPy50b3AgJiZcbiAgICByZWN0QT8ud2lkdGggPT09IHJlY3RCPy53aWR0aCk7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVDb250YWluZXIgPSAoXG4gIGNvbnRhaW5lclN0eWxlPzogUGFydGlhbDxDU1NTdHlsZURlY2xhcmF0aW9uPixcbiAgY29udGFpbmVyQ2xhc3NOYW1lPzogc3RyaW5nLFxuKSA9PiB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgaWYgKGNvbnRhaW5lckNsYXNzTmFtZSkgY29udGFpbmVyLmNsYXNzTmFtZSA9IGNvbnRhaW5lckNsYXNzTmFtZTtcbiAgT2JqZWN0LmFzc2lnbihjb250YWluZXIuc3R5bGUsIGNvbnRhaW5lclN0eWxlKTtcbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn07XG5cbmV4cG9ydCBjb25zdCBwb3BvdmVyUmVjdEZvclBvc2l0aW9uID0gKFxuICBwb3NpdGlvbjogUG9wb3ZlclBvc2l0aW9uLFxuICBjaGlsZFJlY3Q6IENsaWVudFJlY3QsXG4gIHBvcG92ZXJSZWN0OiBDbGllbnRSZWN0LFxuICBwYWRkaW5nOiBudW1iZXIsXG4gIGFsaWduOiBQb3BvdmVyQWxpZ24sXG4pOiBDbGllbnRSZWN0ID0+IHtcbiAgY29uc3QgdGFyZ2V0TWlkWCA9IGNoaWxkUmVjdC5sZWZ0ICsgY2hpbGRSZWN0LndpZHRoIC8gMjtcbiAgY29uc3QgdGFyZ2V0TWlkWSA9IGNoaWxkUmVjdC50b3AgKyBjaGlsZFJlY3QuaGVpZ2h0IC8gMjtcbiAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBwb3BvdmVyUmVjdDtcbiAgbGV0IHRvcDogbnVtYmVyO1xuICBsZXQgbGVmdDogbnVtYmVyO1xuXG4gIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICBjYXNlICdsZWZ0JzpcbiAgICAgIHRvcCA9IHRhcmdldE1pZFkgLSBoZWlnaHQgLyAyO1xuICAgICAgbGVmdCA9IGNoaWxkUmVjdC5sZWZ0IC0gcGFkZGluZyAtIHdpZHRoO1xuICAgICAgaWYgKGFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgIHRvcCA9IGNoaWxkUmVjdC50b3A7XG4gICAgICB9XG4gICAgICBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgIHRvcCA9IGNoaWxkUmVjdC5ib3R0b20gLSBoZWlnaHQ7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdib3R0b20nOlxuICAgICAgdG9wID0gY2hpbGRSZWN0LmJvdHRvbSArIHBhZGRpbmc7XG4gICAgICBsZWZ0ID0gdGFyZ2V0TWlkWCAtIHdpZHRoIC8gMjtcbiAgICAgIGlmIChhbGlnbiA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICBsZWZ0ID0gY2hpbGRSZWN0LmxlZnQ7XG4gICAgICB9XG4gICAgICBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgIGxlZnQgPSBjaGlsZFJlY3QucmlnaHQgLSB3aWR0aDtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIHRvcCA9IHRhcmdldE1pZFkgLSBoZWlnaHQgLyAyO1xuICAgICAgbGVmdCA9IGNoaWxkUmVjdC5yaWdodCArIHBhZGRpbmc7XG4gICAgICBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgdG9wID0gY2hpbGRSZWN0LnRvcDtcbiAgICAgIH1cbiAgICAgIGlmIChhbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgdG9wID0gY2hpbGRSZWN0LmJvdHRvbSAtIGhlaWdodDtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0b3AgPSBjaGlsZFJlY3QudG9wIC0gaGVpZ2h0IC0gcGFkZGluZztcbiAgICAgIGxlZnQgPSB0YXJnZXRNaWRYIC0gd2lkdGggLyAyO1xuICAgICAgaWYgKGFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgIGxlZnQgPSBjaGlsZFJlY3QubGVmdDtcbiAgICAgIH1cbiAgICAgIGlmIChhbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgbGVmdCA9IGNoaWxkUmVjdC5yaWdodCAtIHdpZHRoO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4geyB0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHQsIHJpZ2h0OiBsZWZ0ICsgd2lkdGgsIGJvdHRvbTogdG9wICsgaGVpZ2h0IH07XG59O1xuXG5pbnRlcmZhY2UgR2V0TmV3UG9wb3ZlclJlY3RQcm9wcyB7XG4gIHBvc2l0aW9uOiBQb3BvdmVyUG9zaXRpb247XG4gIHJlcG9zaXRpb246IGJvb2xlYW47XG4gIGFsaWduOiBQb3BvdmVyQWxpZ247XG4gIGNoaWxkUmVjdDogQ2xpZW50UmVjdDtcbiAgcG9wb3ZlclJlY3Q6IENsaWVudFJlY3Q7XG4gIGJvdW5kYXJ5UmVjdDogQ2xpZW50UmVjdDtcbiAgcGFkZGluZzogbnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0TmV3UG9wb3ZlclJlY3QgPSAoXG4gIHtcbiAgICBwb3NpdGlvbixcbiAgICBhbGlnbixcbiAgICBjaGlsZFJlY3QsXG4gICAgcG9wb3ZlclJlY3QsXG4gICAgYm91bmRhcnlSZWN0LFxuICAgIHBhZGRpbmcsXG4gICAgcmVwb3NpdGlvbixcbiAgfTogR2V0TmV3UG9wb3ZlclJlY3RQcm9wcyxcbiAgYm91bmRhcnlJbnNldDogbnVtYmVyLFxuKSA9PiB7XG4gIGNvbnN0IHJlY3QgPSBwb3BvdmVyUmVjdEZvclBvc2l0aW9uKHBvc2l0aW9uLCBjaGlsZFJlY3QsIHBvcG92ZXJSZWN0LCBwYWRkaW5nLCBhbGlnbik7XG5cbiAgY29uc3QgYm91bmRhcnlWaW9sYXRpb24gPVxuICAgIHJlcG9zaXRpb24gJiZcbiAgICAoKHBvc2l0aW9uID09PSAndG9wJyAmJiByZWN0LnRvcCA8IGJvdW5kYXJ5UmVjdC50b3AgKyBib3VuZGFyeUluc2V0KSB8fFxuICAgICAgKHBvc2l0aW9uID09PSAnbGVmdCcgJiYgcmVjdC5sZWZ0IDwgYm91bmRhcnlSZWN0LmxlZnQgKyBib3VuZGFyeUluc2V0KSB8fFxuICAgICAgKHBvc2l0aW9uID09PSAncmlnaHQnICYmIHJlY3QucmlnaHQgPiBib3VuZGFyeVJlY3QucmlnaHQgLSBib3VuZGFyeUluc2V0KSB8fFxuICAgICAgKHBvc2l0aW9uID09PSAnYm90dG9tJyAmJiByZWN0LmJvdHRvbSA+IGJvdW5kYXJ5UmVjdC5ib3R0b20gLSBib3VuZGFyeUluc2V0KSk7XG5cbiAgcmV0dXJuIHtcbiAgICByZWN0LFxuICAgIGJvdW5kYXJ5VmlvbGF0aW9uLFxuICB9IGFzIGNvbnN0O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldE51ZGdlZFBvcG92ZXJSZWN0ID0gKFxuICBwb3BvdmVyUmVjdDogQ2xpZW50UmVjdCxcbiAgYm91bmRhcnlSZWN0OiBDbGllbnRSZWN0LFxuICBib3VuZGFyeUluc2V0OiBudW1iZXIsXG4pOiBDbGllbnRSZWN0ID0+IHtcbiAgY29uc3QgdG9wQm91bmRhcnkgPSBib3VuZGFyeVJlY3QudG9wICsgYm91bmRhcnlJbnNldDtcbiAgY29uc3QgbGVmdEJvdW5kYXJ5ID0gYm91bmRhcnlSZWN0LmxlZnQgKyBib3VuZGFyeUluc2V0O1xuICBjb25zdCByaWdodEJvdW5kYXJ5ID0gYm91bmRhcnlSZWN0LnJpZ2h0IC0gYm91bmRhcnlJbnNldDtcbiAgY29uc3QgYm90dG9tQm91bmRhcnkgPSBib3VuZGFyeVJlY3QuYm90dG9tIC0gYm91bmRhcnlJbnNldDtcblxuICBsZXQgdG9wID0gcG9wb3ZlclJlY3QudG9wIDwgdG9wQm91bmRhcnkgPyB0b3BCb3VuZGFyeSA6IHBvcG92ZXJSZWN0LnRvcDtcbiAgdG9wID0gdG9wICsgcG9wb3ZlclJlY3QuaGVpZ2h0ID4gYm90dG9tQm91bmRhcnkgPyBib3R0b21Cb3VuZGFyeSAtIHBvcG92ZXJSZWN0LmhlaWdodCA6IHRvcDtcbiAgbGV0IGxlZnQgPSBwb3BvdmVyUmVjdC5sZWZ0IDwgbGVmdEJvdW5kYXJ5ID8gbGVmdEJvdW5kYXJ5IDogcG9wb3ZlclJlY3QubGVmdDtcbiAgbGVmdCA9IGxlZnQgKyBwb3BvdmVyUmVjdC53aWR0aCA+IHJpZ2h0Qm91bmRhcnkgPyByaWdodEJvdW5kYXJ5IC0gcG9wb3ZlclJlY3Qud2lkdGggOiBsZWZ0O1xuXG4gIHJldHVybiB7XG4gICAgdG9wLFxuICAgIGxlZnQsXG4gICAgd2lkdGg6IHBvcG92ZXJSZWN0LndpZHRoLFxuICAgIGhlaWdodDogcG9wb3ZlclJlY3QuaGVpZ2h0LFxuICAgIHJpZ2h0OiBsZWZ0ICsgcG9wb3ZlclJlY3Qud2lkdGgsXG4gICAgYm90dG9tOiB0b3AgKyBwb3BvdmVyUmVjdC5oZWlnaHQsXG4gIH07XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZVBvcG92ZXIgPSB2b2lkIDA7XG52YXIgcmVhY3RfMSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbnZhciB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xudmFyIHVzZUVsZW1lbnRSZWZfMSA9IHJlcXVpcmUoXCIuL3VzZUVsZW1lbnRSZWZcIik7XG52YXIgdXNlUG9wb3ZlciA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBpc09wZW4gPSBfYS5pc09wZW4sIGNoaWxkUmVmID0gX2EuY2hpbGRSZWYsIHBvc2l0aW9ucyA9IF9hLnBvc2l0aW9ucywgY29udGFpbmVyQ2xhc3NOYW1lID0gX2EuY29udGFpbmVyQ2xhc3NOYW1lLCBwYXJlbnRFbGVtZW50ID0gX2EucGFyZW50RWxlbWVudCwgY29udGVudExvY2F0aW9uID0gX2EuY29udGVudExvY2F0aW9uLCBhbGlnbiA9IF9hLmFsaWduLCBwYWRkaW5nID0gX2EucGFkZGluZywgcmVwb3NpdGlvbiA9IF9hLnJlcG9zaXRpb24sIGJvdW5kYXJ5SW5zZXQgPSBfYS5ib3VuZGFyeUluc2V0LCBib3VuZGFyeUVsZW1lbnQgPSBfYS5ib3VuZGFyeUVsZW1lbnQsIG9uUG9zaXRpb25Qb3BvdmVyID0gX2Eub25Qb3NpdGlvblBvcG92ZXI7XG4gICAgdmFyIHBvcG92ZXJSZWYgPSB1c2VFbGVtZW50UmVmXzEudXNlRWxlbWVudFJlZihjb250YWluZXJDbGFzc05hbWUsIHtcbiAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgIG92ZXJmbG93OiAndmlzaWJsZScsXG4gICAgICAgIHRvcDogJzBweCcsXG4gICAgICAgIGxlZnQ6ICcwcHgnLFxuICAgIH0pO1xuICAgIHZhciBzY291dFJlZiA9IHVzZUVsZW1lbnRSZWZfMS51c2VFbGVtZW50UmVmKCdyZWFjdC10aW55LXBvcG92ZXItc2NvdXQnLCB7XG4gICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICB0b3A6ICcwcHgnLFxuICAgICAgICBsZWZ0OiAnMHB4JyxcbiAgICAgICAgd2lkdGg6ICcwcHgnLFxuICAgICAgICBoZWlnaHQ6ICcwcHgnLFxuICAgICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICB9KTtcbiAgICB2YXIgcG9zaXRpb25Qb3BvdmVyID0gcmVhY3RfMS51c2VDYWxsYmFjayhmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIF9iLCBfYztcbiAgICAgICAgdmFyIF9kID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIF9lID0gX2QucG9zaXRpb25JbmRleCwgcG9zaXRpb25JbmRleCA9IF9lID09PSB2b2lkIDAgPyAwIDogX2UsIF9mID0gX2QucGFyZW50UmVjdCwgcGFyZW50UmVjdCA9IF9mID09PSB2b2lkIDAgPyBwYXJlbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDogX2YsIF9nID0gX2QuY2hpbGRSZWN0LCBjaGlsZFJlY3QgPSBfZyA9PT0gdm9pZCAwID8gKF9iID0gY2hpbGRSZWYgPT09IG51bGwgfHwgY2hpbGRSZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNoaWxkUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IF9nLCBfaCA9IF9kLnNjb3V0UmVjdCwgc2NvdXRSZWN0ID0gX2ggPT09IHZvaWQgMCA/IChfYyA9IHNjb3V0UmVmID09PSBudWxsIHx8IHNjb3V0UmVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzY291dFJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBfaCwgX2ogPSBfZC5wb3BvdmVyUmVjdCwgcG9wb3ZlclJlY3QgPSBfaiA9PT0gdm9pZCAwID8gcG9wb3ZlclJlZi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDogX2osIF9rID0gX2QuYm91bmRhcnlSZWN0LCBib3VuZGFyeVJlY3QgPSBfayA9PT0gdm9pZCAwID8gYm91bmRhcnlFbGVtZW50ID09PSBwYXJlbnRFbGVtZW50XG4gICAgICAgICAgICA/IHBhcmVudFJlY3RcbiAgICAgICAgICAgIDogYm91bmRhcnlFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDogX2s7XG4gICAgICAgIGlmICghY2hpbGRSZWN0IHx8ICFwYXJlbnRSZWN0IHx8ICFpc09wZW4pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGVudExvY2F0aW9uKSB7XG4gICAgICAgICAgICB2YXIgX2wgPSB0eXBlb2YgY29udGVudExvY2F0aW9uID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgPyBjb250ZW50TG9jYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICBjaGlsZFJlY3Q6IGNoaWxkUmVjdCxcbiAgICAgICAgICAgICAgICAgICAgcG9wb3ZlclJlY3Q6IHBvcG92ZXJSZWN0LFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRSZWN0OiBwYXJlbnRSZWN0LFxuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVJlY3Q6IGJvdW5kYXJ5UmVjdCxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogcGFkZGluZyxcbiAgICAgICAgICAgICAgICAgICAgbnVkZ2VkVG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICBudWRnZWRMZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeUluc2V0OiBib3VuZGFyeUluc2V0LFxuICAgICAgICAgICAgICAgICAgICB2aW9sYXRpb25zOiB1dGlsXzEuQ29uc3RhbnRzLkVNUFRZX0NMSUVOVF9SRUNULFxuICAgICAgICAgICAgICAgICAgICBoYXNWaW9sYXRpb25zOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIDogY29udGVudExvY2F0aW9uLCBpbnB1dFRvcCA9IF9sLnRvcCwgaW5wdXRMZWZ0ID0gX2wubGVmdDtcbiAgICAgICAgICAgIHZhciBsZWZ0XzEgPSBwYXJlbnRSZWN0LmxlZnQgKyBpbnB1dExlZnQ7XG4gICAgICAgICAgICB2YXIgdG9wXzEgPSBwYXJlbnRSZWN0LnRvcCArIGlucHV0VG9wO1xuICAgICAgICAgICAgcG9wb3ZlclJlZi5jdXJyZW50LnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgKGxlZnRfMSAtIHNjb3V0UmVjdC5sZWZ0KSArIFwicHgsIFwiICsgKHRvcF8xIC0gc2NvdXRSZWN0LnRvcCkgKyBcInB4KVwiO1xuICAgICAgICAgICAgb25Qb3NpdGlvblBvcG92ZXIoe1xuICAgICAgICAgICAgICAgIGNoaWxkUmVjdDogY2hpbGRSZWN0LFxuICAgICAgICAgICAgICAgIHBvcG92ZXJSZWN0OiBwb3BvdmVyUmVjdCxcbiAgICAgICAgICAgICAgICBwYXJlbnRSZWN0OiBwYXJlbnRSZWN0LFxuICAgICAgICAgICAgICAgIGJvdW5kYXJ5UmVjdDogYm91bmRhcnlSZWN0LFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgICAgICAgICAgICAgbnVkZ2VkVG9wOiAwLFxuICAgICAgICAgICAgICAgIG51ZGdlZExlZnQ6IDAsXG4gICAgICAgICAgICAgICAgYm91bmRhcnlJbnNldDogYm91bmRhcnlJbnNldCxcbiAgICAgICAgICAgICAgICB2aW9sYXRpb25zOiB1dGlsXzEuQ29uc3RhbnRzLkVNUFRZX0NMSUVOVF9SRUNULFxuICAgICAgICAgICAgICAgIGhhc1Zpb2xhdGlvbnM6IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlzRXhoYXVzdGVkID0gcG9zaXRpb25JbmRleCA9PT0gcG9zaXRpb25zLmxlbmd0aDtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gaXNFeGhhdXN0ZWQgPyBwb3NpdGlvbnNbMF0gOiBwb3NpdGlvbnNbcG9zaXRpb25JbmRleF07XG4gICAgICAgIHZhciBfbSA9IHV0aWxfMS5nZXROZXdQb3BvdmVyUmVjdCh7XG4gICAgICAgICAgICBjaGlsZFJlY3Q6IGNoaWxkUmVjdCxcbiAgICAgICAgICAgIHBvcG92ZXJSZWN0OiBwb3BvdmVyUmVjdCxcbiAgICAgICAgICAgIGJvdW5kYXJ5UmVjdDogYm91bmRhcnlSZWN0LFxuICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgICAgICAgYWxpZ246IGFsaWduLFxuICAgICAgICAgICAgcGFkZGluZzogcGFkZGluZyxcbiAgICAgICAgICAgIHJlcG9zaXRpb246IHJlcG9zaXRpb24sXG4gICAgICAgIH0sIGJvdW5kYXJ5SW5zZXQpLCByZWN0ID0gX20ucmVjdCwgYm91bmRhcnlWaW9sYXRpb24gPSBfbS5ib3VuZGFyeVZpb2xhdGlvbjtcbiAgICAgICAgaWYgKGJvdW5kYXJ5VmlvbGF0aW9uICYmIHJlcG9zaXRpb24gJiYgIWlzRXhoYXVzdGVkKSB7XG4gICAgICAgICAgICBwb3NpdGlvblBvcG92ZXIoe1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uSW5kZXg6IHBvc2l0aW9uSW5kZXggKyAxLFxuICAgICAgICAgICAgICAgIGNoaWxkUmVjdDogY2hpbGRSZWN0LFxuICAgICAgICAgICAgICAgIHBvcG92ZXJSZWN0OiBwb3BvdmVyUmVjdCxcbiAgICAgICAgICAgICAgICBwYXJlbnRSZWN0OiBwYXJlbnRSZWN0LFxuICAgICAgICAgICAgICAgIGJvdW5kYXJ5UmVjdDogYm91bmRhcnlSZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRvcCA9IHJlY3QudG9wLCBsZWZ0ID0gcmVjdC5sZWZ0LCB3aWR0aCA9IHJlY3Qud2lkdGgsIGhlaWdodCA9IHJlY3QuaGVpZ2h0O1xuICAgICAgICB2YXIgc2hvdWxkTnVkZ2UgPSByZXBvc2l0aW9uICYmICFpc0V4aGF1c3RlZDtcbiAgICAgICAgdmFyIF9vID0gdXRpbF8xLmdldE51ZGdlZFBvcG92ZXJSZWN0KHJlY3QsIGJvdW5kYXJ5UmVjdCwgYm91bmRhcnlJbnNldCksIG51ZGdlZExlZnQgPSBfby5sZWZ0LCBudWRnZWRUb3AgPSBfby50b3A7XG4gICAgICAgIHZhciBmaW5hbFRvcCA9IHRvcDtcbiAgICAgICAgdmFyIGZpbmFsTGVmdCA9IGxlZnQ7XG4gICAgICAgIGlmIChzaG91bGROdWRnZSkge1xuICAgICAgICAgICAgZmluYWxUb3AgPSBudWRnZWRUb3A7XG4gICAgICAgICAgICBmaW5hbExlZnQgPSBudWRnZWRMZWZ0O1xuICAgICAgICB9XG4gICAgICAgIHBvcG92ZXJSZWYuY3VycmVudC5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIiArIChmaW5hbExlZnQgLSBzY291dFJlY3QubGVmdCkgKyBcInB4LCBcIiArIChmaW5hbFRvcCAtIHNjb3V0UmVjdC50b3ApICsgXCJweClcIjtcbiAgICAgICAgdmFyIHBvdGVudGlhbFZpb2xhdGlvbnMgPSB7XG4gICAgICAgICAgICB0b3A6IGJvdW5kYXJ5UmVjdC50b3AgKyBib3VuZGFyeUluc2V0IC0gZmluYWxUb3AsXG4gICAgICAgICAgICBsZWZ0OiBib3VuZGFyeVJlY3QubGVmdCArIGJvdW5kYXJ5SW5zZXQgLSBmaW5hbExlZnQsXG4gICAgICAgICAgICByaWdodDogZmluYWxMZWZ0ICsgd2lkdGggLSBib3VuZGFyeVJlY3QucmlnaHQgKyBib3VuZGFyeUluc2V0LFxuICAgICAgICAgICAgYm90dG9tOiBmaW5hbFRvcCArIGhlaWdodCAtIGJvdW5kYXJ5UmVjdC5ib3R0b20gKyBib3VuZGFyeUluc2V0LFxuICAgICAgICB9O1xuICAgICAgICBvblBvc2l0aW9uUG9wb3Zlcih7XG4gICAgICAgICAgICBjaGlsZFJlY3Q6IGNoaWxkUmVjdCxcbiAgICAgICAgICAgIHBvcG92ZXJSZWN0OiB7XG4gICAgICAgICAgICAgICAgdG9wOiBmaW5hbFRvcCxcbiAgICAgICAgICAgICAgICBsZWZ0OiBmaW5hbExlZnQsXG4gICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHJpZ2h0OiBmaW5hbExlZnQgKyB3aWR0aCxcbiAgICAgICAgICAgICAgICBib3R0b206IGZpbmFsVG9wICsgaGVpZ2h0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhcmVudFJlY3Q6IHBhcmVudFJlY3QsXG4gICAgICAgICAgICBib3VuZGFyeVJlY3Q6IGJvdW5kYXJ5UmVjdCxcbiAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICAgICAgICAgIGFsaWduOiBhbGlnbixcbiAgICAgICAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgICAgICAgICBudWRnZWRUb3A6IG51ZGdlZFRvcCAtIHRvcCxcbiAgICAgICAgICAgIG51ZGdlZExlZnQ6IG51ZGdlZExlZnQgLSBsZWZ0LFxuICAgICAgICAgICAgYm91bmRhcnlJbnNldDogYm91bmRhcnlJbnNldCxcbiAgICAgICAgICAgIHZpb2xhdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB0b3A6IHBvdGVudGlhbFZpb2xhdGlvbnMudG9wIDw9IDAgPyAwIDogcG90ZW50aWFsVmlvbGF0aW9ucy50b3AsXG4gICAgICAgICAgICAgICAgbGVmdDogcG90ZW50aWFsVmlvbGF0aW9ucy5sZWZ0IDw9IDAgPyAwIDogcG90ZW50aWFsVmlvbGF0aW9ucy5sZWZ0LFxuICAgICAgICAgICAgICAgIHJpZ2h0OiBwb3RlbnRpYWxWaW9sYXRpb25zLnJpZ2h0IDw9IDAgPyAwIDogcG90ZW50aWFsVmlvbGF0aW9ucy5yaWdodCxcbiAgICAgICAgICAgICAgICBib3R0b206IHBvdGVudGlhbFZpb2xhdGlvbnMuYm90dG9tIDw9IDAgPyAwIDogcG90ZW50aWFsVmlvbGF0aW9ucy5ib3R0b20sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFzVmlvbGF0aW9uczogcG90ZW50aWFsVmlvbGF0aW9ucy50b3AgPiAwIHx8XG4gICAgICAgICAgICAgICAgcG90ZW50aWFsVmlvbGF0aW9ucy5sZWZ0ID4gMCB8fFxuICAgICAgICAgICAgICAgIHBvdGVudGlhbFZpb2xhdGlvbnMucmlnaHQgPiAwIHx8XG4gICAgICAgICAgICAgICAgcG90ZW50aWFsVmlvbGF0aW9ucy5ib3R0b20gPiAwLFxuICAgICAgICB9KTtcbiAgICB9LCBbXG4gICAgICAgIHBhcmVudEVsZW1lbnQsXG4gICAgICAgIGNoaWxkUmVmLFxuICAgICAgICBwb3BvdmVyUmVmLFxuICAgICAgICBib3VuZGFyeUVsZW1lbnQsXG4gICAgICAgIGNvbnRlbnRMb2NhdGlvbixcbiAgICAgICAgcG9zaXRpb25zLFxuICAgICAgICBhbGlnbixcbiAgICAgICAgcGFkZGluZyxcbiAgICAgICAgcmVwb3NpdGlvbixcbiAgICAgICAgYm91bmRhcnlJbnNldCxcbiAgICAgICAgb25Qb3NpdGlvblBvcG92ZXIsXG4gICAgICAgIGlzT3BlbixcbiAgICBdKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwb3NpdGlvblBvcG92ZXI6IHBvc2l0aW9uUG9wb3ZlcixcbiAgICAgICAgcG9wb3ZlclJlZjogcG9wb3ZlclJlZixcbiAgICAgICAgc2NvdXRSZWY6IHNjb3V0UmVmLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VQb3BvdmVyID0gdXNlUG9wb3Zlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZVBvcG92ZXIuanMubWFwIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCb3VuZGFyeVZpb2xhdGlvbnMsIFBvc2l0aW9uUG9wb3ZlciwgVXNlUG9wb3ZlclByb3BzLCBVc2VQb3BvdmVyUmVzdWx0IH0gZnJvbSAnLic7XG5pbXBvcnQgeyBDb25zdGFudHMsIGdldE5ld1BvcG92ZXJSZWN0LCBnZXROdWRnZWRQb3BvdmVyUmVjdCB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyB1c2VFbGVtZW50UmVmIH0gZnJvbSAnLi91c2VFbGVtZW50UmVmJztcblxuZXhwb3J0IGNvbnN0IHVzZVBvcG92ZXIgPSAoe1xuICBpc09wZW4sXG4gIGNoaWxkUmVmLFxuICBwb3NpdGlvbnMsXG4gIGNvbnRhaW5lckNsYXNzTmFtZSxcbiAgcGFyZW50RWxlbWVudCxcbiAgY29udGVudExvY2F0aW9uLFxuICBhbGlnbixcbiAgcGFkZGluZyxcbiAgcmVwb3NpdGlvbixcbiAgYm91bmRhcnlJbnNldCxcbiAgYm91bmRhcnlFbGVtZW50LFxuICBvblBvc2l0aW9uUG9wb3Zlcixcbn06IFVzZVBvcG92ZXJQcm9wcyk6IFVzZVBvcG92ZXJSZXN1bHQgPT4ge1xuICBjb25zdCBwb3BvdmVyUmVmID0gdXNlRWxlbWVudFJlZihjb250YWluZXJDbGFzc05hbWUsIHtcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAgIHRvcDogJzBweCcsXG4gICAgbGVmdDogJzBweCcsXG4gIH0pO1xuXG4gIGNvbnN0IHNjb3V0UmVmID0gdXNlRWxlbWVudFJlZigncmVhY3QtdGlueS1wb3BvdmVyLXNjb3V0Jywge1xuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIHRvcDogJzBweCcsXG4gICAgbGVmdDogJzBweCcsXG4gICAgd2lkdGg6ICcwcHgnLFxuICAgIGhlaWdodDogJzBweCcsXG4gICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gIH0pO1xuXG4gIGNvbnN0IHBvc2l0aW9uUG9wb3ZlciA9IHVzZUNhbGxiYWNrPFBvc2l0aW9uUG9wb3Zlcj4oXG4gICAgKHtcbiAgICAgIHBvc2l0aW9uSW5kZXggPSAwLFxuICAgICAgcGFyZW50UmVjdCA9IHBhcmVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICBjaGlsZFJlY3QgPSBjaGlsZFJlZj8uY3VycmVudD8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICBzY291dFJlY3QgPSBzY291dFJlZj8uY3VycmVudD8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICBwb3BvdmVyUmVjdCA9IHBvcG92ZXJSZWYuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIGJvdW5kYXJ5UmVjdCA9IGJvdW5kYXJ5RWxlbWVudCA9PT0gcGFyZW50RWxlbWVudFxuICAgICAgICA/IHBhcmVudFJlY3RcbiAgICAgICAgOiBib3VuZGFyeUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgfSA9IHt9KSA9PiB7XG4gICAgICBpZiAoIWNoaWxkUmVjdCB8fCAhcGFyZW50UmVjdCB8fCAhaXNPcGVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbnRlbnRMb2NhdGlvbikge1xuICAgICAgICBjb25zdCB7IHRvcDogaW5wdXRUb3AsIGxlZnQ6IGlucHV0TGVmdCB9ID1cbiAgICAgICAgICB0eXBlb2YgY29udGVudExvY2F0aW9uID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IGNvbnRlbnRMb2NhdGlvbih7XG4gICAgICAgICAgICAgICAgY2hpbGRSZWN0LFxuICAgICAgICAgICAgICAgIHBvcG92ZXJSZWN0LFxuICAgICAgICAgICAgICAgIHBhcmVudFJlY3QsXG4gICAgICAgICAgICAgICAgYm91bmRhcnlSZWN0LFxuICAgICAgICAgICAgICAgIHBhZGRpbmcsXG4gICAgICAgICAgICAgICAgbnVkZ2VkVG9wOiAwLFxuICAgICAgICAgICAgICAgIG51ZGdlZExlZnQ6IDAsXG4gICAgICAgICAgICAgICAgYm91bmRhcnlJbnNldCxcbiAgICAgICAgICAgICAgICB2aW9sYXRpb25zOiBDb25zdGFudHMuRU1QVFlfQ0xJRU5UX1JFQ1QsXG4gICAgICAgICAgICAgICAgaGFzVmlvbGF0aW9uczogZmFsc2UsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICA6IGNvbnRlbnRMb2NhdGlvbjtcblxuICAgICAgICBjb25zdCBsZWZ0ID0gcGFyZW50UmVjdC5sZWZ0ICsgaW5wdXRMZWZ0O1xuICAgICAgICBjb25zdCB0b3AgPSBwYXJlbnRSZWN0LnRvcCArIGlucHV0VG9wO1xuXG4gICAgICAgIHBvcG92ZXJSZWYuY3VycmVudC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7bGVmdCAtIHNjb3V0UmVjdC5sZWZ0fXB4LCAke1xuICAgICAgICAgIHRvcCAtIHNjb3V0UmVjdC50b3BcbiAgICAgICAgfXB4KWA7XG5cbiAgICAgICAgb25Qb3NpdGlvblBvcG92ZXIoe1xuICAgICAgICAgIGNoaWxkUmVjdCxcbiAgICAgICAgICBwb3BvdmVyUmVjdCxcbiAgICAgICAgICBwYXJlbnRSZWN0LFxuICAgICAgICAgIGJvdW5kYXJ5UmVjdCxcbiAgICAgICAgICBwYWRkaW5nLFxuICAgICAgICAgIG51ZGdlZFRvcDogMCxcbiAgICAgICAgICBudWRnZWRMZWZ0OiAwLFxuICAgICAgICAgIGJvdW5kYXJ5SW5zZXQsXG4gICAgICAgICAgdmlvbGF0aW9uczogQ29uc3RhbnRzLkVNUFRZX0NMSUVOVF9SRUNULFxuICAgICAgICAgIGhhc1Zpb2xhdGlvbnM6IGZhbHNlLFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGlzRXhoYXVzdGVkID0gcG9zaXRpb25JbmRleCA9PT0gcG9zaXRpb25zLmxlbmd0aDtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gaXNFeGhhdXN0ZWQgPyBwb3NpdGlvbnNbMF0gOiBwb3NpdGlvbnNbcG9zaXRpb25JbmRleF07XG5cbiAgICAgIGNvbnN0IHsgcmVjdCwgYm91bmRhcnlWaW9sYXRpb24gfSA9IGdldE5ld1BvcG92ZXJSZWN0KFxuICAgICAgICB7XG4gICAgICAgICAgY2hpbGRSZWN0LFxuICAgICAgICAgIHBvcG92ZXJSZWN0LFxuICAgICAgICAgIGJvdW5kYXJ5UmVjdCxcbiAgICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgICBhbGlnbixcbiAgICAgICAgICBwYWRkaW5nLFxuICAgICAgICAgIHJlcG9zaXRpb24sXG4gICAgICAgIH0sXG4gICAgICAgIGJvdW5kYXJ5SW5zZXQsXG4gICAgICApO1xuXG4gICAgICBpZiAoYm91bmRhcnlWaW9sYXRpb24gJiYgcmVwb3NpdGlvbiAmJiAhaXNFeGhhdXN0ZWQpIHtcbiAgICAgICAgcG9zaXRpb25Qb3BvdmVyKHtcbiAgICAgICAgICBwb3NpdGlvbkluZGV4OiBwb3NpdGlvbkluZGV4ICsgMSxcbiAgICAgICAgICBjaGlsZFJlY3QsXG4gICAgICAgICAgcG9wb3ZlclJlY3QsXG4gICAgICAgICAgcGFyZW50UmVjdCxcbiAgICAgICAgICBib3VuZGFyeVJlY3QsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHsgdG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0IH0gPSByZWN0O1xuICAgICAgY29uc3Qgc2hvdWxkTnVkZ2UgPSByZXBvc2l0aW9uICYmICFpc0V4aGF1c3RlZDtcbiAgICAgIGNvbnN0IHsgbGVmdDogbnVkZ2VkTGVmdCwgdG9wOiBudWRnZWRUb3AgfSA9IGdldE51ZGdlZFBvcG92ZXJSZWN0KFxuICAgICAgICByZWN0LFxuICAgICAgICBib3VuZGFyeVJlY3QsXG4gICAgICAgIGJvdW5kYXJ5SW5zZXQsXG4gICAgICApO1xuXG4gICAgICBsZXQgZmluYWxUb3AgPSB0b3A7XG4gICAgICBsZXQgZmluYWxMZWZ0ID0gbGVmdDtcblxuICAgICAgaWYgKHNob3VsZE51ZGdlKSB7XG4gICAgICAgIGZpbmFsVG9wID0gbnVkZ2VkVG9wO1xuICAgICAgICBmaW5hbExlZnQgPSBudWRnZWRMZWZ0O1xuICAgICAgfVxuICAgICAgcG9wb3ZlclJlZi5jdXJyZW50LnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHtmaW5hbExlZnQgLSBzY291dFJlY3QubGVmdH1weCwgJHtcbiAgICAgICAgZmluYWxUb3AgLSBzY291dFJlY3QudG9wXG4gICAgICB9cHgpYDtcblxuICAgICAgY29uc3QgcG90ZW50aWFsVmlvbGF0aW9uczogQm91bmRhcnlWaW9sYXRpb25zID0ge1xuICAgICAgICB0b3A6IGJvdW5kYXJ5UmVjdC50b3AgKyBib3VuZGFyeUluc2V0IC0gZmluYWxUb3AsXG4gICAgICAgIGxlZnQ6IGJvdW5kYXJ5UmVjdC5sZWZ0ICsgYm91bmRhcnlJbnNldCAtIGZpbmFsTGVmdCxcbiAgICAgICAgcmlnaHQ6IGZpbmFsTGVmdCArIHdpZHRoIC0gYm91bmRhcnlSZWN0LnJpZ2h0ICsgYm91bmRhcnlJbnNldCxcbiAgICAgICAgYm90dG9tOiBmaW5hbFRvcCArIGhlaWdodCAtIGJvdW5kYXJ5UmVjdC5ib3R0b20gKyBib3VuZGFyeUluc2V0LFxuICAgICAgfTtcblxuICAgICAgb25Qb3NpdGlvblBvcG92ZXIoe1xuICAgICAgICBjaGlsZFJlY3QsXG4gICAgICAgIHBvcG92ZXJSZWN0OiB7XG4gICAgICAgICAgdG9wOiBmaW5hbFRvcCxcbiAgICAgICAgICBsZWZ0OiBmaW5hbExlZnQsXG4gICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgIHJpZ2h0OiBmaW5hbExlZnQgKyB3aWR0aCxcbiAgICAgICAgICBib3R0b206IGZpbmFsVG9wICsgaGVpZ2h0LFxuICAgICAgICB9LFxuICAgICAgICBwYXJlbnRSZWN0LFxuICAgICAgICBib3VuZGFyeVJlY3QsXG4gICAgICAgIHBvc2l0aW9uLFxuICAgICAgICBhbGlnbixcbiAgICAgICAgcGFkZGluZyxcbiAgICAgICAgbnVkZ2VkVG9wOiBudWRnZWRUb3AgLSB0b3AsXG4gICAgICAgIG51ZGdlZExlZnQ6IG51ZGdlZExlZnQgLSBsZWZ0LFxuICAgICAgICBib3VuZGFyeUluc2V0LFxuICAgICAgICB2aW9sYXRpb25zOiB7XG4gICAgICAgICAgdG9wOiBwb3RlbnRpYWxWaW9sYXRpb25zLnRvcCA8PSAwID8gMCA6IHBvdGVudGlhbFZpb2xhdGlvbnMudG9wLFxuICAgICAgICAgIGxlZnQ6IHBvdGVudGlhbFZpb2xhdGlvbnMubGVmdCA8PSAwID8gMCA6IHBvdGVudGlhbFZpb2xhdGlvbnMubGVmdCxcbiAgICAgICAgICByaWdodDogcG90ZW50aWFsVmlvbGF0aW9ucy5yaWdodCA8PSAwID8gMCA6IHBvdGVudGlhbFZpb2xhdGlvbnMucmlnaHQsXG4gICAgICAgICAgYm90dG9tOiBwb3RlbnRpYWxWaW9sYXRpb25zLmJvdHRvbSA8PSAwID8gMCA6IHBvdGVudGlhbFZpb2xhdGlvbnMuYm90dG9tLFxuICAgICAgICB9LFxuICAgICAgICBoYXNWaW9sYXRpb25zOlxuICAgICAgICAgIHBvdGVudGlhbFZpb2xhdGlvbnMudG9wID4gMCB8fFxuICAgICAgICAgIHBvdGVudGlhbFZpb2xhdGlvbnMubGVmdCA+IDAgfHxcbiAgICAgICAgICBwb3RlbnRpYWxWaW9sYXRpb25zLnJpZ2h0ID4gMCB8fFxuICAgICAgICAgIHBvdGVudGlhbFZpb2xhdGlvbnMuYm90dG9tID4gMCxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW1xuICAgICAgcGFyZW50RWxlbWVudCxcbiAgICAgIGNoaWxkUmVmLFxuICAgICAgcG9wb3ZlclJlZixcbiAgICAgIGJvdW5kYXJ5RWxlbWVudCxcbiAgICAgIGNvbnRlbnRMb2NhdGlvbixcbiAgICAgIHBvc2l0aW9ucyxcbiAgICAgIGFsaWduLFxuICAgICAgcGFkZGluZyxcbiAgICAgIHJlcG9zaXRpb24sXG4gICAgICBib3VuZGFyeUluc2V0LFxuICAgICAgb25Qb3NpdGlvblBvcG92ZXIsXG4gICAgICBpc09wZW4sXG4gICAgXSxcbiAgKTtcblxuICByZXR1cm4ge1xuICAgIHBvc2l0aW9uUG9wb3ZlcixcbiAgICBwb3BvdmVyUmVmLFxuICAgIHNjb3V0UmVmLFxuICB9O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VFbGVtZW50UmVmID0gdm9pZCAwO1xudmFyIHJlYWN0XzEgPSByZXF1aXJlKFwicmVhY3RcIik7XG52YXIgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbnZhciB1c2VFbGVtZW50UmVmID0gZnVuY3Rpb24gKGNvbnRhaW5lckNsYXNzTmFtZSwgY29udGFpbmVyU3R5bGUpIHtcbiAgICB2YXIgZWxlbWVudCA9IHJlYWN0XzEudXNlTWVtbyhmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsXzEuY3JlYXRlQ29udGFpbmVyKGNvbnRhaW5lclN0eWxlLCBjb250YWluZXJDbGFzc05hbWUpOyB9LCBbY29udGFpbmVyQ2xhc3NOYW1lLCBjb250YWluZXJTdHlsZV0pO1xuICAgIHJldHVybiByZWFjdF8xLnVzZVJlZihlbGVtZW50KTtcbn07XG5leHBvcnRzLnVzZUVsZW1lbnRSZWYgPSB1c2VFbGVtZW50UmVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRWxlbWVudFJlZi5qcy5tYXAiLCJpbXBvcnQgeyB1c2VSZWYsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVDb250YWluZXIgfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgY29uc3QgdXNlRWxlbWVudFJlZiA9IChcbiAgY29udGFpbmVyQ2xhc3NOYW1lPzogc3RyaW5nLFxuICBjb250YWluZXJTdHlsZT86IFBhcnRpYWw8Q1NTU3R5bGVEZWNsYXJhdGlvbj4sXG4pID0+IHtcbiAgY29uc3QgZWxlbWVudCA9IHVzZU1lbW8oXG4gICAgKCkgPT4gY3JlYXRlQ29udGFpbmVyKGNvbnRhaW5lclN0eWxlLCBjb250YWluZXJDbGFzc05hbWUpLFxuICAgIFtjb250YWluZXJDbGFzc05hbWUsIGNvbnRhaW5lclN0eWxlXSxcbiAgKTtcblxuICByZXR1cm4gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihlbGVtZW50KTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlTWVtb2l6ZWRBcnJheSA9IHZvaWQgMDtcbnZhciByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xudmFyIHVzZU1lbW9pemVkQXJyYXkgPSBmdW5jdGlvbiAoZXh0ZXJuYWxBcnJheSkge1xuICAgIHZhciBwcmV2QXJyYXlSZWYgPSByZWFjdF8xLnVzZVJlZihleHRlcm5hbEFycmF5KTtcbiAgICB2YXIgYXJyYXkgPSByZWFjdF8xLnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAocHJldkFycmF5UmVmLmN1cnJlbnQgPT09IGV4dGVybmFsQXJyYXkpXG4gICAgICAgICAgICByZXR1cm4gcHJldkFycmF5UmVmLmN1cnJlbnQ7XG4gICAgICAgIGlmIChwcmV2QXJyYXlSZWYuY3VycmVudC5sZW5ndGggIT09IGV4dGVybmFsQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgICBwcmV2QXJyYXlSZWYuY3VycmVudCA9IGV4dGVybmFsQXJyYXk7XG4gICAgICAgICAgICByZXR1cm4gZXh0ZXJuYWxBcnJheTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dGVybmFsQXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChleHRlcm5hbEFycmF5W2ldICE9PSBwcmV2QXJyYXlSZWYuY3VycmVudFtpXSkge1xuICAgICAgICAgICAgICAgIHByZXZBcnJheVJlZi5jdXJyZW50ID0gZXh0ZXJuYWxBcnJheTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXh0ZXJuYWxBcnJheTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJldkFycmF5UmVmLmN1cnJlbnQ7XG4gICAgfSwgW2V4dGVybmFsQXJyYXldKTtcbiAgICByZXR1cm4gYXJyYXk7XG59O1xuZXhwb3J0cy51c2VNZW1vaXplZEFycmF5ID0gdXNlTWVtb2l6ZWRBcnJheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZU1lbW9pemVkQXJyYXkuanMubWFwIiwiaW1wb3J0IHsgdXNlUmVmLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgY29uc3QgdXNlTWVtb2l6ZWRBcnJheSA9IDxUIGV4dGVuZHMgbnVtYmVyIHwgc3RyaW5nPihleHRlcm5hbEFycmF5OiBUW10pID0+IHtcbiAgY29uc3QgcHJldkFycmF5UmVmID0gdXNlUmVmKGV4dGVybmFsQXJyYXkpO1xuICBjb25zdCBhcnJheSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChwcmV2QXJyYXlSZWYuY3VycmVudCA9PT0gZXh0ZXJuYWxBcnJheSkgcmV0dXJuIHByZXZBcnJheVJlZi5jdXJyZW50O1xuXG4gICAgaWYgKHByZXZBcnJheVJlZi5jdXJyZW50Lmxlbmd0aCAhPT0gZXh0ZXJuYWxBcnJheS5sZW5ndGgpIHtcbiAgICAgIHByZXZBcnJheVJlZi5jdXJyZW50ID0gZXh0ZXJuYWxBcnJheTtcbiAgICAgIHJldHVybiBleHRlcm5hbEFycmF5O1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXh0ZXJuYWxBcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGV4dGVybmFsQXJyYXlbaV0gIT09IHByZXZBcnJheVJlZi5jdXJyZW50W2ldKSB7XG4gICAgICAgIHByZXZBcnJheVJlZi5jdXJyZW50ID0gZXh0ZXJuYWxBcnJheTtcbiAgICAgICAgcmV0dXJuIGV4dGVybmFsQXJyYXk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZXZBcnJheVJlZi5jdXJyZW50O1xuICB9LCBbZXh0ZXJuYWxBcnJheV0pO1xuXG4gIHJldHVybiBhcnJheTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUFycm93Q29udGFpbmVyID0gdm9pZCAwO1xudmFyIHJlYWN0XzEgPSByZXF1aXJlKFwicmVhY3RcIik7XG52YXIgdXNlQXJyb3dDb250YWluZXIgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgY2hpbGRSZWN0ID0gX2EuY2hpbGRSZWN0LCBwb3BvdmVyUmVjdCA9IF9hLnBvcG92ZXJSZWN0LCBwb3NpdGlvbiA9IF9hLnBvc2l0aW9uLCBhcnJvd1NpemUgPSBfYS5hcnJvd1NpemUsIGFycm93Q29sb3IgPSBfYS5hcnJvd0NvbG9yO1xuICAgIHZhciBhcnJvd0NvbnRhaW5lclN0eWxlID0gcmVhY3RfMS51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICh7XG4gICAgICAgICAgICBwYWRkaW5nOiBhcnJvd1NpemUsXG4gICAgICAgIH0pO1xuICAgIH0sIFthcnJvd1NpemVdKTtcbiAgICB2YXIgYXJyb3dTdHlsZSA9IHJlYWN0XzEudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoX19hc3NpZ24oeyBwb3NpdGlvbjogJ2Fic29sdXRlJyB9LCAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFycm93V2lkdGggPSBhcnJvd1NpemUgKiAyO1xuICAgICAgICAgICAgdmFyIHRvcCA9IGNoaWxkUmVjdC50b3AgLSBwb3BvdmVyUmVjdC50b3AgKyBjaGlsZFJlY3QuaGVpZ2h0IC8gMiAtIGFycm93V2lkdGggLyAyO1xuICAgICAgICAgICAgdmFyIGxlZnQgPSBjaGlsZFJlY3QubGVmdCAtIHBvcG92ZXJSZWN0LmxlZnQgKyBjaGlsZFJlY3Qud2lkdGggLyAyIC0gYXJyb3dXaWR0aCAvIDI7XG4gICAgICAgICAgICB2YXIgbG93ZXJCb3VuZCA9IGFycm93U2l6ZTtcbiAgICAgICAgICAgIHZhciBsZWZ0VXBwZXJCb3VuZCA9IHBvcG92ZXJSZWN0LndpZHRoIC0gYXJyb3dTaXplO1xuICAgICAgICAgICAgdmFyIHRvcFVwcGVyQm91bmQgPSBwb3BvdmVyUmVjdC5oZWlnaHQgLSBhcnJvd1NpemU7XG4gICAgICAgICAgICBsZWZ0ID0gbGVmdCA8IGxvd2VyQm91bmQgPyBsb3dlckJvdW5kIDogbGVmdDtcbiAgICAgICAgICAgIGxlZnQgPSBsZWZ0ICsgYXJyb3dXaWR0aCA+IGxlZnRVcHBlckJvdW5kID8gbGVmdFVwcGVyQm91bmQgLSBhcnJvd1dpZHRoIDogbGVmdDtcbiAgICAgICAgICAgIHRvcCA9IHRvcCA8IGxvd2VyQm91bmQgPyBsb3dlckJvdW5kIDogdG9wO1xuICAgICAgICAgICAgdG9wID0gdG9wICsgYXJyb3dXaWR0aCA+IHRvcFVwcGVyQm91bmQgPyB0b3BVcHBlckJvdW5kIC0gYXJyb3dXaWR0aCA6IHRvcDtcbiAgICAgICAgICAgIHRvcCA9IE51bWJlci5pc05hTih0b3ApID8gMCA6IHRvcDtcbiAgICAgICAgICAgIGxlZnQgPSBOdW1iZXIuaXNOYU4obGVmdCkgPyAwIDogbGVmdDtcbiAgICAgICAgICAgIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJUb3A6IGFycm93U2l6ZSArIFwicHggc29saWQgdHJhbnNwYXJlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckJvdHRvbTogYXJyb3dTaXplICsgXCJweCBzb2xpZCB0cmFuc3BhcmVudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmlnaHQ6IGFycm93U2l6ZSArIFwicHggc29saWQgXCIgKyBhcnJvd0NvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogdG9wLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyVG9wOiBhcnJvd1NpemUgKyBcInB4IHNvbGlkIHRyYW5zcGFyZW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJCb3R0b206IGFycm93U2l6ZSArIFwicHggc29saWQgdHJhbnNwYXJlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckxlZnQ6IGFycm93U2l6ZSArIFwicHggc29saWQgXCIgKyBhcnJvd0NvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyTGVmdDogYXJyb3dTaXplICsgXCJweCBzb2xpZCB0cmFuc3BhcmVudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmlnaHQ6IGFycm93U2l6ZSArIFwicHggc29saWQgdHJhbnNwYXJlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckJvdHRvbTogYXJyb3dTaXplICsgXCJweCBzb2xpZCBcIiArIGFycm93Q29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJMZWZ0OiBhcnJvd1NpemUgKyBcInB4IHNvbGlkIHRyYW5zcGFyZW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJSaWdodDogYXJyb3dTaXplICsgXCJweCBzb2xpZCB0cmFuc3BhcmVudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyVG9wOiBhcnJvd1NpemUgKyBcInB4IHNvbGlkIFwiICsgYXJyb3dDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSgpKSk7XG4gICAgfSwgW1xuICAgICAgICBhcnJvd0NvbG9yLFxuICAgICAgICBhcnJvd1NpemUsXG4gICAgICAgIGNoaWxkUmVjdC5oZWlnaHQsXG4gICAgICAgIGNoaWxkUmVjdC5sZWZ0LFxuICAgICAgICBjaGlsZFJlY3QudG9wLFxuICAgICAgICBjaGlsZFJlY3Qud2lkdGgsXG4gICAgICAgIHBvcG92ZXJSZWN0LmhlaWdodCxcbiAgICAgICAgcG9wb3ZlclJlY3QubGVmdCxcbiAgICAgICAgcG9wb3ZlclJlY3QudG9wLFxuICAgICAgICBwb3BvdmVyUmVjdC53aWR0aCxcbiAgICAgICAgcG9zaXRpb24sXG4gICAgXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXJyb3dDb250YWluZXJTdHlsZTogYXJyb3dDb250YWluZXJTdHlsZSxcbiAgICAgICAgYXJyb3dTdHlsZTogYXJyb3dTdHlsZSxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlQXJyb3dDb250YWluZXIgPSB1c2VBcnJvd0NvbnRhaW5lcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUFycm93Q29udGFpbmVyLmpzLm1hcCIsImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBVc2VBcnJvd0NvbnRhaW5lclByb3BzIH0gZnJvbSAnLic7XG5cbmV4cG9ydCBjb25zdCB1c2VBcnJvd0NvbnRhaW5lciA9ICh7XG4gIGNoaWxkUmVjdCxcbiAgcG9wb3ZlclJlY3QsXG4gIHBvc2l0aW9uLFxuICBhcnJvd1NpemUsXG4gIGFycm93Q29sb3IsXG59OiBVc2VBcnJvd0NvbnRhaW5lclByb3BzKSA9PiB7XG4gIGNvbnN0IGFycm93Q29udGFpbmVyU3R5bGUgPSB1c2VNZW1vKFxuICAgICgpID0+XG4gICAgICAoe1xuICAgICAgICBwYWRkaW5nOiBhcnJvd1NpemUsXG4gICAgICB9IGFzIFJlYWN0LkNTU1Byb3BlcnRpZXMpLFxuICAgIFthcnJvd1NpemVdLFxuICApO1xuXG4gIGNvbnN0IGFycm93U3R5bGUgPSB1c2VNZW1vKFxuICAgICgpID0+XG4gICAgICAoe1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgLi4uKCgpOiBSZWFjdC5DU1NQcm9wZXJ0aWVzID0+IHtcbiAgICAgICAgICBjb25zdCBhcnJvd1dpZHRoID0gYXJyb3dTaXplICogMjtcbiAgICAgICAgICBsZXQgdG9wID0gY2hpbGRSZWN0LnRvcCAtIHBvcG92ZXJSZWN0LnRvcCArIGNoaWxkUmVjdC5oZWlnaHQgLyAyIC0gYXJyb3dXaWR0aCAvIDI7XG4gICAgICAgICAgbGV0IGxlZnQgPSBjaGlsZFJlY3QubGVmdCAtIHBvcG92ZXJSZWN0LmxlZnQgKyBjaGlsZFJlY3Qud2lkdGggLyAyIC0gYXJyb3dXaWR0aCAvIDI7XG5cbiAgICAgICAgICBjb25zdCBsb3dlckJvdW5kID0gYXJyb3dTaXplO1xuICAgICAgICAgIGNvbnN0IGxlZnRVcHBlckJvdW5kID0gcG9wb3ZlclJlY3Qud2lkdGggLSBhcnJvd1NpemU7XG4gICAgICAgICAgY29uc3QgdG9wVXBwZXJCb3VuZCA9IHBvcG92ZXJSZWN0LmhlaWdodCAtIGFycm93U2l6ZTtcblxuICAgICAgICAgIGxlZnQgPSBsZWZ0IDwgbG93ZXJCb3VuZCA/IGxvd2VyQm91bmQgOiBsZWZ0O1xuICAgICAgICAgIGxlZnQgPSBsZWZ0ICsgYXJyb3dXaWR0aCA+IGxlZnRVcHBlckJvdW5kID8gbGVmdFVwcGVyQm91bmQgLSBhcnJvd1dpZHRoIDogbGVmdDtcbiAgICAgICAgICB0b3AgPSB0b3AgPCBsb3dlckJvdW5kID8gbG93ZXJCb3VuZCA6IHRvcDtcbiAgICAgICAgICB0b3AgPSB0b3AgKyBhcnJvd1dpZHRoID4gdG9wVXBwZXJCb3VuZCA/IHRvcFVwcGVyQm91bmQgLSBhcnJvd1dpZHRoIDogdG9wO1xuXG4gICAgICAgICAgdG9wID0gTnVtYmVyLmlzTmFOKHRvcCkgPyAwIDogdG9wO1xuICAgICAgICAgIGxlZnQgPSBOdW1iZXIuaXNOYU4obGVmdCkgPyAwIDogbGVmdDtcblxuICAgICAgICAgIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib3JkZXJUb3A6IGAke2Fycm93U2l6ZX1weCBzb2xpZCB0cmFuc3BhcmVudGAsXG4gICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tOiBgJHthcnJvd1NpemV9cHggc29saWQgdHJhbnNwYXJlbnRgLFxuICAgICAgICAgICAgICAgIGJvcmRlclJpZ2h0OiBgJHthcnJvd1NpemV9cHggc29saWQgJHthcnJvd0NvbG9yfWAsXG4gICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib3JkZXJUb3A6IGAke2Fycm93U2l6ZX1weCBzb2xpZCB0cmFuc3BhcmVudGAsXG4gICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tOiBgJHthcnJvd1NpemV9cHggc29saWQgdHJhbnNwYXJlbnRgLFxuICAgICAgICAgICAgICAgIGJvcmRlckxlZnQ6IGAke2Fycm93U2l6ZX1weCBzb2xpZCAke2Fycm93Q29sb3J9YCxcbiAgICAgICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvcmRlckxlZnQ6IGAke2Fycm93U2l6ZX1weCBzb2xpZCB0cmFuc3BhcmVudGAsXG4gICAgICAgICAgICAgICAgYm9yZGVyUmlnaHQ6IGAke2Fycm93U2l6ZX1weCBzb2xpZCB0cmFuc3BhcmVudGAsXG4gICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tOiBgJHthcnJvd1NpemV9cHggc29saWQgJHthcnJvd0NvbG9yfWAsXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvcmRlckxlZnQ6IGAke2Fycm93U2l6ZX1weCBzb2xpZCB0cmFuc3BhcmVudGAsXG4gICAgICAgICAgICAgICAgYm9yZGVyUmlnaHQ6IGAke2Fycm93U2l6ZX1weCBzb2xpZCB0cmFuc3BhcmVudGAsXG4gICAgICAgICAgICAgICAgYm9yZGVyVG9wOiBgJHthcnJvd1NpemV9cHggc29saWQgJHthcnJvd0NvbG9yfWAsXG4gICAgICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSkoKSxcbiAgICAgIH0gYXMgUmVhY3QuQ1NTUHJvcGVydGllcyksXG4gICAgW1xuICAgICAgYXJyb3dDb2xvcixcbiAgICAgIGFycm93U2l6ZSxcbiAgICAgIGNoaWxkUmVjdC5oZWlnaHQsXG4gICAgICBjaGlsZFJlY3QubGVmdCxcbiAgICAgIGNoaWxkUmVjdC50b3AsXG4gICAgICBjaGlsZFJlY3Qud2lkdGgsXG4gICAgICBwb3BvdmVyUmVjdC5oZWlnaHQsXG4gICAgICBwb3BvdmVyUmVjdC5sZWZ0LFxuICAgICAgcG9wb3ZlclJlY3QudG9wLFxuICAgICAgcG9wb3ZlclJlY3Qud2lkdGgsXG4gICAgICBwb3NpdGlvbixcbiAgICBdLFxuICApO1xuXG4gIHJldHVybiB7XG4gICAgYXJyb3dDb250YWluZXJTdHlsZSxcbiAgICBhcnJvd1N0eWxlLFxuICB9O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXJyb3dDb250YWluZXIgPSB2b2lkIDA7XG52YXIganN4X3J1bnRpbWVfMSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbnZhciByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xudmFyIHVzZUFycm93Q29udGFpbmVyXzEgPSByZXF1aXJlKFwiLi91c2VBcnJvd0NvbnRhaW5lclwiKTtcbnZhciBBcnJvd0NvbnRhaW5lciA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBjaGlsZFJlY3QgPSBfYS5jaGlsZFJlY3QsIHBvcG92ZXJSZWN0ID0gX2EucG9wb3ZlclJlY3QsIHBvc2l0aW9uID0gX2EucG9zaXRpb24sIGFycm93Q29sb3IgPSBfYS5hcnJvd0NvbG9yLCBhcnJvd1NpemUgPSBfYS5hcnJvd1NpemUsIGFycm93Q2xhc3NOYW1lID0gX2EuYXJyb3dDbGFzc05hbWUsIGV4dGVybmFsQXJyb3dTdHlsZSA9IF9hLmFycm93U3R5bGUsIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgZXh0ZXJuYWxBcnJvd0NvbnRhaW5lclN0eWxlID0gX2Euc3R5bGU7XG4gICAgdmFyIF9iID0gdXNlQXJyb3dDb250YWluZXJfMS51c2VBcnJvd0NvbnRhaW5lcih7XG4gICAgICAgIGNoaWxkUmVjdDogY2hpbGRSZWN0LFxuICAgICAgICBwb3BvdmVyUmVjdDogcG9wb3ZlclJlY3QsXG4gICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICAgICAgYXJyb3dDb2xvcjogYXJyb3dDb2xvcixcbiAgICAgICAgYXJyb3dTaXplOiBhcnJvd1NpemUsXG4gICAgfSksIGFycm93Q29udGFpbmVyU3R5bGUgPSBfYi5hcnJvd0NvbnRhaW5lclN0eWxlLCBhcnJvd1N0eWxlID0gX2IuYXJyb3dTdHlsZTtcbiAgICB2YXIgbWVyZ2VkQ29udGFpbmVyU3R5bGUgPSByZWFjdF8xLnVzZU1lbW8oZnVuY3Rpb24gKCkgeyByZXR1cm4gKF9fYXNzaWduKF9fYXNzaWduKHt9LCBhcnJvd0NvbnRhaW5lclN0eWxlKSwgZXh0ZXJuYWxBcnJvd0NvbnRhaW5lclN0eWxlKSk7IH0sIFthcnJvd0NvbnRhaW5lclN0eWxlLCBleHRlcm5hbEFycm93Q29udGFpbmVyU3R5bGVdKTtcbiAgICB2YXIgbWVyZ2VkQXJyb3dTdHlsZSA9IHJlYWN0XzEudXNlTWVtbyhmdW5jdGlvbiAoKSB7IHJldHVybiAoX19hc3NpZ24oX19hc3NpZ24oe30sIGFycm93U3R5bGUpLCBleHRlcm5hbEFycm93U3R5bGUpKTsgfSwgW2Fycm93U3R5bGUsIGV4dGVybmFsQXJyb3dTdHlsZV0pO1xuICAgIHJldHVybiAoanN4X3J1bnRpbWVfMS5qc3hzKFwiZGl2XCIsIF9fYXNzaWduKHsgY2xhc3NOYW1lOiBjbGFzc05hbWUsIHN0eWxlOiBtZXJnZWRDb250YWluZXJTdHlsZSB9LCB7IGNoaWxkcmVuOiBbanN4X3J1bnRpbWVfMS5qc3goXCJkaXZcIiwgeyBzdHlsZTogbWVyZ2VkQXJyb3dTdHlsZSwgY2xhc3NOYW1lOiBhcnJvd0NsYXNzTmFtZSB9LCB2b2lkIDApLCBjaGlsZHJlbl0gfSksIHZvaWQgMCkpO1xufTtcbmV4cG9ydHMuQXJyb3dDb250YWluZXIgPSBBcnJvd0NvbnRhaW5lcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFycm93Q29udGFpbmVyLmpzLm1hcCIsImltcG9ydCB7IHVzZU1lbW8sIEZDIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQXJyb3dDb250YWluZXJQcm9wcyB9IGZyb20gJy4nO1xuaW1wb3J0IHsgdXNlQXJyb3dDb250YWluZXIgfSBmcm9tICcuL3VzZUFycm93Q29udGFpbmVyJztcblxuZXhwb3J0IGNvbnN0IEFycm93Q29udGFpbmVyOiBGQzxBcnJvd0NvbnRhaW5lclByb3BzPiA9ICh7XG4gIGNoaWxkUmVjdCxcbiAgcG9wb3ZlclJlY3QsXG4gIHBvc2l0aW9uLFxuICBhcnJvd0NvbG9yLFxuICBhcnJvd1NpemUsXG4gIGFycm93Q2xhc3NOYW1lLFxuICBhcnJvd1N0eWxlOiBleHRlcm5hbEFycm93U3R5bGUsXG4gIGNsYXNzTmFtZSxcbiAgY2hpbGRyZW4sXG4gIHN0eWxlOiBleHRlcm5hbEFycm93Q29udGFpbmVyU3R5bGUsXG59KSA9PiB7XG4gIGNvbnN0IHsgYXJyb3dDb250YWluZXJTdHlsZSwgYXJyb3dTdHlsZSB9ID0gdXNlQXJyb3dDb250YWluZXIoe1xuICAgIGNoaWxkUmVjdCxcbiAgICBwb3BvdmVyUmVjdCxcbiAgICBwb3NpdGlvbixcbiAgICBhcnJvd0NvbG9yLFxuICAgIGFycm93U2l6ZSxcbiAgfSk7XG5cbiAgY29uc3QgbWVyZ2VkQ29udGFpbmVyU3R5bGUgPSB1c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICAuLi5hcnJvd0NvbnRhaW5lclN0eWxlLFxuICAgICAgLi4uZXh0ZXJuYWxBcnJvd0NvbnRhaW5lclN0eWxlLFxuICAgIH0pLFxuICAgIFthcnJvd0NvbnRhaW5lclN0eWxlLCBleHRlcm5hbEFycm93Q29udGFpbmVyU3R5bGVdLFxuICApO1xuXG4gIGNvbnN0IG1lcmdlZEFycm93U3R5bGUgPSB1c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICAuLi5hcnJvd1N0eWxlLFxuICAgICAgLi4uZXh0ZXJuYWxBcnJvd1N0eWxlLFxuICAgIH0pLFxuICAgIFthcnJvd1N0eWxlLCBleHRlcm5hbEFycm93U3R5bGVdLFxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0gc3R5bGU9e21lcmdlZENvbnRhaW5lclN0eWxlfT5cbiAgICAgIDxkaXYgc3R5bGU9e21lcmdlZEFycm93U3R5bGV9IGNsYXNzTmFtZT17YXJyb3dDbGFzc05hbWV9IC8+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl0sIm5hbWVzIjpbInNsaWNlIiwib3B0aW9ucyIsInZub2RlSWQiLCJpc1ZhbGlkRWxlbWVudCIsInJlcmVuZGVyUXVldWUiLCJwcmV2RGVib3VuY2UiLCJpIiwiRU1QVFlfT0JKIiwiRU1QVFlfQVJSIiwiSVNfTk9OX0RJTUVOU0lPTkFMIiwiYXNzaWduIiwib2JqIiwicHJvcHMiLCJyZW1vdmVOb2RlIiwibm9kZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwiY2hpbGRyZW4iLCJrZXkiLCJyZWYiLCJub3JtYWxpemVkUHJvcHMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJjYWxsIiwiZGVmYXVsdFByb3BzIiwidW5kZWZpbmVkIiwiY3JlYXRlVk5vZGUiLCJvcmlnaW5hbCIsInZub2RlIiwiY29uc3RydWN0b3IiLCJjcmVhdGVSZWYiLCJjdXJyZW50IiwiRnJhZ21lbnQiLCJDb21wb25lbnQiLCJjb250ZXh0IiwiZ2V0RG9tU2libGluZyIsImNoaWxkSW5kZXgiLCJpbmRleE9mIiwic2libGluZyIsInVwZGF0ZVBhcmVudERvbVBvaW50ZXJzIiwiY2hpbGQiLCJiYXNlIiwiZW5xdWV1ZVJlbmRlciIsImMiLCJwdXNoIiwicHJvY2VzcyIsImRlYm91bmNlUmVuZGVyaW5nIiwic2V0VGltZW91dCIsInF1ZXVlIiwic29ydCIsImEiLCJiIiwic29tZSIsImNvbXBvbmVudCIsImNvbW1pdFF1ZXVlIiwib2xkVk5vZGUiLCJvbGREb20iLCJwYXJlbnREb20iLCJkaWZmIiwib3duZXJTVkdFbGVtZW50IiwiY29tbWl0Um9vdCIsImRpZmZDaGlsZHJlbiIsInJlbmRlclJlc3VsdCIsIm5ld1BhcmVudFZOb2RlIiwib2xkUGFyZW50Vk5vZGUiLCJnbG9iYWxDb250ZXh0IiwiaXNTdmciLCJleGNlc3NEb21DaGlsZHJlbiIsImlzSHlkcmF0aW5nIiwiaiIsImNoaWxkVk5vZGUiLCJuZXdEb20iLCJmaXJzdENoaWxkRG9tIiwicmVmcyIsIm9sZENoaWxkcmVuIiwib2xkQ2hpbGRyZW5MZW5ndGgiLCJBcnJheSIsImlzQXJyYXkiLCJyZW9yZGVyQ2hpbGRyZW4iLCJwbGFjZUNoaWxkIiwidW5tb3VudCIsImFwcGx5UmVmIiwidG1wIiwidG9DaGlsZEFycmF5Iiwib3V0IiwibmV4dERvbSIsInNpYkRvbSIsIm91dGVyIiwiYXBwZW5kQ2hpbGQiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsImRpZmZQcm9wcyIsImRvbSIsIm5ld1Byb3BzIiwib2xkUHJvcHMiLCJoeWRyYXRlIiwic2V0UHJvcGVydHkiLCJzZXRTdHlsZSIsInN0eWxlIiwidmFsdWUiLCJ0ZXN0IiwibmFtZSIsIm9sZFZhbHVlIiwidXNlQ2FwdHVyZSIsIm8iLCJjc3NUZXh0IiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwiX2xpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudFByb3h5Q2FwdHVyZSIsImV2ZW50UHJveHkiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZSIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImV2ZW50IiwibmV3Vk5vZGUiLCJpc05ldyIsIm9sZFN0YXRlIiwic25hcHNob3QiLCJjbGVhclByb2Nlc3NpbmdFeGNlcHRpb24iLCJwcm92aWRlciIsImNvbXBvbmVudENvbnRleHQiLCJyZW5kZXJIb29rIiwiY291bnQiLCJuZXdUeXBlIiwiY29udGV4dFR5cGUiLCJwcm90b3R5cGUiLCJyZW5kZXIiLCJkb1JlbmRlciIsInN1YiIsInN0YXRlIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiZm9yRWFjaCIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJnZXRDaGlsZENvbnRleHQiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImRpZmZFbGVtZW50Tm9kZXMiLCJkaWZmZWQiLCJyb290IiwiY2IiLCJvbGRIdG1sIiwibmV3SHRtbCIsIm5vZGVUeXBlIiwibG9jYWxOYW1lIiwiZG9jdW1lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZUVsZW1lbnROUyIsImlzIiwiZGF0YSIsImNoaWxkTm9kZXMiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImF0dHJpYnV0ZXMiLCJpbm5lckhUTUwiLCJjaGVja2VkIiwicGFyZW50Vk5vZGUiLCJza2lwUmVtb3ZlIiwiciIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwidGhpcyIsInJlcGxhY2VOb2RlIiwiZmlyc3RDaGlsZCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJkZWZhdWx0VmFsdWUiLCJjb250ZXh0SWQiLCJDb25zdW1lciIsImNvbnRleHRWYWx1ZSIsIlByb3ZpZGVyIiwic3VicyIsImN0eCIsIl9wcm9wcyIsIm9sZCIsInNwbGljZSIsImVycm9yIiwiZXJyb3JJbmZvIiwiY3RvciIsImhhbmRsZWQiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJzZXRTdGF0ZSIsImNvbXBvbmVudERpZENhdGNoIiwidXBkYXRlIiwiY2FsbGJhY2siLCJzIiwiZm9yY2VVcGRhdGUiLCJjdXJyZW50SW5kZXgiLCJjdXJyZW50Q29tcG9uZW50IiwicHJldmlvdXNDb21wb25lbnQiLCJwcmV2UmFmIiwiY3VycmVudEhvb2siLCJhZnRlclBhaW50RWZmZWN0cyIsIkVNUFRZIiwib2xkQmVmb3JlRGlmZiIsIm9sZEJlZm9yZVJlbmRlciIsIm9sZEFmdGVyRGlmZiIsIm9sZENvbW1pdCIsIm9sZEJlZm9yZVVubW91bnQiLCJnZXRIb29rU3RhdGUiLCJpbmRleCIsImhvb2tzIiwidXNlU3RhdGUiLCJpbml0aWFsU3RhdGUiLCJ1c2VSZWR1Y2VyIiwiaW52b2tlT3JSZXR1cm4iLCJyZWR1Y2VyIiwiaW5pdCIsImhvb2tTdGF0ZSIsIl9yZWR1Y2VyIiwiYWN0aW9uIiwibmV4dFZhbHVlIiwidXNlRWZmZWN0IiwiYXJncyIsImFyZ3NDaGFuZ2VkIiwiX3BlbmRpbmdBcmdzIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlUmVmIiwiaW5pdGlhbFZhbHVlIiwidXNlTWVtbyIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJjcmVhdGVIYW5kbGUiLCJjb25jYXQiLCJmYWN0b3J5IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRGVidWdWYWx1ZSIsImZvcm1hdHRlciIsInVzZUVycm9yQm91bmRhcnkiLCJlcnJTdGF0ZSIsImVyciIsImZsdXNoQWZ0ZXJQYWludEVmZmVjdHMiLCJzaGlmdCIsImludm9rZUNsZWFudXAiLCJpbnZva2VFZmZlY3QiLCJob29rSXRlbSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJhZiIsImRvbmUiLCJjbGVhclRpbWVvdXQiLCJ0aW1lb3V0IiwiSEFTX1JBRiIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiZmlsdGVyIiwiaGFzRXJyb3JlZCIsImhvb2siLCJjb21wIiwiY2xlYW51cCIsIm9sZEFyZ3MiLCJuZXdBcmdzIiwiYXJnIiwiZiIsIl9fc2VsZiIsIl9fc291cmNlIiwic2hhbGxvd0RpZmZlcnMiLCJQdXJlQ29tcG9uZW50IiwicCIsIm1lbW8iLCJjb21wYXJlciIsInNob3VsZFVwZGF0ZSIsIm5leHRQcm9wcyIsInVwZGF0ZVJlZiIsIk1lbW9lZCIsImRpc3BsYXlOYW1lIiwiaXNSZWFjdENvbXBvbmVudCIsImlzUHVyZVJlYWN0Q29tcG9uZW50Iiwib2xkRGlmZkhvb2siLCJSRUFDVF9GT1JXQVJEX1NZTUJPTCIsIlN5bWJvbCIsImZvciIsImZvcndhcmRSZWYiLCJmbiIsIkZvcndhcmRlZCIsImNsb25lIiwiJCR0eXBlb2YiLCJtYXBGbiIsIm1hcCIsIkNoaWxkcmVuIiwib25seSIsIm5vcm1hbGl6ZWQiLCJ0b0FycmF5Iiwib2xkQ2F0Y2hFcnJvciIsInRoZW4iLCJvbGRVbm1vdW50IiwiU3VzcGVuc2UiLCJfc3VzcGVuZGVycyIsInN1c3BlbmRlZCIsImxhenkiLCJsb2FkZXIiLCJwcm9tIiwiTGF6eSIsImV4cG9ydHMiLCJkZWZhdWx0IiwiU3VzcGVuc2VMaXN0IiwiX25leHQiLCJfbWFwIiwicHJvbWlzZSIsInN1c3BlbmRpbmdWTm9kZSIsInN1c3BlbmRpbmdDb21wb25lbnQiLCJyZXNvbHZlIiwicmVzb2x2ZWQiLCJvblJlc29sdmVkIiwib25TdXNwZW5zaW9uQ29tcGxldGUiLCJzdXNwZW5kZWRWTm9kZSIsInJlbW92ZU9yaWdpbmFsIiwiZGV0YWNoZWRQYXJlbnQiLCJvcmlnaW5hbFBhcmVudCIsInBvcCIsIndhc0h5ZHJhdGluZyIsImRldGFjaGVkQ29tcG9uZW50IiwiZGV0YWNoZWRDbG9uZSIsImVmZmVjdCIsImZhbGxiYWNrIiwibGlzdCIsImRlbGV0ZSIsInJldmVhbE9yZGVyIiwic2l6ZSIsIkNvbnRleHRQcm92aWRlciIsIlBvcnRhbCIsIl90aGlzIiwiY29udGFpbmVyIiwiX2NvbnRhaW5lciIsIl90ZW1wIiwiYmVmb3JlIiwiY3JlYXRlUG9ydGFsIiwiZWwiLCJjb250YWluZXJJbmZvIiwiZGVsZWdhdGVkIiwiZ2V0IiwidW5zdXNwZW5kIiwid3JhcHBlZFVuc3VzcGVuZCIsIk1hcCIsInJldmVyc2UiLCJzZXQiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJDQU1FTF9QUk9QUyIsIklTX0RPTSIsIm9uQ2hhbmdlSW5wdXRUeXBlIiwicGFyZW50IiwidGV4dENvbnRlbnQiLCJwcmVhY3RSZW5kZXIiLCJwcmVhY3RIeWRyYXRlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJ2Iiwid3JpdGFibGUiLCJvbGRFdmVudEhvb2siLCJlbXB0eSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY2FuY2VsQnViYmxlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInBlcnNpc3QiLCJuYXRpdmVFdmVudCIsImNsYXNzTmFtZURlc2NyaXB0b3IiLCJjbGFzcyIsIm9sZFZOb2RlSG9vayIsIm5vbkN1c3RvbUVsZW1lbnQiLCJtdWx0aXBsZSIsInNlbGVjdGVkIiwiY2xhc3NOYW1lIiwiZW51bWVyYWJsZSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsInJlYWRDb250ZXh0IiwidmVyc2lvbiIsImNyZWF0ZUZhY3RvcnkiLCJiaW5kIiwiZWxlbWVudCIsInByZWFjdENsb25lRWxlbWVudCIsImFwcGx5IiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJTdHJpY3RNb2RlIiwic3RhcnRUcmFuc2l0aW9uIiwidXNlRGVmZXJyZWRWYWx1ZSIsInZhbCIsInVzZVRyYW5zaXRpb24iLCJ1c2VJbnNlcnRpb25FZmZlY3QiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInN1YnNjcmliZSIsImdldFNuYXBzaG90Il0sInZlcnNpb24iOjMsImZpbGUiOiJjb250ZW50LmZiNGY1NmQzLmpzLm1hcCJ9
