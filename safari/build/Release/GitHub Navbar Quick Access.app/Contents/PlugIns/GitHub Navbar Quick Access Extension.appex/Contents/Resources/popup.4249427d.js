// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"7ZLle":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _preact = require("preact");
var _popup = require("./Popup");
var _popupDefault = parcelHelpers.interopDefault(_popup);
(0, _preact.render)((0, _preact.h)((0, _popupDefault.default), null), document.body);

},{"preact":"jJoga","./Popup":"hmM9R","@parcel/transformer-js/src/esmodule-helpers.js":"8ISrk"}],"jJoga":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>P);
parcelHelpers.export(exports, "hydrate", ()=>S);
parcelHelpers.export(exports, "createElement", ()=>h);
parcelHelpers.export(exports, "h", ()=>h);
parcelHelpers.export(exports, "Fragment", ()=>p);
parcelHelpers.export(exports, "createRef", ()=>y);
parcelHelpers.export(exports, "isValidElement", ()=>i);
parcelHelpers.export(exports, "Component", ()=>d);
parcelHelpers.export(exports, "cloneElement", ()=>q);
parcelHelpers.export(exports, "createContext", ()=>B);
parcelHelpers.export(exports, "toChildArray", ()=>x);
parcelHelpers.export(exports, "options", ()=>l);
var n, l, u, i, t, o, r, f = {}, e = [], c = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
function s(n1, l1) {
    for(var u1 in l1)n1[u1] = l1[u1];
    return n1;
}
function a(n2) {
    var l2 = n2.parentNode;
    l2 && l2.removeChild(n2);
}
function h(l3, u2, i1) {
    var t1, o1, r1, f1 = {};
    for(r1 in u2)"key" == r1 ? t1 = u2[r1] : "ref" == r1 ? o1 = u2[r1] : f1[r1] = u2[r1];
    if (arguments.length > 2 && (f1.children = arguments.length > 3 ? n.call(arguments, 2) : i1), "function" == typeof l3 && null != l3.defaultProps) for(r1 in l3.defaultProps)void 0 === f1[r1] && (f1[r1] = l3.defaultProps[r1]);
    return v(l3, f1, t1, o1, null);
}
function v(n3, i2, t2, o2, r2) {
    var f2 = {
        type: n3,
        props: i2,
        key: t2,
        ref: o2,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: null == r2 ? ++u : r2
    };
    return null == r2 && null != l.vnode && l.vnode(f2), f2;
}
function y() {
    return {
        current: null
    };
}
function p(n4) {
    return n4.children;
}
function d(n5, l4) {
    this.props = n5, this.context = l4;
}
function _(n6, l5) {
    if (null == l5) return n6.__ ? _(n6.__, n6.__.__k.indexOf(n6) + 1) : null;
    for(var u3; l5 < n6.__k.length; l5++)if (null != (u3 = n6.__k[l5]) && null != u3.__e) return u3.__e;
    return "function" == typeof n6.type ? _(n6) : null;
}
function k(n7) {
    var l6, u4;
    if (null != (n7 = n7.__) && null != n7.__c) {
        for(n7.__e = n7.__c.base = null, l6 = 0; l6 < n7.__k.length; l6++)if (null != (u4 = n7.__k[l6]) && null != u4.__e) {
            n7.__e = n7.__c.base = u4.__e;
            break;
        }
        return k(n7);
    }
}
function b(n8) {
    (!n8.__d && (n8.__d = !0) && t.push(n8) && !g.__r++ || o !== l.debounceRendering) && ((o = l.debounceRendering) || setTimeout)(g);
}
function g() {
    for(var n9; g.__r = t.length;)n9 = t.sort(function(n10, l7) {
        return n10.__v.__b - l7.__v.__b;
    }), t = [], n9.some(function(n11) {
        var l8, u5, i3, t3, o3, r3;
        n11.__d && (o3 = (t3 = (l8 = n11).__v).__e, (r3 = l8.__P) && (u5 = [], (i3 = s({}, t3)).__v = t3.__v + 1, j(r3, t3, i3, l8.__n, void 0 !== r3.ownerSVGElement, null != t3.__h ? [
            o3
        ] : null, u5, null == o3 ? _(t3) : o3, t3.__h), z(u5, t3), t3.__e != o3 && k(t3)));
    });
}
function w(n12, l9, u6, i4, t4, o4, r4, c1, s1, a1) {
    var h1, y1, d1, k1, b1, g1, w1, x1 = i4 && i4.__k || e, C1 = x1.length;
    for(u6.__k = [], h1 = 0; h1 < l9.length; h1++)if (null != (k1 = u6.__k[h1] = null == (k1 = l9[h1]) || "boolean" == typeof k1 ? null : "string" == typeof k1 || "number" == typeof k1 || "bigint" == typeof k1 ? v(null, k1, null, null, k1) : Array.isArray(k1) ? v(p, {
        children: k1
    }, null, null, null) : k1.__b > 0 ? v(k1.type, k1.props, k1.key, null, k1.__v) : k1)) {
        if (k1.__ = u6, k1.__b = u6.__b + 1, null === (d1 = x1[h1]) || d1 && k1.key == d1.key && k1.type === d1.type) x1[h1] = void 0;
        else for(y1 = 0; y1 < C1; y1++){
            if ((d1 = x1[y1]) && k1.key == d1.key && k1.type === d1.type) {
                x1[y1] = void 0;
                break;
            }
            d1 = null;
        }
        j(n12, k1, d1 = d1 || f, t4, o4, r4, c1, s1, a1), b1 = k1.__e, (y1 = k1.ref) && d1.ref != y1 && (w1 || (w1 = []), d1.ref && w1.push(d1.ref, null, k1), w1.push(y1, k1.__c || b1, k1)), null != b1 ? (null == g1 && (g1 = b1), "function" == typeof k1.type && k1.__k === d1.__k ? k1.__d = s1 = m(k1, s1, n12) : s1 = A(n12, k1, d1, x1, b1, s1), "function" == typeof u6.type && (u6.__d = s1)) : s1 && d1.__e == s1 && s1.parentNode != n12 && (s1 = _(d1));
    }
    for(u6.__e = g1, h1 = C1; h1--;)null != x1[h1] && ("function" == typeof u6.type && null != x1[h1].__e && x1[h1].__e == u6.__d && (u6.__d = _(i4, h1 + 1)), N(x1[h1], x1[h1]));
    if (w1) for(h1 = 0; h1 < w1.length; h1++)M(w1[h1], w1[++h1], w1[++h1]);
}
function m(n13, l10, u7) {
    for(var i5, t5 = n13.__k, o5 = 0; t5 && o5 < t5.length; o5++)(i5 = t5[o5]) && (i5.__ = n13, l10 = "function" == typeof i5.type ? m(i5, l10, u7) : A(u7, i5, i5, t5, i5.__e, l10));
    return l10;
}
function x(n14, l11) {
    return l11 = l11 || [], null == n14 || "boolean" == typeof n14 || (Array.isArray(n14) ? n14.some(function(n15) {
        x(n15, l11);
    }) : l11.push(n14)), l11;
}
function A(n16, l12, u8, i6, t6, o6) {
    var r5, f3, e1;
    if (void 0 !== l12.__d) r5 = l12.__d, l12.__d = void 0;
    else if (null == u8 || t6 != o6 || null == t6.parentNode) n: if (null == o6 || o6.parentNode !== n16) n16.appendChild(t6), r5 = null;
    else {
        for(f3 = o6, e1 = 0; (f3 = f3.nextSibling) && e1 < i6.length; e1 += 2)if (f3 == t6) break n;
        n16.insertBefore(t6, o6), r5 = o6;
    }
    return void 0 !== r5 ? r5 : t6.nextSibling;
}
function C(n17, l13, u9, i7, t7) {
    var o7;
    for(o7 in u9)"children" === o7 || "key" === o7 || o7 in l13 || H(n17, o7, null, u9[o7], i7);
    for(o7 in l13)t7 && "function" != typeof l13[o7] || "children" === o7 || "key" === o7 || "value" === o7 || "checked" === o7 || u9[o7] === l13[o7] || H(n17, o7, l13[o7], u9[o7], i7);
}
function $(n18, l14, u10) {
    "-" === l14[0] ? n18.setProperty(l14, u10) : n18[l14] = null == u10 ? "" : "number" != typeof u10 || c.test(l14) ? u10 : u10 + "px";
}
function H(n19, l15, u11, i8, t8) {
    var o8;
    n: if ("style" === l15) {
        if ("string" == typeof u11) n19.style.cssText = u11;
        else {
            if ("string" == typeof i8 && (n19.style.cssText = i8 = ""), i8) for(l15 in i8)u11 && l15 in u11 || $(n19.style, l15, "");
            if (u11) for(l15 in u11)i8 && u11[l15] === i8[l15] || $(n19.style, l15, u11[l15]);
        }
    } else if ("o" === l15[0] && "n" === l15[1]) o8 = l15 !== (l15 = l15.replace(/Capture$/, "")), l15 = l15.toLowerCase() in n19 ? l15.toLowerCase().slice(2) : l15.slice(2), n19.l || (n19.l = {}), n19.l[l15 + o8] = u11, u11 ? i8 || n19.addEventListener(l15, o8 ? T : I, o8) : n19.removeEventListener(l15, o8 ? T : I, o8);
    else if ("dangerouslySetInnerHTML" !== l15) {
        if (t8) l15 = l15.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
        else if ("href" !== l15 && "list" !== l15 && "form" !== l15 && "tabIndex" !== l15 && "download" !== l15 && l15 in n19) try {
            n19[l15] = null == u11 ? "" : u11;
            break n;
        } catch (n) {}
        "function" == typeof u11 || (null != u11 && (!1 !== u11 || "a" === l15[0] && "r" === l15[1]) ? n19.setAttribute(l15, u11) : n19.removeAttribute(l15));
    }
}
function I(n20) {
    this.l[n20.type + !1](l.event ? l.event(n20) : n20);
}
function T(n21) {
    this.l[n21.type + !0](l.event ? l.event(n21) : n21);
}
function j(n22, u12, i9, t9, o9, r6, f4, e2, c2) {
    var a2, h2, v1, y2, _1, k2, b2, g2, m1, x2, A1, C2, $1, H1 = u12.type;
    if (void 0 !== u12.constructor) return null;
    null != i9.__h && (c2 = i9.__h, e2 = u12.__e = i9.__e, u12.__h = null, r6 = [
        e2
    ]), (a2 = l.__b) && a2(u12);
    try {
        n: if ("function" == typeof H1) {
            if (g2 = u12.props, m1 = (a2 = H1.contextType) && t9[a2.__c], x2 = a2 ? m1 ? m1.props.value : a2.__ : t9, i9.__c ? b2 = (h2 = u12.__c = i9.__c).__ = h2.__E : ("prototype" in H1 && H1.prototype.render ? u12.__c = h2 = new H1(g2, x2) : (u12.__c = h2 = new d(g2, x2), h2.constructor = H1, h2.render = O), m1 && m1.sub(h2), h2.props = g2, h2.state || (h2.state = {}), h2.context = x2, h2.__n = t9, v1 = h2.__d = !0, h2.__h = []), null == h2.__s && (h2.__s = h2.state), null != H1.getDerivedStateFromProps && (h2.__s == h2.state && (h2.__s = s({}, h2.__s)), s(h2.__s, H1.getDerivedStateFromProps(g2, h2.__s))), y2 = h2.props, _1 = h2.state, v1) null == H1.getDerivedStateFromProps && null != h2.componentWillMount && h2.componentWillMount(), null != h2.componentDidMount && h2.__h.push(h2.componentDidMount);
            else {
                if (null == H1.getDerivedStateFromProps && g2 !== y2 && null != h2.componentWillReceiveProps && h2.componentWillReceiveProps(g2, x2), !h2.__e && null != h2.shouldComponentUpdate && !1 === h2.shouldComponentUpdate(g2, h2.__s, x2) || u12.__v === i9.__v) {
                    h2.props = g2, h2.state = h2.__s, u12.__v !== i9.__v && (h2.__d = !1), h2.__v = u12, u12.__e = i9.__e, u12.__k = i9.__k, u12.__k.forEach(function(n23) {
                        n23 && (n23.__ = u12);
                    }), h2.__h.length && f4.push(h2);
                    break n;
                }
                null != h2.componentWillUpdate && h2.componentWillUpdate(g2, h2.__s, x2), null != h2.componentDidUpdate && h2.__h.push(function() {
                    h2.componentDidUpdate(y2, _1, k2);
                });
            }
            if (h2.context = x2, h2.props = g2, h2.__v = u12, h2.__P = n22, A1 = l.__r, C2 = 0, "prototype" in H1 && H1.prototype.render) h2.state = h2.__s, h2.__d = !1, A1 && A1(u12), a2 = h2.render(h2.props, h2.state, h2.context);
            else do h2.__d = !1, A1 && A1(u12), a2 = h2.render(h2.props, h2.state, h2.context), h2.state = h2.__s;
            while (h2.__d && ++C2 < 25);
            h2.state = h2.__s, null != h2.getChildContext && (t9 = s(s({}, t9), h2.getChildContext())), v1 || null == h2.getSnapshotBeforeUpdate || (k2 = h2.getSnapshotBeforeUpdate(y2, _1)), $1 = null != a2 && a2.type === p && null == a2.key ? a2.props.children : a2, w(n22, Array.isArray($1) ? $1 : [
                $1
            ], u12, i9, t9, o9, r6, f4, e2, c2), h2.base = u12.__e, u12.__h = null, h2.__h.length && f4.push(h2), b2 && (h2.__E = h2.__ = null), h2.__e = !1;
        } else null == r6 && u12.__v === i9.__v ? (u12.__k = i9.__k, u12.__e = i9.__e) : u12.__e = L(i9.__e, u12, i9, t9, o9, r6, f4, c2);
        (a2 = l.diffed) && a2(u12);
    } catch (n24) {
        u12.__v = null, (c2 || null != r6) && (u12.__e = e2, u12.__h = !!c2, r6[r6.indexOf(e2)] = null), l.__e(n24, u12, i9);
    }
}
function z(n25, u13) {
    l.__c && l.__c(u13, n25), n25.some(function(u14) {
        try {
            n25 = u14.__h, u14.__h = [], n25.some(function(n26) {
                n26.call(u14);
            });
        } catch (n27) {
            l.__e(n27, u14.__v);
        }
    });
}
function L(l16, u15, i10, t10, o10, r7, e3, c3) {
    var s2, h3, v2, y3 = i10.props, p1 = u15.props, d2 = u15.type, k3 = 0;
    if ("svg" === d2 && (o10 = !0), null != r7) {
        for(; k3 < r7.length; k3++)if ((s2 = r7[k3]) && "setAttribute" in s2 == !!d2 && (d2 ? s2.localName === d2 : 3 === s2.nodeType)) {
            l16 = s2, r7[k3] = null;
            break;
        }
    }
    if (null == l16) {
        if (null === d2) return document.createTextNode(p1);
        l16 = o10 ? document.createElementNS("http://www.w3.org/2000/svg", d2) : document.createElement(d2, p1.is && p1), r7 = null, c3 = !1;
    }
    if (null === d2) y3 === p1 || c3 && l16.data === p1 || (l16.data = p1);
    else {
        if (r7 = r7 && n.call(l16.childNodes), h3 = (y3 = i10.props || f).dangerouslySetInnerHTML, v2 = p1.dangerouslySetInnerHTML, !c3) {
            if (null != r7) for(y3 = {}, k3 = 0; k3 < l16.attributes.length; k3++)y3[l16.attributes[k3].name] = l16.attributes[k3].value;
            (v2 || h3) && (v2 && (h3 && v2.__html == h3.__html || v2.__html === l16.innerHTML) || (l16.innerHTML = v2 && v2.__html || ""));
        }
        if (C(l16, p1, y3, o10, c3), v2) u15.__k = [];
        else if (k3 = u15.props.children, w(l16, Array.isArray(k3) ? k3 : [
            k3
        ], u15, i10, t10, o10 && "foreignObject" !== d2, r7, e3, r7 ? r7[0] : i10.__k && _(i10, 0), c3), null != r7) for(k3 = r7.length; k3--;)null != r7[k3] && a(r7[k3]);
        c3 || ("value" in p1 && void 0 !== (k3 = p1.value) && (k3 !== l16.value || "progress" === d2 && !k3 || "option" === d2 && k3 !== y3.value) && H(l16, "value", k3, y3.value, !1), "checked" in p1 && void 0 !== (k3 = p1.checked) && k3 !== l16.checked && H(l16, "checked", k3, y3.checked, !1));
    }
    return l16;
}
function M(n28, u16, i11) {
    try {
        "function" == typeof n28 ? n28(u16) : n28.current = u16;
    } catch (n29) {
        l.__e(n29, i11);
    }
}
function N(n30, u17, i12) {
    var t11, o11;
    if (l.unmount && l.unmount(n30), (t11 = n30.ref) && (t11.current && t11.current !== n30.__e || M(t11, null, u17)), null != (t11 = n30.__c)) {
        if (t11.componentWillUnmount) try {
            t11.componentWillUnmount();
        } catch (n31) {
            l.__e(n31, u17);
        }
        t11.base = t11.__P = null;
    }
    if (t11 = n30.__k) for(o11 = 0; o11 < t11.length; o11++)t11[o11] && N(t11[o11], u17, "function" != typeof n30.type);
    i12 || null == n30.__e || a(n30.__e), n30.__e = n30.__d = void 0;
}
function O(n32, l, u18) {
    return this.constructor(n32, u18);
}
function P(u19, i13, t12) {
    var o12, r8, e4;
    l.__ && l.__(u19, i13), r8 = (o12 = "function" == typeof t12) ? null : t12 && t12.__k || i13.__k, e4 = [], j(i13, u19 = (!o12 && t12 || i13).__k = h(p, null, [
        u19
    ]), r8 || f, f, void 0 !== i13.ownerSVGElement, !o12 && t12 ? [
        t12
    ] : r8 ? null : i13.firstChild ? n.call(i13.childNodes) : null, e4, !o12 && t12 ? t12 : r8 ? r8.__e : i13.firstChild, o12), z(e4, u19);
}
function S(n33, l17) {
    P(n33, l17, S);
}
function q(l18, u20, i14) {
    var t13, o13, r9, f5 = s({}, l18.props);
    for(r9 in u20)"key" == r9 ? t13 = u20[r9] : "ref" == r9 ? o13 = u20[r9] : f5[r9] = u20[r9];
    return arguments.length > 2 && (f5.children = arguments.length > 3 ? n.call(arguments, 2) : i14), v(l18.type, f5, t13 || l18.key, o13 || l18.ref, null);
}
function B(n34, l19) {
    var u21 = {
        __c: l19 = "__cC" + r++,
        __: n34,
        Consumer: function(n35, l20) {
            return n35.children(l20);
        },
        Provider: function(n36) {
            var u22, i15;
            return this.getChildContext || (u22 = [], (i15 = {})[l19] = this, this.getChildContext = function() {
                return i15;
            }, this.shouldComponentUpdate = function(n37) {
                this.props.value !== n37.value && u22.some(b);
            }, this.sub = function(n38) {
                u22.push(n38);
                var l21 = n38.componentWillUnmount;
                n38.componentWillUnmount = function() {
                    u22.splice(u22.indexOf(n38), 1), l21 && l21.call(n38);
                };
            }), n36.children;
        }
    };
    return u21.Provider.__ = u21.Consumer.contextType = u21;
}
n = e.slice, l = {
    __e: function(n39, l22, u, i16) {
        for(var t14, o14, r10; l22 = l22.__;)if ((t14 = l22.__c) && !t14.__) try {
            if ((o14 = t14.constructor) && null != o14.getDerivedStateFromError && (t14.setState(o14.getDerivedStateFromError(n39)), r10 = t14.__d), null != t14.componentDidCatch && (t14.componentDidCatch(n39, i16 || {}), r10 = t14.__d), r10) return t14.__E = t14;
        } catch (l23) {
            n39 = l23;
        }
        throw n39;
    }
}, u = 0, i = function(n40) {
    return null != n40 && void 0 === n40.constructor;
}, d.prototype.setState = function(n41, l24) {
    var u23;
    u23 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = s({}, this.state), "function" == typeof n41 && (n41 = n41(s({}, u23), this.props)), n41 && s(u23, n41), null != n41 && this.__v && (l24 && this.__h.push(l24), b(this));
}, d.prototype.forceUpdate = function(n42) {
    this.__v && (this.__e = !0, n42 && this.__h.push(n42), b(this));
}, d.prototype.render = p, t = [], g.__r = 0, r = 0;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"8ISrk"}],"8ISrk":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"hmM9R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _preact = require("preact");
var Popup = function() {
    return (0, _preact.h)("div", {
        className: "popup"
    }, (0, _preact.h)("div", {
        className: "header"
    }, (0, _preact.h)("span", null, "Quick\u2122 GitHub Navbar")));
};
exports.default = Popup;

},{"preact":"jJoga","@parcel/transformer-js/src/esmodule-helpers.js":"8ISrk"}]},["7ZLle"], "7ZLle", "parcelRequire94c2")

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
